
distance_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009348  08009348  00019348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009794  08009794  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009794  08009794  00019794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800979c  0800979c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097a0  080097a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080097a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001dc  08009980  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08009980  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012775  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249c  00000000  00000000  00032981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00034e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00035e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023893  00000000  00000000  00036d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012298  00000000  00000000  0005a5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d95c8  00000000  00000000  0006c893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145e5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005648  00000000  00000000  00145eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800932c 	.word	0x0800932c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800932c 	.word	0x0800932c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f64:	1d39      	adds	r1, r7, #4
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <__io_putchar+0x20>)
 8000f6e:	f003 fec9 	bl	8004d04 <HAL_UART_Transmit>
  return ch;
 8000f72:	687b      	ldr	r3, [r7, #4]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000290 	.word	0x20000290

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f000 fe6c 	bl	8001c62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f8f5 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f000 fa7b 	bl	8001488 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f92:	f000 f943 	bl	800121c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f96:	f000 f9f9 	bl	800138c <MX_TIM2_Init>
  MX_UART4_Init();
 8000f9a:	f000 fa45 	bl	8001428 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4860      	ldr	r0, [pc, #384]	; (8001124 <main+0x1a4>)
 8000fa2:	f002 fd1d 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	485e      	ldr	r0, [pc, #376]	; (8001124 <main+0x1a4>)
 8000faa:	f002 fd19 	bl	80039e0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fae:	485e      	ldr	r0, [pc, #376]	; (8001128 <main+0x1a8>)
 8000fb0:	f002 fc58 	bl	8003864 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart4, Receive, 10);
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	495d      	ldr	r1, [pc, #372]	; (800112c <main+0x1ac>)
 8000fb8:	485d      	ldr	r0, [pc, #372]	; (8001130 <main+0x1b0>)
 8000fba:	f003 ff37 	bl	8004e2c <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//  HAL_UART_Transmit_IT(&huart4, (uint32_t *) &speed, 10);
	   // TIM1->CCR1 = s;
	 if((LocalTime - PreviousTime ) >= 500)
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <main+0x1b4>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b5d      	ldr	r3, [pc, #372]	; (8001138 <main+0x1b8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fcc:	d346      	bcc.n	800105c <main+0xdc>
	 {
		 if(distance<10){
 8000fce:	4b5b      	ldr	r3, [pc, #364]	; (800113c <main+0x1bc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b09      	cmp	r3, #9
 8000fd4:	dc0c      	bgt.n	8000ff0 <main+0x70>
			 sprintf(buffer, "%d000%d%d", POD_ID, distance, Rx);
 8000fd6:	4b5a      	ldr	r3, [pc, #360]	; (8001140 <main+0x1c0>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b58      	ldr	r3, [pc, #352]	; (800113c <main+0x1bc>)
 8000fdc:	6819      	ldr	r1, [r3, #0]
 8000fde:	4b59      	ldr	r3, [pc, #356]	; (8001144 <main+0x1c4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4958      	ldr	r1, [pc, #352]	; (8001148 <main+0x1c8>)
 8000fe8:	4858      	ldr	r0, [pc, #352]	; (800114c <main+0x1cc>)
 8000fea:	f005 fe9b 	bl	8006d24 <siprintf>
 8000fee:	e02e      	b.n	800104e <main+0xce>
		 }
		 else if(distance<100){
 8000ff0:	4b52      	ldr	r3, [pc, #328]	; (800113c <main+0x1bc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b63      	cmp	r3, #99	; 0x63
 8000ff6:	dc0c      	bgt.n	8001012 <main+0x92>
			 sprintf(buffer, "%d00%d%d", POD_ID, distance, Rx);
 8000ff8:	4b51      	ldr	r3, [pc, #324]	; (8001140 <main+0x1c0>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	; (800113c <main+0x1bc>)
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	4b50      	ldr	r3, [pc, #320]	; (8001144 <main+0x1c4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	460b      	mov	r3, r1
 8001008:	4951      	ldr	r1, [pc, #324]	; (8001150 <main+0x1d0>)
 800100a:	4850      	ldr	r0, [pc, #320]	; (800114c <main+0x1cc>)
 800100c:	f005 fe8a 	bl	8006d24 <siprintf>
 8001010:	e01d      	b.n	800104e <main+0xce>
		 }
		 else if(distance<1000){
 8001012:	4b4a      	ldr	r3, [pc, #296]	; (800113c <main+0x1bc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800101a:	da0c      	bge.n	8001036 <main+0xb6>
			 sprintf(buffer, "%d0%d%d", POD_ID, distance, Rx);
 800101c:	4b48      	ldr	r3, [pc, #288]	; (8001140 <main+0x1c0>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b46      	ldr	r3, [pc, #280]	; (800113c <main+0x1bc>)
 8001022:	6819      	ldr	r1, [r3, #0]
 8001024:	4b47      	ldr	r3, [pc, #284]	; (8001144 <main+0x1c4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	460b      	mov	r3, r1
 800102c:	4949      	ldr	r1, [pc, #292]	; (8001154 <main+0x1d4>)
 800102e:	4847      	ldr	r0, [pc, #284]	; (800114c <main+0x1cc>)
 8001030:	f005 fe78 	bl	8006d24 <siprintf>
 8001034:	e00b      	b.n	800104e <main+0xce>
		 }
		 else{
			 sprintf(buffer, "%d%d%d", POD_ID, distance, Rx);
 8001036:	4b42      	ldr	r3, [pc, #264]	; (8001140 <main+0x1c0>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b40      	ldr	r3, [pc, #256]	; (800113c <main+0x1bc>)
 800103c:	6819      	ldr	r1, [r3, #0]
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <main+0x1c4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	460b      	mov	r3, r1
 8001046:	4944      	ldr	r1, [pc, #272]	; (8001158 <main+0x1d8>)
 8001048:	4840      	ldr	r0, [pc, #256]	; (800114c <main+0x1cc>)
 800104a:	f005 fe6b 	bl	8006d24 <siprintf>
		 }
		 printf("%s\n",buffer);
 800104e:	483f      	ldr	r0, [pc, #252]	; (800114c <main+0x1cc>)
 8001050:	f005 fe60 	bl	8006d14 <puts>
		 PreviousTime = LocalTime;
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <main+0x1b4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a37      	ldr	r2, [pc, #220]	; (8001138 <main+0x1b8>)
 800105a:	6013      	str	r3, [r2, #0]
	// printf("%d %d%d\n",a,b,c);
	//  printf("%d",counter);



 if( Rx == 1)
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <main+0x1c4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d1ac      	bne.n	8000fbe <main+0x3e>
 {
	 	  if(Receive[3]=='1') // For forward direction
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <main+0x1ac>)
 8001066:	78db      	ldrb	r3, [r3, #3]
 8001068:	2b31      	cmp	r3, #49	; 0x31
 800106a:	d13f      	bne.n	80010ec <main+0x16c>
	 	   {
	 		  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 800106c:	2104      	movs	r1, #4
 800106e:	482d      	ldr	r0, [pc, #180]	; (8001124 <main+0x1a4>)
 8001070:	f002 fd9c 	bl	8003bac <HAL_TIM_PWM_Stop>
 	 	 	  TIM1->CCR2 = 0;
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <main+0x1dc>)
 8001076:	2200      	movs	r2, #0
 8001078:	639a      	str	r2, [r3, #56]	; 0x38
	 		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800107a:	2100      	movs	r1, #0
 800107c:	4829      	ldr	r0, [pc, #164]	; (8001124 <main+0x1a4>)
 800107e:	f002 fcaf 	bl	80039e0 <HAL_TIM_PWM_Start>

	 		 if(i<=spd){
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <main+0x1e0>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <main+0x1e4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	dc14      	bgt.n	80010b8 <main+0x138>
	 			// while(i<=spd){
	 				if(LocalTime - SpeedTime >= 10)
 800108e:	4b29      	ldr	r3, [pc, #164]	; (8001134 <main+0x1b4>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b35      	ldr	r3, [pc, #212]	; (8001168 <main+0x1e8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b09      	cmp	r3, #9
 800109a:	d927      	bls.n	80010ec <main+0x16c>
	 				{
						 TIM1->CCR1 = i;
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <main+0x1e0>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b2e      	ldr	r3, [pc, #184]	; (800115c <main+0x1dc>)
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
						 i+=10;
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <main+0x1e0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	330a      	adds	r3, #10
 80010aa:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <main+0x1e0>)
 80010ac:	6013      	str	r3, [r2, #0]
						 SpeedTime=LocalTime;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <main+0x1b4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a2d      	ldr	r2, [pc, #180]	; (8001168 <main+0x1e8>)
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e019      	b.n	80010ec <main+0x16c>
	 				}


	 		 }
	 		 else if(i>=spd)
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <main+0x1e0>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <main+0x1e4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	db13      	blt.n	80010ec <main+0x16c>
	 		 {
	 			// while(i>=spd){
	 				if(LocalTime - SpeedTime1 >= 10)
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <main+0x1b4>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <main+0x1ec>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b09      	cmp	r3, #9
 80010d0:	d90c      	bls.n	80010ec <main+0x16c>
	 				{
	 					TIM1->CCR1 = i;
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <main+0x1e0>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <main+0x1dc>)
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
						 i-=10;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <main+0x1e0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3b0a      	subs	r3, #10
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <main+0x1e0>)
 80010e2:	6013      	str	r3, [r2, #0]
						 SpeedTime1=LocalTime;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <main+0x1b4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <main+0x1ec>)
 80010ea:	6013      	str	r3, [r2, #0]
	 			    }

	 		 }
	 		 }
	 	  if((LocalTime - MotorTimeFed) >= FinalTime)
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <main+0x1b4>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <main+0x1f0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <main+0x1f4>)
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f4ff af5f 	bcc.w	8000fbe <main+0x3e>
	 	  {
	 		     HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8001100:	2100      	movs	r1, #0
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <main+0x1a4>)
 8001104:	f002 fd52 	bl	8003bac <HAL_TIM_PWM_Stop>
	 		     TIM1->CCR1 = 0;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <main+0x1dc>)
 800110a:	2200      	movs	r2, #0
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
	 		     MotorTimeFed = LocalTime;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <main+0x1b4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <main+0x1f0>)
 8001114:	6013      	str	r3, [r2, #0]
	 		        Rx=0;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <main+0x1c4>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
	 		        i=0;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <main+0x1e0>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
	 if((LocalTime - PreviousTime ) >= 500)
 8001122:	e74c      	b.n	8000fbe <main+0x3e>
 8001124:	200001f8 	.word	0x200001f8
 8001128:	20000244 	.word	0x20000244
 800112c:	2000032c 	.word	0x2000032c
 8001130:	20000290 	.word	0x20000290
 8001134:	200003c8 	.word	0x200003c8
 8001138:	20000354 	.word	0x20000354
 800113c:	200003bc 	.word	0x200003bc
 8001140:	20000324 	.word	0x20000324
 8001144:	20000358 	.word	0x20000358
 8001148:	08009348 	.word	0x08009348
 800114c:	200003b0 	.word	0x200003b0
 8001150:	08009354 	.word	0x08009354
 8001154:	08009360 	.word	0x08009360
 8001158:	08009368 	.word	0x08009368
 800115c:	40012c00 	.word	0x40012c00
 8001160:	2000035c 	.word	0x2000035c
 8001164:	20000338 	.word	0x20000338
 8001168:	20000318 	.word	0x20000318
 800116c:	2000031c 	.word	0x2000031c
 8001170:	2000034c 	.word	0x2000034c
 8001174:	20000340 	.word	0x20000340

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b096      	sub	sp, #88	; 0x58
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2244      	movs	r2, #68	; 0x44
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f005 f8e4 	bl	8006354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800119a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800119e:	f001 f91d 	bl	80023dc <HAL_PWREx_ControlVoltageScaling>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011a8:	f000 fafa 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ac:	2302      	movs	r3, #2
 80011ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b6:	2340      	movs	r3, #64	; 0x40
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	2302      	movs	r3, #2
 80011bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011be:	2302      	movs	r3, #2
 80011c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011c6:	230a      	movs	r3, #10
 80011c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011ca:	2307      	movs	r3, #7
 80011cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f954 	bl	8002488 <HAL_RCC_OscConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011e6:	f000 fadb 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ea:	230f      	movs	r3, #15
 80011ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ee:	2303      	movs	r3, #3
 80011f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	2104      	movs	r1, #4
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fd54 	bl	8002cb0 <HAL_RCC_ClockConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800120e:	f000 fac7 	bl	80017a0 <Error_Handler>
  }
}
 8001212:	bf00      	nop
 8001214:	3758      	adds	r7, #88	; 0x58
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b09a      	sub	sp, #104	; 0x68
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]
 800124e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	222c      	movs	r2, #44	; 0x2c
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f005 f87c 	bl	8006354 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800125c:	4b49      	ldr	r3, [pc, #292]	; (8001384 <MX_TIM1_Init+0x168>)
 800125e:	4a4a      	ldr	r2, [pc, #296]	; (8001388 <MX_TIM1_Init+0x16c>)
 8001260:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001262:	4b48      	ldr	r3, [pc, #288]	; (8001384 <MX_TIM1_Init+0x168>)
 8001264:	2209      	movs	r2, #9
 8001266:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <MX_TIM1_Init+0x168>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 800126e:	4b45      	ldr	r3, [pc, #276]	; (8001384 <MX_TIM1_Init+0x168>)
 8001270:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001274:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <MX_TIM1_Init+0x168>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800127c:	4b41      	ldr	r3, [pc, #260]	; (8001384 <MX_TIM1_Init+0x168>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001282:	4b40      	ldr	r3, [pc, #256]	; (8001384 <MX_TIM1_Init+0x168>)
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001288:	483e      	ldr	r0, [pc, #248]	; (8001384 <MX_TIM1_Init+0x168>)
 800128a:	f002 fa93 	bl	80037b4 <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001294:	f000 fa84 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800129e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012a2:	4619      	mov	r1, r3
 80012a4:	4837      	ldr	r0, [pc, #220]	; (8001384 <MX_TIM1_Init+0x168>)
 80012a6:	f002 ff3d 	bl	8004124 <HAL_TIM_ConfigClockSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012b0:	f000 fa76 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012b4:	4833      	ldr	r0, [pc, #204]	; (8001384 <MX_TIM1_Init+0x168>)
 80012b6:	f002 fb31 	bl	800391c <HAL_TIM_PWM_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012c0:	f000 fa6e 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012d4:	4619      	mov	r1, r3
 80012d6:	482b      	ldr	r0, [pc, #172]	; (8001384 <MX_TIM1_Init+0x168>)
 80012d8:	f003 fbc2 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012e2:	f000 fa5d 	bl	80017a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e6:	2360      	movs	r3, #96	; 0x60
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f2:	2300      	movs	r3, #0
 80012f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <MX_TIM1_Init+0x168>)
 800130c:	f002 fdf6 	bl	8003efc <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001316:	f000 fa43 	bl	80017a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800131a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800131e:	2204      	movs	r2, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <MX_TIM1_Init+0x168>)
 8001324:	f002 fdea 	bl	8003efc <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800132e:	f000 fa37 	bl	80017a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <MX_TIM1_Init+0x168>)
 8001368:	f003 fbe8 	bl	8004b3c <HAL_TIMEx_ConfigBreakDeadTime>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001372:	f000 fa15 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001376:	4803      	ldr	r0, [pc, #12]	; (8001384 <MX_TIM1_Init+0x168>)
 8001378:	f000 fa7c 	bl	8001874 <HAL_TIM_MspPostInit>

}
 800137c:	bf00      	nop
 800137e:	3768      	adds	r7, #104	; 0x68
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200001f8 	.word	0x200001f8
 8001388:	40012c00 	.word	0x40012c00

0800138c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MX_TIM2_Init+0x98>)
 80013ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_TIM2_Init+0x98>)
 80013b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_TIM2_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_TIM2_Init+0x98>)
 80013c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_TIM2_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_TIM2_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d4:	4813      	ldr	r0, [pc, #76]	; (8001424 <MX_TIM2_Init+0x98>)
 80013d6:	f002 f9ed 	bl	80037b4 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80013e0:	f000 f9de 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_TIM2_Init+0x98>)
 80013f2:	f002 fe97 	bl	8004124 <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80013fc:	f000 f9d0 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001400:	2320      	movs	r3, #32
 8001402:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_TIM2_Init+0x98>)
 800140e:	f003 fb27 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001418:	f000 f9c2 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000244 	.word	0x20000244

08001428 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_UART4_Init+0x58>)
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <MX_UART4_Init+0x5c>)
 8001430:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_UART4_Init+0x58>)
 8001434:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001438:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_UART4_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_UART4_Init+0x58>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_UART4_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_UART4_Init+0x58>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_UART4_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_UART4_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_UART4_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_UART4_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_UART4_Init+0x58>)
 800146c:	f003 fbfc 	bl	8004c68 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001476:	f000 f993 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000290 	.word	0x20000290
 8001484:	40004c00 	.word	0x40004c00

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_GPIO_Init+0x98>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <MX_GPIO_Init+0x98>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_GPIO_Init+0x98>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_GPIO_Init+0x98>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a19      	ldr	r2, [pc, #100]	; (8001520 <MX_GPIO_Init+0x98>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_GPIO_Init+0x98>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ce:	2340      	movs	r3, #64	; 0x40
 80014d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f000 fdc1 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f4:	2302      	movs	r3, #2
 80014f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f000 fdb3 	bl	800206c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2017      	movs	r0, #23
 800150c:	f000 fcf9 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001510:	2017      	movs	r0, #23
 8001512:	f000 fd12 	bl	8001f3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]

	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7)== GPIO_PIN_SET)
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f000 ff14 	bl	8002360 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d104      	bne.n	8001548 <HAL_GPIO_EXTI_Callback+0x24>
	{
		counter++;
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a02      	ldr	r2, [pc, #8]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001546:	6013      	str	r3, [r2, #0]
	/*if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)== GPIO_PIN_RESET)
		{
			counterir++;

	}*/
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000314 	.word	0x20000314
 8001554:	00000000 	.word	0x00000000

08001558 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    cnt[j] = counter;
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a45      	ldr	r2, [pc, #276]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	4945      	ldr	r1, [pc, #276]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    countSum+=counter;
 800156e:	4b45      	ldr	r3, [pc, #276]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a42      	ldr	r2, [pc, #264]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a42      	ldr	r2, [pc, #264]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800157a:	6013      	str	r3, [r2, #0]

    ditanceCovered=((float)(countSum*10/20.0)*0.0754)/10.0;
 800157c:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffc3 	bl	8000514 <__aeabi_ui2d>
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001594:	f7ff f962 	bl	800085c <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fb0a 	bl	8000bb8 <__aeabi_d2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffd6 	bl	8000558 <__aeabi_f2d>
 80015ac:	a32e      	add	r3, pc, #184	; (adr r3, 8001668 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff f829 	bl	8000608 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b32      	ldr	r3, [pc, #200]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80015c4:	f7ff f94a 	bl	800085c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff faf2 	bl	8000bb8 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a2e      	ldr	r2, [pc, #184]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015d8:	6013      	str	r3, [r2, #0]

   //distance=(int)(ditanceCovered * 100);

  //  dis=sum_count*0.0754/20.0;

    j++;
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a25      	ldr	r2, [pc, #148]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015e2:	6013      	str	r3, [r2, #0]
    if(j>20){
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b14      	cmp	r3, #20
 80015ea:	dd02      	ble.n	80015f2 <HAL_TIM_PeriodElapsedCallback+0x9a>
    	j=0;
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
    }

   // A= (A*lambda) + (1-lambda)*counter;

    rps = (float)counter*10/20.0;
 80015f2:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001602:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001606:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800160a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001610:	edc3 7a00 	vstr	s15, [r3]
    counter = 0;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
    // speed = rps*0.0942;
    speed = rps*0.075398;
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff9a 	bl	8000558 <__aeabi_f2d>
 8001624:	a312      	add	r3, pc, #72	; (adr r3, 8001670 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7fe ffed 	bl	8000608 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fabf 	bl	8000bb8 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	4a16      	ldr	r2, [pc, #88]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800163e:	6013      	str	r3, [r2, #0]
    // speed = rps*0.084823;
    distance=speed *1000;
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800169c <HAL_TIM_PeriodElapsedCallback+0x144>
 800164a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001652:	ee17 2a90 	vmov	r2, s15
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001658:	601a      	str	r2, [r3, #0]


}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	f3af 8000 	nop.w
 8001668:	161e4f76 	.word	0x161e4f76
 800166c:	3fb34d6a 	.word	0x3fb34d6a
 8001670:	882f0e0b 	.word	0x882f0e0b
 8001674:	3fb34d48 	.word	0x3fb34d48
 8001678:	200003b8 	.word	0x200003b8
 800167c:	20000314 	.word	0x20000314
 8001680:	20000360 	.word	0x20000360
 8001684:	200003c4 	.word	0x200003c4
 8001688:	40340000 	.word	0x40340000
 800168c:	40240000 	.word	0x40240000
 8001690:	200003c0 	.word	0x200003c0
 8001694:	20000320 	.word	0x20000320
 8001698:	20000328 	.word	0x20000328
 800169c:	447a0000 	.word	0x447a0000
 80016a0:	200003bc 	.word	0x200003bc

080016a4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

	Rx = 1;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_UART_RxCpltCallback+0xcc>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart4, Receive, 10);
 80016b2:	220a      	movs	r2, #10
 80016b4:	492f      	ldr	r1, [pc, #188]	; (8001774 <HAL_UART_RxCpltCallback+0xd0>)
 80016b6:	4830      	ldr	r0, [pc, #192]	; (8001778 <HAL_UART_RxCpltCallback+0xd4>)
 80016b8:	f003 fbb8 	bl	8004e2c <HAL_UART_Receive_IT>

         for(int k=0; k<3; k++)
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e00b      	b.n	80016da <HAL_UART_RxCpltCallback+0x36>
         {
        	 Pod[k] = Receive[k];
 80016c2:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <HAL_UART_RxCpltCallback+0xd0>)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	4413      	add	r3, r2
 80016c8:	7819      	ldrb	r1, [r3, #0]
 80016ca:	4a2c      	ldr	r2, [pc, #176]	; (800177c <HAL_UART_RxCpltCallback+0xd8>)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	460a      	mov	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
         for(int k=0; k<3; k++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	ddf0      	ble.n	80016c2 <HAL_UART_RxCpltCallback+0x1e>
         }
         POD_ID = atoi(Pod);
 80016e0:	4826      	ldr	r0, [pc, #152]	; (800177c <HAL_UART_RxCpltCallback+0xd8>)
 80016e2:	f004 fe08 	bl	80062f6 <atoi>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a25      	ldr	r2, [pc, #148]	; (8001780 <HAL_UART_RxCpltCallback+0xdc>)
 80016ea:	6013      	str	r3, [r2, #0]
	     for(int i=3;i<7;i++)
 80016ec:	2303      	movs	r3, #3
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	e00a      	b.n	8001708 <HAL_UART_RxCpltCallback+0x64>
		 {
		   sed[i-3] = Receive[i+1];
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	491e      	ldr	r1, [pc, #120]	; (8001774 <HAL_UART_RxCpltCallback+0xd0>)
 80016fc:	5c89      	ldrb	r1, [r1, r2]
 80016fe:	4a21      	ldr	r2, [pc, #132]	; (8001784 <HAL_UART_RxCpltCallback+0xe0>)
 8001700:	54d1      	strb	r1, [r2, r3]
	     for(int i=3;i<7;i++)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	3301      	adds	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b06      	cmp	r3, #6
 800170c:	ddf1      	ble.n	80016f2 <HAL_UART_RxCpltCallback+0x4e>

		  }
		  spd = atoi(sed);
 800170e:	481d      	ldr	r0, [pc, #116]	; (8001784 <HAL_UART_RxCpltCallback+0xe0>)
 8001710:	f004 fdf1 	bl	80062f6 <atoi>
 8001714:	4603      	mov	r3, r0
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <HAL_UART_RxCpltCallback+0xe4>)
 8001718:	6013      	str	r3, [r2, #0]
		  for(int j=7;j<9;j++)
 800171a:	2307      	movs	r3, #7
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e00a      	b.n	8001736 <HAL_UART_RxCpltCallback+0x92>
		  {
		     Time[j-7] = Receive[j+1];
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3b07      	subs	r3, #7
 8001728:	4912      	ldr	r1, [pc, #72]	; (8001774 <HAL_UART_RxCpltCallback+0xd0>)
 800172a:	5c89      	ldrb	r1, [r1, r2]
 800172c:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_UART_RxCpltCallback+0xe8>)
 800172e:	54d1      	strb	r1, [r2, r3]
		  for(int j=7;j<9;j++)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b08      	cmp	r3, #8
 800173a:	ddf1      	ble.n	8001720 <HAL_UART_RxCpltCallback+0x7c>
		  }
		   FinalTime = atoi(Time);
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <HAL_UART_RxCpltCallback+0xe8>)
 800173e:	f004 fdda 	bl	80062f6 <atoi>
 8001742:	4603      	mov	r3, r0
 8001744:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_UART_RxCpltCallback+0xec>)
 8001746:	6013      	str	r3, [r2, #0]
		   FinalTime*=1000;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_UART_RxCpltCallback+0xec>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_UART_RxCpltCallback+0xec>)
 8001756:	6013      	str	r3, [r2, #0]
		   MotorTimeFed = LocalTime;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_UART_RxCpltCallback+0xf0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_UART_RxCpltCallback+0xf4>)
 800175e:	6013      	str	r3, [r2, #0]
		   MotorTimeBack = LocalTime;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_UART_RxCpltCallback+0xf0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_UART_RxCpltCallback+0xf8>)
 8001766:	6013      	str	r3, [r2, #0]
	 }

    }*/
//memset(Receive,'\0',7);

}
 8001768:	bf00      	nop
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000358 	.word	0x20000358
 8001774:	2000032c 	.word	0x2000032c
 8001778:	20000290 	.word	0x20000290
 800177c:	20000348 	.word	0x20000348
 8001780:	20000324 	.word	0x20000324
 8001784:	2000033c 	.word	0x2000033c
 8001788:	20000338 	.word	0x20000338
 800178c:	20000344 	.word	0x20000344
 8001790:	20000340 	.word	0x20000340
 8001794:	200003c8 	.word	0x200003c8
 8001798:	2000034c 	.word	0x2000034c
 800179c:	20000350 	.word	0x20000350

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <Error_Handler+0x8>
	...

080017ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_MspInit+0x44>)
 80017b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_MspInit+0x44>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6613      	str	r3, [r2, #96]	; 0x60
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_MspInit+0x44>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_MspInit+0x44>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x44>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x44>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_TIM_Base_MspInit+0x78>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d114      	bne.n	8001830 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_TIM_Base_MspInit+0x7c>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_TIM_Base_MspInit+0x7c>)
 800180c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001810:	6613      	str	r3, [r2, #96]	; 0x60
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_TIM_Base_MspInit+0x7c>)
 8001814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2019      	movs	r0, #25
 8001824:	f000 fb6d 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001828:	2019      	movs	r0, #25
 800182a:	f000 fb86 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800182e:	e018      	b.n	8001862 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001838:	d113      	bne.n	8001862 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_TIM_Base_MspInit+0x7c>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <HAL_TIM_Base_MspInit+0x7c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6593      	str	r3, [r2, #88]	; 0x58
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_TIM_Base_MspInit+0x7c>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	201c      	movs	r0, #28
 8001858:	f000 fb53 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800185c:	201c      	movs	r0, #28
 800185e:	f000 fb6c 	bl	8001f3a <HAL_NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40012c00 	.word	0x40012c00
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_TIM_MspPostInit+0x68>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d11d      	bne.n	80018d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_TIM_MspPostInit+0x6c>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <HAL_TIM_MspPostInit+0x6c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_TIM_MspPostInit+0x6c>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4619      	mov	r1, r3
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ce:	f000 fbcd 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40012c00 	.word	0x40012c00
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b0a4      	sub	sp, #144	; 0x90
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2268      	movs	r2, #104	; 0x68
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f004 fd25 	bl	8006354 <memset>
  if(huart->Instance==UART4)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a25      	ldr	r2, [pc, #148]	; (80019a4 <HAL_UART_MspInit+0xc0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d142      	bne.n	800199a <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001914:	2308      	movs	r3, #8
 8001916:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001918:	2300      	movs	r3, #0
 800191a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4618      	mov	r0, r3
 8001922:	f001 fbe9 	bl	80030f8 <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800192c:	f7ff ff38 	bl	80017a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_UART_MspInit+0xc4>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <HAL_UART_MspInit+0xc4>)
 8001936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800193a:	6593      	str	r3, [r2, #88]	; 0x58
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_UART_MspInit+0xc4>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_UART_MspInit+0xc4>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_UART_MspInit+0xc4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_UART_MspInit+0xc4>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001960:	2303      	movs	r3, #3
 8001962:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001976:	2308      	movs	r3, #8
 8001978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f000 fb71 	bl	800206c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2034      	movs	r0, #52	; 0x34
 8001990:	f000 fab7 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001994:	2034      	movs	r0, #52	; 0x34
 8001996:	f000 fad0 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3790      	adds	r7, #144	; 0x90
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004c00 	.word	0x40004c00
 80019a8:	40021000 	.word	0x40021000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f000 f988 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  LocalTime++;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <SysTick_Handler+0x18>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a02      	ldr	r2, [pc, #8]	; (8001a0c <SysTick_Handler+0x18>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200003c8 	.word	0x200003c8

08001a10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a14:	2040      	movs	r0, #64	; 0x40
 8001a16:	f000 fcbb 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a1a:	2080      	movs	r0, #128	; 0x80
 8001a1c:	f000 fcb8 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a2a:	f002 f947 	bl	8003cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200001f8 	.word	0x200001f8

08001a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM2_IRQHandler+0x10>)
 8001a3e:	f002 f93d 	bl	8003cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000244 	.word	0x20000244

08001a4c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <UART4_IRQHandler+0x10>)
 8001a52:	f003 fa41 	bl	8004ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000290 	.word	0x20000290

08001a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_kill>:

int _kill(int pid, int sig)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7a:	f004 fc41 	bl	8006300 <__errno>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2216      	movs	r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
  return -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_exit>:

void _exit (int status)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe7 	bl	8001a70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa2:	e7fe      	b.n	8001aa2 <_exit+0x12>

08001aa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e00a      	b.n	8001acc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab6:	f3af 8000 	nop.w
 8001aba:	4601      	mov	r1, r0
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60ba      	str	r2, [r7, #8]
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dbf0      	blt.n	8001ab6 <_read+0x12>
  }

  return len;
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e009      	b.n	8001b04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fa2f 	bl	8000f5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbf1      	blt.n	8001af0 <_write+0x12>
  }
  return len;
 8001b0c:	687b      	ldr	r3, [r7, #4]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_close>:

int _close(int file)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <_isatty>:

int _isatty(int file)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f004 fba6 	bl	8006300 <__errno>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20028000 	.word	0x20028000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	200003cc 	.word	0x200003cc
 8001be8:	200003e8 	.word	0x200003e8

08001bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <SystemInit+0x20>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <SystemInit+0x20>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c14:	f7ff ffea 	bl	8001bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	; (8001c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <LoopForever+0xe>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	; (8001c5c <LoopForever+0x16>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f004 fb65 	bl	800630c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c42:	f7ff f99d 	bl	8000f80 <main>

08001c46 <LoopForever>:

LoopForever:
    b LoopForever
 8001c46:	e7fe      	b.n	8001c46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c48:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c54:	080097a4 	.word	0x080097a4
  ldr r2, =_sbss
 8001c58:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c5c:	200003e4 	.word	0x200003e4

08001c60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_IRQHandler>

08001c62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 f93d 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c72:	200f      	movs	r0, #15
 8001c74:	f000 f80e 	bl	8001c94 <HAL_InitTick>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	71fb      	strb	r3, [r7, #7]
 8001c82:	e001      	b.n	8001c88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c84:	f7ff fd92 	bl	80017ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c88:	79fb      	ldrb	r3, [r7, #7]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_InitTick+0x6c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d023      	beq.n	8001cf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_InitTick+0x70>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_InitTick+0x6c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f949 	bl	8001f56 <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10f      	bne.n	8001cea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d809      	bhi.n	8001ce4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f000 f913 	bl	8001f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_InitTick+0x74>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e007      	b.n	8001cf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e004      	b.n	8001cf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	e001      	b.n	8001cf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	200003d0 	.word	0x200003d0

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	200003d0 	.word	0x200003d0

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff29 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff3e 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff31 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b085      	sub	sp, #20
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d008      	beq.n	8001f98 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e022      	b.n	8001fde <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 020e 	bic.w	r2, r2, #14
 8001fa6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f003 021c 	and.w	r2, r3, #28
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d005      	beq.n	800200e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2204      	movs	r2, #4
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e029      	b.n	8002062 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 020e 	bic.w	r2, r2, #14
 800201c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f003 021c 	and.w	r2, r3, #28
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
    }
  }
  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207a:	e154      	b.n	8002326 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8146 	beq.w	8002320 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_GPIO_Init+0x40>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d130      	bne.n	800210e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e2:	2201      	movs	r2, #1
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	f003 0201 	and.w	r2, r3, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b03      	cmp	r3, #3
 8002118:	d017      	beq.n	800214a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d123      	bne.n	800219e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	6939      	ldr	r1, [r7, #16]
 800219a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0203 	and.w	r2, r3, #3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80a0 	beq.w	8002320 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e0:	4b58      	ldr	r3, [pc, #352]	; (8002344 <HAL_GPIO_Init+0x2d8>)
 80021e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e4:	4a57      	ldr	r2, [pc, #348]	; (8002344 <HAL_GPIO_Init+0x2d8>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6613      	str	r3, [r2, #96]	; 0x60
 80021ec:	4b55      	ldr	r3, [pc, #340]	; (8002344 <HAL_GPIO_Init+0x2d8>)
 80021ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021f8:	4a53      	ldr	r2, [pc, #332]	; (8002348 <HAL_GPIO_Init+0x2dc>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002222:	d019      	beq.n	8002258 <HAL_GPIO_Init+0x1ec>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a49      	ldr	r2, [pc, #292]	; (800234c <HAL_GPIO_Init+0x2e0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_GPIO_Init+0x1e8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_GPIO_Init+0x2e4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00d      	beq.n	8002250 <HAL_GPIO_Init+0x1e4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a47      	ldr	r2, [pc, #284]	; (8002354 <HAL_GPIO_Init+0x2e8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <HAL_GPIO_Init+0x1e0>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a46      	ldr	r2, [pc, #280]	; (8002358 <HAL_GPIO_Init+0x2ec>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_GPIO_Init+0x1dc>
 8002244:	2304      	movs	r3, #4
 8002246:	e008      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002248:	2307      	movs	r3, #7
 800224a:	e006      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 800224c:	2303      	movs	r3, #3
 800224e:	e004      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002250:	2302      	movs	r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002258:	2300      	movs	r3, #0
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	f002 0203 	and.w	r2, r2, #3
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	4093      	lsls	r3, r2
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800226a:	4937      	ldr	r1, [pc, #220]	; (8002348 <HAL_GPIO_Init+0x2dc>)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002278:	4b38      	ldr	r3, [pc, #224]	; (800235c <HAL_GPIO_Init+0x2f0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <HAL_GPIO_Init+0x2f0>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022a2:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022c6:	4a25      	ldr	r2, [pc, #148]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022f0:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_GPIO_Init+0x2f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800231a:	4a10      	ldr	r2, [pc, #64]	; (800235c <HAL_GPIO_Init+0x2f0>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3301      	adds	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	f47f aea3 	bne.w	800207c <HAL_GPIO_Init+0x10>
  }
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	48000400 	.word	0x48000400
 8002350:	48000800 	.word	0x48000800
 8002354:	48000c00 	.word	0x48000c00
 8002358:	48001000 	.word	0x48001000
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff f8b8 	bl	8001524 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40007000 	.word	0x40007000

080023dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ea:	d130      	bne.n	800244e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f8:	d038      	beq.n	800246c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002402:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002408:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2232      	movs	r2, #50	; 0x32
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	3301      	adds	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002420:	e002      	b.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3b01      	subs	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002434:	d102      	bne.n	800243c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f2      	bne.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d110      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e00f      	b.n	800246e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245a:	d007      	beq.n	800246c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002464:	4a05      	ldr	r2, [pc, #20]	; (800247c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40007000 	.word	0x40007000
 8002480:	20000000 	.word	0x20000000
 8002484:	431bde83 	.word	0x431bde83

08002488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	f000 bc02 	b.w	8002ca0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249c:	4b96      	ldr	r3, [pc, #600]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a6:	4b94      	ldr	r3, [pc, #592]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80e4 	beq.w	8002686 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_RCC_OscConfig+0x4c>
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	f040 808b 	bne.w	80025e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 8087 	bne.w	80025e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024d4:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_OscConfig+0x64>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e3d9      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d004      	beq.n	8002506 <HAL_RCC_OscConfig+0x7e>
 80024fc:	4b7e      	ldr	r3, [pc, #504]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002504:	e005      	b.n	8002512 <HAL_RCC_OscConfig+0x8a>
 8002506:	4b7c      	ldr	r3, [pc, #496]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002512:	4293      	cmp	r3, r2
 8002514:	d223      	bcs.n	800255e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fd8c 	bl	8003038 <RCC_SetFlashLatencyFromMSIRange>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e3ba      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800252a:	4b73      	ldr	r3, [pc, #460]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a72      	ldr	r2, [pc, #456]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	496d      	ldr	r1, [pc, #436]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002548:	4b6b      	ldr	r3, [pc, #428]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	4968      	ldr	r1, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
 800255c:	e025      	b.n	80025aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255e:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002564:	f043 0308 	orr.w	r3, r3, #8
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4960      	ldr	r1, [pc, #384]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	495b      	ldr	r1, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fd4c 	bl	8003038 <RCC_SetFlashLatencyFromMSIRange>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e37a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025aa:	f000 fc81 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 80025ae:	4602      	mov	r2, r0
 80025b0:	4b51      	ldr	r3, [pc, #324]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4950      	ldr	r1, [pc, #320]	; (80026fc <HAL_RCC_OscConfig+0x274>)
 80025bc:	5ccb      	ldrb	r3, [r1, r3]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	4a4e      	ldr	r2, [pc, #312]	; (8002700 <HAL_RCC_OscConfig+0x278>)
 80025c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025ca:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_RCC_OscConfig+0x27c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fb60 	bl	8001c94 <HAL_InitTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d052      	beq.n	8002684 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	e35e      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d032      	beq.n	8002650 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a42      	ldr	r2, [pc, #264]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025f6:	f7ff fb9d 	bl	8001d34 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025fe:	f7ff fb99 	bl	8001d34 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e347      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002610:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800261c:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a35      	ldr	r2, [pc, #212]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4930      	ldr	r1, [pc, #192]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263a:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	492b      	ldr	r1, [pc, #172]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
 800264e:	e01a      	b.n	8002686 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800265c:	f7ff fb6a 	bl	8001d34 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002664:	f7ff fb66 	bl	8001d34 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e314      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x1dc>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002684:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d073      	beq.n	800277a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_OscConfig+0x21c>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d10e      	bne.n	80026bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d10b      	bne.n	80026bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d063      	beq.n	8002778 <HAL_RCC_OscConfig+0x2f0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d15f      	bne.n	8002778 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e2f1      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x24c>
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e025      	b.n	8002720 <HAL_RCC_OscConfig+0x298>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026dc:	d114      	bne.n	8002708 <HAL_RCC_OscConfig+0x280>
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a02      	ldr	r2, [pc, #8]	; (80026f8 <HAL_RCC_OscConfig+0x270>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e013      	b.n	8002720 <HAL_RCC_OscConfig+0x298>
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08009370 	.word	0x08009370
 8002700:	20000000 	.word	0x20000000
 8002704:	20000004 	.word	0x20000004
 8002708:	4ba0      	ldr	r3, [pc, #640]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a9f      	ldr	r2, [pc, #636]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b9d      	ldr	r3, [pc, #628]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a9c      	ldr	r2, [pc, #624]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7ff fb04 	bl	8001d34 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff fb00 	bl	8001d34 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e2ae      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002742:	4b92      	ldr	r3, [pc, #584]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x2a8>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7ff faf0 	bl	8001d34 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7ff faec 	bl	8001d34 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e29a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276a:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x2d0>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d060      	beq.n	8002848 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d005      	beq.n	8002798 <HAL_RCC_OscConfig+0x310>
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d119      	bne.n	80027c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d116      	bne.n	80027c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002798:	4b7c      	ldr	r3, [pc, #496]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_OscConfig+0x328>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e277      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	4973      	ldr	r1, [pc, #460]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c4:	e040      	b.n	8002848 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d023      	beq.n	8002816 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ce:	4b6f      	ldr	r3, [pc, #444]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a6e      	ldr	r2, [pc, #440]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7ff faab 	bl	8001d34 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e2:	f7ff faa7 	bl	8001d34 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e255      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f4:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b62      	ldr	r3, [pc, #392]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	495f      	ldr	r1, [pc, #380]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
 8002814:	e018      	b.n	8002848 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002816:	4b5d      	ldr	r3, [pc, #372]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5c      	ldr	r2, [pc, #368]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800281c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7ff fa87 	bl	8001d34 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282a:	f7ff fa83 	bl	8001d34 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e231      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d03c      	beq.n	80028ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01c      	beq.n	8002896 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285c:	4b4b      	ldr	r3, [pc, #300]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800285e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7ff fa62 	bl	8001d34 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002874:	f7ff fa5e 	bl	8001d34 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e20c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ef      	beq.n	8002874 <HAL_RCC_OscConfig+0x3ec>
 8002894:	e01b      	b.n	80028ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289c:	4a3b      	ldr	r2, [pc, #236]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a6:	f7ff fa45 	bl	8001d34 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ae:	f7ff fa41 	bl	8001d34 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1ef      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c0:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ef      	bne.n	80028ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80a6 	beq.w	8002a28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	4a26      	ldr	r2, [pc, #152]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	; 0x58
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_RCC_OscConfig+0x504>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002904:	2301      	movs	r3, #1
 8002906:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002908:	4b21      	ldr	r3, [pc, #132]	; (8002990 <HAL_RCC_OscConfig+0x508>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d118      	bne.n	8002946 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_RCC_OscConfig+0x508>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <HAL_RCC_OscConfig+0x508>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002920:	f7ff fa08 	bl	8001d34 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002928:	f7ff fa04 	bl	8001d34 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1b2      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_RCC_OscConfig+0x508>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d108      	bne.n	8002960 <HAL_RCC_OscConfig+0x4d8>
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002954:	4a0d      	ldr	r2, [pc, #52]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800295e:	e029      	b.n	80029b4 <HAL_RCC_OscConfig+0x52c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d115      	bne.n	8002994 <HAL_RCC_OscConfig+0x50c>
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	4a07      	ldr	r2, [pc, #28]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_RCC_OscConfig+0x504>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_RCC_OscConfig+0x504>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002988:	e014      	b.n	80029b4 <HAL_RCC_OscConfig+0x52c>
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	4b9a      	ldr	r3, [pc, #616]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	4a99      	ldr	r2, [pc, #612]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029a4:	4b96      	ldr	r3, [pc, #600]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a95      	ldr	r2, [pc, #596]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d016      	beq.n	80029ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7ff f9ba 	bl	8001d34 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7ff f9b6 	bl	8001d34 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e162      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ed      	beq.n	80029c4 <HAL_RCC_OscConfig+0x53c>
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7ff f9a3 	bl	8001d34 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7ff f99f 	bl	8001d34 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e14b      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a08:	4b7d      	ldr	r3, [pc, #500]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1ed      	bne.n	80029f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1c:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	4a77      	ldr	r2, [pc, #476]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03c      	beq.n	8002aae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a3c:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a42:	4a6f      	ldr	r2, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7ff f972 	bl	8001d34 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a54:	f7ff f96e 	bl	8001d34 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e11c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a66:	4b66      	ldr	r3, [pc, #408]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ef      	beq.n	8002a54 <HAL_RCC_OscConfig+0x5cc>
 8002a74:	e01b      	b.n	8002aae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a76:	4b62      	ldr	r3, [pc, #392]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a7c:	4a60      	ldr	r2, [pc, #384]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7ff f955 	bl	8001d34 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8e:	f7ff f951 	bl	8001d34 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0ff      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa0:	4b57      	ldr	r3, [pc, #348]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ef      	bne.n	8002a8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80f3 	beq.w	8002c9e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	f040 80c9 	bne.w	8002c54 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ac2:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f003 0203 	and.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d12c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d123      	bne.n	8002b30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d11b      	bne.n	8002b30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d113      	bne.n	8002b30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d06b      	beq.n	8002c08 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d062      	beq.n	8002bfc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b36:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e0ac      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b46:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a2d      	ldr	r2, [pc, #180]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b52:	f7ff f8ef 	bl	8001d34 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7ff f8eb 	bl	8001d34 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e099      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b78:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCC_OscConfig+0x77c>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b92:	0212      	lsls	r2, r2, #8
 8002b94:	4311      	orrs	r1, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b9a:	0852      	lsrs	r2, r2, #1
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0552      	lsls	r2, r2, #21
 8002ba0:	4311      	orrs	r1, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ba6:	0852      	lsrs	r2, r2, #1
 8002ba8:	3a01      	subs	r2, #1
 8002baa:	0652      	lsls	r2, r2, #25
 8002bac:	4311      	orrs	r1, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bb2:	06d2      	lsls	r2, r2, #27
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	4912      	ldr	r1, [pc, #72]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc8:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd4:	f7ff f8ae 	bl	8001d34 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7ff f8aa 	bl	8001d34 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e058      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_RCC_OscConfig+0x778>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bfa:	e050      	b.n	8002c9e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e04f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
 8002c00:	40021000 	.word	0x40021000
 8002c04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d144      	bne.n	8002c9e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c14:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a23      	ldr	r2, [pc, #140]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a20      	ldr	r2, [pc, #128]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c2c:	f7ff f882 	bl	8001d34 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7ff f87e 	bl	8001d34 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e02c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x7ac>
 8002c52:	e024      	b.n	8002c9e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d01f      	beq.n	8002c9a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7ff f865 	bl	8001d34 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7ff f861 	bl	8001d34 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e00f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	4905      	ldr	r1, [pc, #20]	; (8002ca8 <HAL_RCC_OscConfig+0x820>)
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_OscConfig+0x824>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
 8002c98:	e001      	b.n	8002c9e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3720      	adds	r7, #32
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	feeefffc 	.word	0xfeeefffc

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0e7      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b75      	ldr	r3, [pc, #468]	; (8002e9c <HAL_RCC_ClockConfig+0x1ec>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d910      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b72      	ldr	r3, [pc, #456]	; (8002e9c <HAL_RCC_ClockConfig+0x1ec>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0207 	bic.w	r2, r3, #7
 8002cda:	4970      	ldr	r1, [pc, #448]	; (8002e9c <HAL_RCC_ClockConfig+0x1ec>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b6e      	ldr	r3, [pc, #440]	; (8002e9c <HAL_RCC_ClockConfig+0x1ec>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0cf      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d908      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4960      	ldr	r1, [pc, #384]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d04c      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	4b5a      	ldr	r3, [pc, #360]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d121      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0a6      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d4e:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d115      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e09a      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d66:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e08e      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e086      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4943      	ldr	r1, [pc, #268]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d98:	f7fe ffcc 	bl	8001d34 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7fe ffc8 	bl	8001d34 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e06e      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d208      	bcs.n	8002df6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b2e      	ldr	r3, [pc, #184]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	492b      	ldr	r1, [pc, #172]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_RCC_ClockConfig+0x1ec>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d210      	bcs.n	8002e26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HAL_RCC_ClockConfig+0x1ec>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 0207 	bic.w	r2, r3, #7
 8002e0c:	4923      	ldr	r1, [pc, #140]	; (8002e9c <HAL_RCC_ClockConfig+0x1ec>)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e14:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_RCC_ClockConfig+0x1ec>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e036      	b.n	8002e94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4918      	ldr	r1, [pc, #96]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d009      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4910      	ldr	r1, [pc, #64]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e64:	f000 f824 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	490b      	ldr	r1, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e80:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1f8>)
 8002e82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1fc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe ff03 	bl	8001c94 <HAL_InitTick>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e92:	7afb      	ldrb	r3, [r7, #11]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08009370 	.word	0x08009370
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ebe:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d121      	bne.n	8002f22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d11e      	bne.n	8002f22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ee4:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ef0:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e005      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f00:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f0c:	4a2b      	ldr	r2, [pc, #172]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10d      	bne.n	8002f38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d102      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	e004      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f34:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d134      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d003      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0xac>
 8002f54:	e005      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f56:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f58:	617b      	str	r3, [r7, #20]
      break;
 8002f5a:	e005      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f5e:	617b      	str	r3, [r7, #20]
      break;
 8002f60:	e002      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	617b      	str	r3, [r7, #20]
      break;
 8002f66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	3301      	adds	r3, #1
 8002f74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	fb03 f202 	mul.w	r2, r3, r2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	0e5b      	lsrs	r3, r3, #25
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fa8:	69bb      	ldr	r3, [r7, #24]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3724      	adds	r7, #36	; 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08009388 	.word	0x08009388
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	007a1200 	.word	0x007a1200

08002fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000000 	.word	0x20000000

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fe4:	f7ff fff0 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4904      	ldr	r1, [pc, #16]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	08009380 	.word	0x08009380

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003010:	f7ff ffda 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0adb      	lsrs	r3, r3, #11
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4904      	ldr	r1, [pc, #16]	; (8003034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	08009380 	.word	0x08009380

08003038 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003044:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003050:	f7ff f9b6 	bl	80023c0 <HAL_PWREx_GetVoltageRange>
 8003054:	6178      	str	r0, [r7, #20]
 8003056:	e014      	b.n	8003082 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003058:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003062:	6593      	str	r3, [r2, #88]	; 0x58
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003070:	f7ff f9a6 	bl	80023c0 <HAL_PWREx_GetVoltageRange>
 8003074:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003080:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003088:	d10b      	bne.n	80030a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b80      	cmp	r3, #128	; 0x80
 800308e:	d919      	bls.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2ba0      	cmp	r3, #160	; 0xa0
 8003094:	d902      	bls.n	800309c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003096:	2302      	movs	r3, #2
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	e013      	b.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800309c:	2301      	movs	r3, #1
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	e010      	b.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b80      	cmp	r3, #128	; 0x80
 80030a6:	d902      	bls.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030a8:	2303      	movs	r3, #3
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	e00a      	b.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b80      	cmp	r3, #128	; 0x80
 80030b2:	d102      	bne.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030b4:	2302      	movs	r3, #2
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e004      	b.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b70      	cmp	r3, #112	; 0x70
 80030be:	d101      	bne.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 0207 	bic.w	r2, r3, #7
 80030cc:	4909      	ldr	r1, [pc, #36]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030d4:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d001      	beq.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40022000 	.word	0x40022000

080030f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003100:	2300      	movs	r3, #0
 8003102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003104:	2300      	movs	r3, #0
 8003106:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003110:	2b00      	cmp	r3, #0
 8003112:	d031      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003118:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800311c:	d01a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800311e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003122:	d814      	bhi.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003128:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800312c:	d10f      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800312e:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800313a:	e00c      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fa44 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800314c:	e003      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	74fb      	strb	r3, [r7, #19]
      break;
 8003152:	e000      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10b      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800315c:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316a:	494e      	ldr	r1, [pc, #312]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003172:	e001      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 809e 	beq.w	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003186:	2300      	movs	r3, #0
 8003188:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800318a:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a0:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	4a3f      	ldr	r2, [pc, #252]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031aa:	6593      	str	r3, [r2, #88]	; 0x58
 80031ac:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b8:	2301      	movs	r3, #1
 80031ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a39      	ldr	r2, [pc, #228]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031c8:	f7fe fdb4 	bl	8001d34 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ce:	e009      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d0:	f7fe fdb0 	bl	8001d34 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d902      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	74fb      	strb	r3, [r7, #19]
        break;
 80031e2:	e005      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ef      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d15a      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031f6:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003200:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01e      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	429a      	cmp	r2, r3
 8003210:	d019      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800322e:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003234:	4a1b      	ldr	r2, [pc, #108]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800323e:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d016      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fd70 	bl	8001d34 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003256:	e00b      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fe fd6c 	bl	8001d34 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d902      	bls.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	74fb      	strb	r3, [r7, #19]
            break;
 800326e:	e006      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0ec      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003292:	4904      	ldr	r1, [pc, #16]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800329a:	e009      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b0:	7c7b      	ldrb	r3, [r7, #17]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b6:	4b9e      	ldr	r3, [pc, #632]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	4a9d      	ldr	r2, [pc, #628]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ce:	4b98      	ldr	r3, [pc, #608]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f023 0203 	bic.w	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	4994      	ldr	r1, [pc, #592]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032f0:	4b8f      	ldr	r3, [pc, #572]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 020c 	bic.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	498c      	ldr	r1, [pc, #560]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003312:	4b87      	ldr	r3, [pc, #540]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	4983      	ldr	r1, [pc, #524]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003334:	4b7e      	ldr	r3, [pc, #504]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	497b      	ldr	r1, [pc, #492]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003356:	4b76      	ldr	r3, [pc, #472]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	4972      	ldr	r1, [pc, #456]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003378:	4b6d      	ldr	r3, [pc, #436]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	496a      	ldr	r1, [pc, #424]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800339a:	4b65      	ldr	r3, [pc, #404]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a8:	4961      	ldr	r1, [pc, #388]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033bc:	4b5c      	ldr	r3, [pc, #368]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	4959      	ldr	r1, [pc, #356]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033de:	4b54      	ldr	r3, [pc, #336]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	4950      	ldr	r1, [pc, #320]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003400:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	4948      	ldr	r1, [pc, #288]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003422:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003424:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003428:	f023 0203 	bic.w	r2, r3, #3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	493f      	ldr	r1, [pc, #252]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d028      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003444:	4b3a      	ldr	r3, [pc, #232]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003452:	4937      	ldr	r1, [pc, #220]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003462:	d106      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a31      	ldr	r2, [pc, #196]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800346a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346e:	60d3      	str	r3, [r2, #12]
 8003470:	e011      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800347a:	d10c      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	2101      	movs	r1, #1
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f8a4 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d028      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034a2:	4b23      	ldr	r3, [pc, #140]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	491f      	ldr	r1, [pc, #124]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c0:	d106      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c2:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034cc:	60d3      	str	r3, [r2, #12]
 80034ce:	e011      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	2101      	movs	r1, #1
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f875 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02b      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	4908      	ldr	r1, [pc, #32]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351e:	d109      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4a02      	ldr	r2, [pc, #8]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352a:	60d3      	str	r3, [r2, #12]
 800352c:	e014      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f843 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01c      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	4916      	ldr	r1, [pc, #88]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003582:	d10c      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	2102      	movs	r1, #2
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f820 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	4904      	ldr	r1, [pc, #16]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000

080035d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035de:	4b74      	ldr	r3, [pc, #464]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ea:	4b71      	ldr	r3, [pc, #452]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0203 	and.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10d      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
       ||
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003602:	4b6b      	ldr	r3, [pc, #428]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
       ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d047      	beq.n	80036a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e044      	b.n	80036a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d018      	beq.n	8003656 <RCCEx_PLLSAI1_Config+0x86>
 8003624:	2b03      	cmp	r3, #3
 8003626:	d825      	bhi.n	8003674 <RCCEx_PLLSAI1_Config+0xa4>
 8003628:	2b01      	cmp	r3, #1
 800362a:	d002      	beq.n	8003632 <RCCEx_PLLSAI1_Config+0x62>
 800362c:	2b02      	cmp	r3, #2
 800362e:	d009      	beq.n	8003644 <RCCEx_PLLSAI1_Config+0x74>
 8003630:	e020      	b.n	8003674 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003632:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11d      	bne.n	800367a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003642:	e01a      	b.n	800367a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003644:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d116      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003654:	e013      	b.n	800367e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003656:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003672:	e006      	b.n	8003682 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e004      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003682:	bf00      	nop
    }

    if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800368a:	4b49      	ldr	r3, [pc, #292]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	430b      	orrs	r3, r1
 80036a0:	4943      	ldr	r1, [pc, #268]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d17c      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036ac:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3f      	ldr	r2, [pc, #252]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fe fb3c 	bl	8001d34 <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036be:	e009      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c0:	f7fe fb38 	bl	8001d34 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	73fb      	strb	r3, [r7, #15]
        break;
 80036d2:	e005      	b.n	80036e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d4:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ef      	bne.n	80036c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d15f      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d110      	bne.n	800370e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ec:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80036f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	0211      	lsls	r1, r2, #8
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	06d2      	lsls	r2, r2, #27
 8003704:	430a      	orrs	r2, r1
 8003706:	492a      	ldr	r1, [pc, #168]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	610b      	str	r3, [r1, #16]
 800370c:	e027      	b.n	800375e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d112      	bne.n	800373a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003714:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800371c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6892      	ldr	r2, [r2, #8]
 8003724:	0211      	lsls	r1, r2, #8
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6912      	ldr	r2, [r2, #16]
 800372a:	0852      	lsrs	r2, r2, #1
 800372c:	3a01      	subs	r2, #1
 800372e:	0552      	lsls	r2, r2, #21
 8003730:	430a      	orrs	r2, r1
 8003732:	491f      	ldr	r1, [pc, #124]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003734:	4313      	orrs	r3, r2
 8003736:	610b      	str	r3, [r1, #16]
 8003738:	e011      	b.n	800375e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800373a:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003742:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6892      	ldr	r2, [r2, #8]
 800374a:	0211      	lsls	r1, r2, #8
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6952      	ldr	r2, [r2, #20]
 8003750:	0852      	lsrs	r2, r2, #1
 8003752:	3a01      	subs	r2, #1
 8003754:	0652      	lsls	r2, r2, #25
 8003756:	430a      	orrs	r2, r1
 8003758:	4915      	ldr	r1, [pc, #84]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003768:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fe fae3 	bl	8001d34 <HAL_GetTick>
 800376e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003770:	e009      	b.n	8003786 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003772:	f7fe fadf 	bl	8001d34 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d902      	bls.n	8003786 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	73fb      	strb	r3, [r7, #15]
          break;
 8003784:	e005      	b.n	8003792 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0ef      	beq.n	8003772 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e049      	b.n	800385a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fe f80a 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 fd88 	bl	8004308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e040      	b.n	80038fe <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1c      	ldr	r2, [pc, #112]	; (800390c <HAL_TIM_Base_Start_IT+0xa8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00e      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x58>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a6:	d009      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x58>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIM_Base_Start_IT+0xac>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x58>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_TIM_Base_Start_IT+0xb0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d115      	bne.n	80038e8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_TIM_Base_Start_IT+0xb4>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b06      	cmp	r3, #6
 80038cc:	d015      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x96>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d011      	beq.n	80038fa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	e008      	b.n	80038fa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e000      	b.n	80038fc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40000400 	.word	0x40000400
 8003914:	40014000 	.word	0x40014000
 8003918:	00010007 	.word	0x00010007

0800391c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e049      	b.n	80039c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f841 	bl	80039ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f000 fcd4 	bl	8004308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_TIM_PWM_Start+0x24>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e03c      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d109      	bne.n	8003a1e <HAL_TIM_PWM_Start+0x3e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	e02f      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d109      	bne.n	8003a38 <HAL_TIM_PWM_Start+0x58>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e022      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d109      	bne.n	8003a52 <HAL_TIM_PWM_Start+0x72>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e015      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d109      	bne.n	8003a6c <HAL_TIM_PWM_Start+0x8c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e008      	b.n	8003a7e <HAL_TIM_PWM_Start+0x9e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e083      	b.n	8003b8e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_PWM_Start+0xb6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a94:	e023      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0xc6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa4:	e01b      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0xd6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab4:	e013      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b0c      	cmp	r3, #12
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0xe6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac4:	e00b      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d104      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0xf6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad4:	e003      	b.n	8003ade <HAL_TIM_PWM_Start+0xfe>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	6839      	ldr	r1, [r7, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 ff94 	bl	8004a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a29      	ldr	r2, [pc, #164]	; (8003b98 <HAL_TIM_PWM_Start+0x1b8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_TIM_PWM_Start+0x12a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a28      	ldr	r2, [pc, #160]	; (8003b9c <HAL_TIM_PWM_Start+0x1bc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_TIM_PWM_Start+0x12a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a26      	ldr	r2, [pc, #152]	; (8003ba0 <HAL_TIM_PWM_Start+0x1c0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_TIM_PWM_Start+0x12e>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_TIM_PWM_Start+0x130>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_TIM_PWM_Start+0x1b8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_TIM_PWM_Start+0x16c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b36:	d009      	beq.n	8003b4c <HAL_TIM_PWM_Start+0x16c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <HAL_TIM_PWM_Start+0x1c4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_TIM_PWM_Start+0x16c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <HAL_TIM_PWM_Start+0x1bc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d115      	bne.n	8003b78 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_TIM_PWM_Start+0x1c8>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d015      	beq.n	8003b8a <HAL_TIM_PWM_Start+0x1aa>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b64:	d011      	beq.n	8003b8a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b76:	e008      	b.n	8003b8a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e000      	b.n	8003b8c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	00010007 	.word	0x00010007

08003bac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 ff28 	bl	8004a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a39      	ldr	r2, [pc, #228]	; (8003cb0 <HAL_TIM_PWM_Stop+0x104>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_TIM_PWM_Stop+0x36>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a38      	ldr	r2, [pc, #224]	; (8003cb4 <HAL_TIM_PWM_Stop+0x108>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_TIM_PWM_Stop+0x36>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a36      	ldr	r2, [pc, #216]	; (8003cb8 <HAL_TIM_PWM_Stop+0x10c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_Stop+0x3a>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_TIM_PWM_Stop+0x3c>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d017      	beq.n	8003c1c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a1a      	ldr	r2, [r3, #32]
 8003bf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10f      	bne.n	8003c1c <HAL_TIM_PWM_Stop+0x70>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6a1a      	ldr	r2, [r3, #32]
 8003c02:	f240 4344 	movw	r3, #1092	; 0x444
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_PWM_Stop+0x70>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a1a      	ldr	r2, [r3, #32]
 8003c22:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10f      	bne.n	8003c4c <HAL_TIM_PWM_Stop+0xa0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a1a      	ldr	r2, [r3, #32]
 8003c32:	f240 4344 	movw	r3, #1092	; 0x444
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <HAL_TIM_PWM_Stop+0xa0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d104      	bne.n	8003c5c <HAL_TIM_PWM_Stop+0xb0>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5a:	e023      	b.n	8003ca4 <HAL_TIM_PWM_Stop+0xf8>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d104      	bne.n	8003c6c <HAL_TIM_PWM_Stop+0xc0>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6a:	e01b      	b.n	8003ca4 <HAL_TIM_PWM_Stop+0xf8>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d104      	bne.n	8003c7c <HAL_TIM_PWM_Stop+0xd0>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7a:	e013      	b.n	8003ca4 <HAL_TIM_PWM_Stop+0xf8>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d104      	bne.n	8003c8c <HAL_TIM_PWM_Stop+0xe0>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c8a:	e00b      	b.n	8003ca4 <HAL_TIM_PWM_Stop+0xf8>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b10      	cmp	r3, #16
 8003c90:	d104      	bne.n	8003c9c <HAL_TIM_PWM_Stop+0xf0>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9a:	e003      	b.n	8003ca4 <HAL_TIM_PWM_Stop+0xf8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400

08003cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d122      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d11b      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0202 	mvn.w	r2, #2
 8003ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fae3 	bl	80042ca <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fad5 	bl	80042b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fae6 	bl	80042de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d122      	bne.n	8003d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d11b      	bne.n	8003d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0204 	mvn.w	r2, #4
 8003d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fab9 	bl	80042ca <HAL_TIM_IC_CaptureCallback>
 8003d58:	e005      	b.n	8003d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 faab 	bl	80042b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fabc 	bl	80042de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d122      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0208 	mvn.w	r2, #8
 8003d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa8f 	bl	80042ca <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa81 	bl	80042b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fa92 	bl	80042de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d122      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d11b      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0210 	mvn.w	r2, #16
 8003de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2208      	movs	r2, #8
 8003dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa65 	bl	80042ca <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa57 	bl	80042b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa68 	bl	80042de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0201 	mvn.w	r2, #1
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fd fb8c 	bl	8001558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d10e      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b80      	cmp	r3, #128	; 0x80
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 feea 	bl	8004c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7a:	d10e      	bne.n	8003e9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b80      	cmp	r3, #128	; 0x80
 8003e88:	d107      	bne.n	8003e9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fedd 	bl	8004c54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d107      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fa16 	bl	80042f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d10e      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d107      	bne.n	8003ef2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f06f 0220 	mvn.w	r2, #32
 8003eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fe9d 	bl	8004c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e0ff      	b.n	800411a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b14      	cmp	r3, #20
 8003f26:	f200 80f0 	bhi.w	800410a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f85 	.word	0x08003f85
 8003f34:	0800410b 	.word	0x0800410b
 8003f38:	0800410b 	.word	0x0800410b
 8003f3c:	0800410b 	.word	0x0800410b
 8003f40:	08003fc5 	.word	0x08003fc5
 8003f44:	0800410b 	.word	0x0800410b
 8003f48:	0800410b 	.word	0x0800410b
 8003f4c:	0800410b 	.word	0x0800410b
 8003f50:	08004007 	.word	0x08004007
 8003f54:	0800410b 	.word	0x0800410b
 8003f58:	0800410b 	.word	0x0800410b
 8003f5c:	0800410b 	.word	0x0800410b
 8003f60:	08004047 	.word	0x08004047
 8003f64:	0800410b 	.word	0x0800410b
 8003f68:	0800410b 	.word	0x0800410b
 8003f6c:	0800410b 	.word	0x0800410b
 8003f70:	08004089 	.word	0x08004089
 8003f74:	0800410b 	.word	0x0800410b
 8003f78:	0800410b 	.word	0x0800410b
 8003f7c:	0800410b 	.word	0x0800410b
 8003f80:	080040c9 	.word	0x080040c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fa2a 	bl	80043e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0208 	orr.w	r2, r2, #8
 8003f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6999      	ldr	r1, [r3, #24]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	619a      	str	r2, [r3, #24]
      break;
 8003fc2:	e0a5      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fa86 	bl	80044dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6999      	ldr	r1, [r3, #24]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	021a      	lsls	r2, r3, #8
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	619a      	str	r2, [r3, #24]
      break;
 8004004:	e084      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fadf 	bl	80045d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0208 	orr.w	r2, r2, #8
 8004020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0204 	bic.w	r2, r2, #4
 8004030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69d9      	ldr	r1, [r3, #28]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	61da      	str	r2, [r3, #28]
      break;
 8004044:	e064      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fb37 	bl	80046c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69d9      	ldr	r1, [r3, #28]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	021a      	lsls	r2, r3, #8
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	61da      	str	r2, [r3, #28]
      break;
 8004086:	e043      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fb74 	bl	800477c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0208 	orr.w	r2, r2, #8
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0204 	bic.w	r2, r2, #4
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040c6:	e023      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fbac 	bl	800482c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	021a      	lsls	r2, r3, #8
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004108:	e002      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
      break;
 800410e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004118:	7dfb      	ldrb	r3, [r7, #23]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop

08004124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_TIM_ConfigClockSource+0x1c>
 800413c:	2302      	movs	r3, #2
 800413e:	e0b6      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x18a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800416a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417c:	d03e      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0xd8>
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	f200 8087 	bhi.w	8004294 <HAL_TIM_ConfigClockSource+0x170>
 8004186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418a:	f000 8086 	beq.w	800429a <HAL_TIM_ConfigClockSource+0x176>
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004192:	d87f      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 8004194:	2b70      	cmp	r3, #112	; 0x70
 8004196:	d01a      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0xaa>
 8004198:	2b70      	cmp	r3, #112	; 0x70
 800419a:	d87b      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 800419c:	2b60      	cmp	r3, #96	; 0x60
 800419e:	d050      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x11e>
 80041a0:	2b60      	cmp	r3, #96	; 0x60
 80041a2:	d877      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041a4:	2b50      	cmp	r3, #80	; 0x50
 80041a6:	d03c      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0xfe>
 80041a8:	2b50      	cmp	r3, #80	; 0x50
 80041aa:	d873      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d058      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x13e>
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d86f      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041b4:	2b30      	cmp	r3, #48	; 0x30
 80041b6:	d064      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15e>
 80041b8:	2b30      	cmp	r3, #48	; 0x30
 80041ba:	d86b      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d060      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15e>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d867      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15e>
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d05a      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15e>
 80041cc:	e062      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6899      	ldr	r1, [r3, #8]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f000 fbf9 	bl	80049d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	609a      	str	r2, [r3, #8]
      break;
 80041fa:	e04f      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f000 fbe2 	bl	80049d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800421e:	609a      	str	r2, [r3, #8]
      break;
 8004220:	e03c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	461a      	mov	r2, r3
 8004230:	f000 fb56 	bl	80048e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2150      	movs	r1, #80	; 0x50
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fbaf 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 8004240:	e02c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	461a      	mov	r2, r3
 8004250:	f000 fb75 	bl	800493e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2160      	movs	r1, #96	; 0x60
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fb9f 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 8004260:	e01c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6859      	ldr	r1, [r3, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	461a      	mov	r2, r3
 8004270:	f000 fb36 	bl	80048e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2140      	movs	r1, #64	; 0x40
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fb8f 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 8004280:	e00c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f000 fb86 	bl	800499e <TIM_ITRx_SetConfig>
      break;
 8004292:	e003      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e000      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800429a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a2e      	ldr	r2, [pc, #184]	; (80043d4 <TIM_Base_SetConfig+0xcc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d007      	beq.n	8004330 <TIM_Base_SetConfig+0x28>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d003      	beq.n	8004330 <TIM_Base_SetConfig+0x28>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a2b      	ldr	r2, [pc, #172]	; (80043d8 <TIM_Base_SetConfig+0xd0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d108      	bne.n	8004342 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <TIM_Base_SetConfig+0xcc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00f      	beq.n	800436a <TIM_Base_SetConfig+0x62>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004350:	d00b      	beq.n	800436a <TIM_Base_SetConfig+0x62>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <TIM_Base_SetConfig+0xd0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <TIM_Base_SetConfig+0x62>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <TIM_Base_SetConfig+0xd4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <TIM_Base_SetConfig+0x62>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <TIM_Base_SetConfig+0xd8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d108      	bne.n	800437c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <TIM_Base_SetConfig+0xcc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d007      	beq.n	80043b8 <TIM_Base_SetConfig+0xb0>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0c      	ldr	r2, [pc, #48]	; (80043dc <TIM_Base_SetConfig+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_Base_SetConfig+0xb0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <TIM_Base_SetConfig+0xd8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	615a      	str	r2, [r3, #20]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40014400 	.word	0x40014400

080043e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f023 0201 	bic.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0303 	bic.w	r3, r3, #3
 800441e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f023 0302 	bic.w	r3, r3, #2
 8004430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <TIM_OC1_SetConfig+0xec>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_OC1_SetConfig+0x70>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a23      	ldr	r2, [pc, #140]	; (80044d4 <TIM_OC1_SetConfig+0xf0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_OC1_SetConfig+0x70>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a22      	ldr	r2, [pc, #136]	; (80044d8 <TIM_OC1_SetConfig+0xf4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d10c      	bne.n	800446e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f023 0308 	bic.w	r3, r3, #8
 800445a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 0304 	bic.w	r3, r3, #4
 800446c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a17      	ldr	r2, [pc, #92]	; (80044d0 <TIM_OC1_SetConfig+0xec>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_OC1_SetConfig+0xa2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <TIM_OC1_SetConfig+0xf0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_OC1_SetConfig+0xa2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <TIM_OC1_SetConfig+0xf4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d111      	bne.n	80044aa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800448c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	621a      	str	r2, [r3, #32]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400

080044dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0210 	bic.w	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0320 	bic.w	r3, r3, #32
 800452a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <TIM_OC2_SetConfig+0xe8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10d      	bne.n	800455c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <TIM_OC2_SetConfig+0xe8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_OC2_SetConfig+0x98>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <TIM_OC2_SetConfig+0xec>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC2_SetConfig+0x98>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <TIM_OC2_SetConfig+0xf0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d113      	bne.n	800459c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800457a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400

080045d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a21      	ldr	r2, [pc, #132]	; (80046b4 <TIM_OC3_SetConfig+0xe4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10d      	bne.n	800464e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800464c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <TIM_OC3_SetConfig+0xe4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_OC3_SetConfig+0x96>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <TIM_OC3_SetConfig+0xe8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_OC3_SetConfig+0x96>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a16      	ldr	r2, [pc, #88]	; (80046bc <TIM_OC3_SetConfig+0xec>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d113      	bne.n	800468e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800466c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	621a      	str	r2, [r3, #32]
}
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40014000 	.word	0x40014000
 80046bc:	40014400 	.word	0x40014400

080046c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800470e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	031b      	lsls	r3, r3, #12
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a14      	ldr	r2, [pc, #80]	; (8004770 <TIM_OC4_SetConfig+0xb0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_OC4_SetConfig+0x74>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <TIM_OC4_SetConfig+0xb4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_OC4_SetConfig+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a12      	ldr	r2, [pc, #72]	; (8004778 <TIM_OC4_SetConfig+0xb8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d109      	bne.n	8004748 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800473a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	019b      	lsls	r3, r3, #6
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400

0800477c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a13      	ldr	r2, [pc, #76]	; (8004820 <TIM_OC5_SetConfig+0xa4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <TIM_OC5_SetConfig+0x6a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a12      	ldr	r2, [pc, #72]	; (8004824 <TIM_OC5_SetConfig+0xa8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_OC5_SetConfig+0x6a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a11      	ldr	r2, [pc, #68]	; (8004828 <TIM_OC5_SetConfig+0xac>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d109      	bne.n	80047fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	621a      	str	r2, [r3, #32]
}
 8004814:	bf00      	nop
 8004816:	371c      	adds	r7, #28
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	40012c00 	.word	0x40012c00
 8004824:	40014000 	.word	0x40014000
 8004828:	40014400 	.word	0x40014400

0800482c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	051b      	lsls	r3, r3, #20
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a14      	ldr	r2, [pc, #80]	; (80048d4 <TIM_OC6_SetConfig+0xa8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_OC6_SetConfig+0x6c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <TIM_OC6_SetConfig+0xac>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC6_SetConfig+0x6c>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a12      	ldr	r2, [pc, #72]	; (80048dc <TIM_OC6_SetConfig+0xb0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d109      	bne.n	80048ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	029b      	lsls	r3, r3, #10
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400

080048e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 030a 	bic.w	r3, r3, #10
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0210 	bic.w	r2, r3, #16
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	031b      	lsls	r3, r3, #12
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f043 0307 	orr.w	r3, r3, #7
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	609a      	str	r2, [r3, #8]
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	021a      	lsls	r2, r3, #8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2201      	movs	r2, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1a      	ldr	r2, [r3, #32]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	401a      	ands	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e054      	b.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d108      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004aa8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae0:	d009      	beq.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a11      	ldr	r2, [pc, #68]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d10c      	bne.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40012c00 	.word	0x40012c00
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40014000 	.word	0x40014000

08004b3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e060      	b.n	8004c1a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d115      	bne.n	8004c08 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	051b      	lsls	r3, r3, #20
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40012c00 	.word	0x40012c00

08004c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e040      	b.n	8004cfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc fe2a 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2224      	movs	r2, #36	; 0x24
 8004c94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fc18 	bl	80054dc <UART_SetConfig>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e022      	b.n	8004cfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fe92 	bl	80059e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 ff19 	bl	8005b2c <UART_CheckIdleState>
 8004cfa:	4603      	mov	r3, r0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	4613      	mov	r3, r2
 8004d12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	f040 8082 	bne.w	8004e22 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_UART_Transmit+0x26>
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e07a      	b.n	8004e24 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Transmit+0x38>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e073      	b.n	8004e24 <HAL_UART_Transmit+0x120>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2221      	movs	r2, #33	; 0x21
 8004d50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d52:	f7fc ffef 	bl	8001d34 <HAL_GetTick>
 8004d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d70:	d108      	bne.n	8004d84 <HAL_UART_Transmit+0x80>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e003      	b.n	8004d8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d94:	e02d      	b.n	8004df2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2180      	movs	r1, #128	; 0x80
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 ff0c 	bl	8005bbe <UART_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e039      	b.n	8004e24 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	881a      	ldrh	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc2:	b292      	uxth	r2, r2
 8004dc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	3302      	adds	r3, #2
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	e008      	b.n	8004de0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1cb      	bne.n	8004d96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2140      	movs	r1, #64	; 0x40
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fed8 	bl	8005bbe <UART_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e005      	b.n	8004e24 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d142      	bne.n	8004ec8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_UART_Receive_IT+0x22>
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e03b      	b.n	8004eca <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_UART_Receive_IT+0x34>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e034      	b.n	8004eca <HAL_UART_Receive_IT+0x9e>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_UART_Receive_IT+0xa8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01f      	beq.n	8004eb8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d018      	beq.n	8004eb8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	613b      	str	r3, [r7, #16]
   return(result);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	623b      	str	r3, [r7, #32]
 8004ea6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	69f9      	ldr	r1, [r7, #28]
 8004eaa:	6a3a      	ldr	r2, [r7, #32]
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e6      	bne.n	8004e86 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 ff42 	bl	8005d48 <UART_Start_Receive_IT>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	e000      	b.n	8004eca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3728      	adds	r7, #40	; 0x28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40008000 	.word	0x40008000

08004ed8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b0ba      	sub	sp, #232	; 0xe8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004efe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f02:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f06:	4013      	ands	r3, r2
 8004f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d115      	bne.n	8004f40 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00f      	beq.n	8004f40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 82a6 	beq.w	8005482 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	4798      	blx	r3
      }
      return;
 8004f3e:	e2a0      	b.n	8005482 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8117 	beq.w	8005178 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f5a:	4b85      	ldr	r3, [pc, #532]	; (8005170 <HAL_UART_IRQHandler+0x298>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 810a 	beq.w	8005178 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d011      	beq.n	8004f94 <HAL_UART_IRQHandler+0xbc>
 8004f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2201      	movs	r2, #1
 8004f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8a:	f043 0201 	orr.w	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d011      	beq.n	8004fc4 <HAL_UART_IRQHandler+0xec>
 8004fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00b      	beq.n	8004fc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fba:	f043 0204 	orr.w	r2, r3, #4
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d011      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x11c>
 8004fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fea:	f043 0202 	orr.w	r2, r3, #2
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d017      	beq.n	8005030 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d105      	bne.n	8005018 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800500c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005010:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2208      	movs	r2, #8
 800501e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005026:	f043 0208 	orr.w	r2, r3, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005038:	2b00      	cmp	r3, #0
 800503a:	d012      	beq.n	8005062 <HAL_UART_IRQHandler+0x18a>
 800503c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00c      	beq.n	8005062 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 820c 	beq.w	8005486 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800506e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00d      	beq.n	8005096 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800507a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	d005      	beq.n	80050ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d04f      	beq.n	800515a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 ff0e 	bl	8005edc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d141      	bne.n	8005152 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3308      	adds	r3, #8
 80050f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005106:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1d9      	bne.n	80050ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	2b00      	cmp	r3, #0
 8005120:	d013      	beq.n	800514a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a13      	ldr	r2, [pc, #76]	; (8005174 <HAL_UART_IRQHandler+0x29c>)
 8005128:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	4618      	mov	r0, r3
 8005130:	f7fc ff5b 	bl	8001fea <HAL_DMA_Abort_IT>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d017      	beq.n	800516a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005144:	4610      	mov	r0, r2
 8005146:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	e00f      	b.n	800516a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f9b0 	bl	80054b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	e00b      	b.n	800516a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9ac 	bl	80054b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	e007      	b.n	800516a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9a8 	bl	80054b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005168:	e18d      	b.n	8005486 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516a:	bf00      	nop
    return;
 800516c:	e18b      	b.n	8005486 <HAL_UART_IRQHandler+0x5ae>
 800516e:	bf00      	nop
 8005170:	04000120 	.word	0x04000120
 8005174:	08005fa3 	.word	0x08005fa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517c:	2b01      	cmp	r3, #1
 800517e:	f040 8146 	bne.w	800540e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 813f 	beq.w	800540e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8138 	beq.w	800540e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2210      	movs	r2, #16
 80051a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	f040 80b4 	bne.w	800531e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 815f 	beq.w	800548a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051d6:	429a      	cmp	r2, r3
 80051d8:	f080 8157 	bcs.w	800548a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 8085 	bne.w	8005302 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800520c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005226:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800522e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800523a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1da      	bne.n	80051f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3308      	adds	r3, #8
 8005248:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3308      	adds	r3, #8
 8005262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005266:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800526a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800526e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e1      	bne.n	8005242 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800528e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3308      	adds	r3, #8
 800529e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e3      	bne.n	800527e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80052e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e4      	bne.n	80052c2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fc fe36 	bl	8001f6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800530e:	b29b      	uxth	r3, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	b29b      	uxth	r3, r3
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8d4 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800531c:	e0b5      	b.n	800548a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800532a:	b29b      	uxth	r3, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80a7 	beq.w	800548e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80a2 	beq.w	800548e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800535e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
 800536e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e4      	bne.n	800534a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3308      	adds	r3, #8
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	623b      	str	r3, [r7, #32]
   return(result);
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053a4:	633a      	str	r2, [r7, #48]	; 0x30
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e3      	bne.n	8005380 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0310 	bic.w	r3, r3, #16
 80053de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	69b9      	ldr	r1, [r7, #24]
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	617b      	str	r3, [r7, #20]
   return(result);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e4      	bne.n	80053ca <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f85c 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800540c:	e03f      	b.n	800548e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00e      	beq.n	8005438 <HAL_UART_IRQHandler+0x560>
 800541a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800542e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 ff56 	bl	80062e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005436:	e02d      	b.n	8005494 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01c      	beq.n	8005492 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
    }
    return;
 8005460:	e017      	b.n	8005492 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d012      	beq.n	8005494 <HAL_UART_IRQHandler+0x5bc>
 800546e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00c      	beq.n	8005494 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fda7 	bl	8005fce <UART_EndTransmit_IT>
    return;
 8005480:	e008      	b.n	8005494 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005482:	bf00      	nop
 8005484:	e006      	b.n	8005494 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005486:	bf00      	nop
 8005488:	e004      	b.n	8005494 <HAL_UART_IRQHandler+0x5bc>
      return;
 800548a:	bf00      	nop
 800548c:	e002      	b.n	8005494 <HAL_UART_IRQHandler+0x5bc>
      return;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005492:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005494:	37e8      	adds	r7, #232	; 0xe8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop

0800549c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b08a      	sub	sp, #40	; 0x28
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4ba5      	ldr	r3, [pc, #660]	; (80057a0 <UART_SetConfig+0x2c4>)
 800550c:	4013      	ands	r3, r2
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005514:	430b      	orrs	r3, r1
 8005516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a9a      	ldr	r2, [pc, #616]	; (80057a4 <UART_SetConfig+0x2c8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	4313      	orrs	r3, r2
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005558:	430a      	orrs	r2, r1
 800555a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a91      	ldr	r2, [pc, #580]	; (80057a8 <UART_SetConfig+0x2cc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d126      	bne.n	80055b4 <UART_SetConfig+0xd8>
 8005566:	4b91      	ldr	r3, [pc, #580]	; (80057ac <UART_SetConfig+0x2d0>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	2b03      	cmp	r3, #3
 8005572:	d81b      	bhi.n	80055ac <UART_SetConfig+0xd0>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <UART_SetConfig+0xa0>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	0800558d 	.word	0x0800558d
 8005580:	0800559d 	.word	0x0800559d
 8005584:	08005595 	.word	0x08005595
 8005588:	080055a5 	.word	0x080055a5
 800558c:	2301      	movs	r3, #1
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005592:	e0d6      	b.n	8005742 <UART_SetConfig+0x266>
 8005594:	2302      	movs	r3, #2
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559a:	e0d2      	b.n	8005742 <UART_SetConfig+0x266>
 800559c:	2304      	movs	r3, #4
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a2:	e0ce      	b.n	8005742 <UART_SetConfig+0x266>
 80055a4:	2308      	movs	r3, #8
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055aa:	e0ca      	b.n	8005742 <UART_SetConfig+0x266>
 80055ac:	2310      	movs	r3, #16
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b2:	e0c6      	b.n	8005742 <UART_SetConfig+0x266>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a7d      	ldr	r2, [pc, #500]	; (80057b0 <UART_SetConfig+0x2d4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d138      	bne.n	8005630 <UART_SetConfig+0x154>
 80055be:	4b7b      	ldr	r3, [pc, #492]	; (80057ac <UART_SetConfig+0x2d0>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f003 030c 	and.w	r3, r3, #12
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	d82d      	bhi.n	8005628 <UART_SetConfig+0x14c>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0xf8>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005609 	.word	0x08005609
 80055d8:	08005629 	.word	0x08005629
 80055dc:	08005629 	.word	0x08005629
 80055e0:	08005629 	.word	0x08005629
 80055e4:	08005619 	.word	0x08005619
 80055e8:	08005629 	.word	0x08005629
 80055ec:	08005629 	.word	0x08005629
 80055f0:	08005629 	.word	0x08005629
 80055f4:	08005611 	.word	0x08005611
 80055f8:	08005629 	.word	0x08005629
 80055fc:	08005629 	.word	0x08005629
 8005600:	08005629 	.word	0x08005629
 8005604:	08005621 	.word	0x08005621
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560e:	e098      	b.n	8005742 <UART_SetConfig+0x266>
 8005610:	2302      	movs	r3, #2
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005616:	e094      	b.n	8005742 <UART_SetConfig+0x266>
 8005618:	2304      	movs	r3, #4
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561e:	e090      	b.n	8005742 <UART_SetConfig+0x266>
 8005620:	2308      	movs	r3, #8
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005626:	e08c      	b.n	8005742 <UART_SetConfig+0x266>
 8005628:	2310      	movs	r3, #16
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562e:	e088      	b.n	8005742 <UART_SetConfig+0x266>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a5f      	ldr	r2, [pc, #380]	; (80057b4 <UART_SetConfig+0x2d8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d125      	bne.n	8005686 <UART_SetConfig+0x1aa>
 800563a:	4b5c      	ldr	r3, [pc, #368]	; (80057ac <UART_SetConfig+0x2d0>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005640:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005644:	2b30      	cmp	r3, #48	; 0x30
 8005646:	d016      	beq.n	8005676 <UART_SetConfig+0x19a>
 8005648:	2b30      	cmp	r3, #48	; 0x30
 800564a:	d818      	bhi.n	800567e <UART_SetConfig+0x1a2>
 800564c:	2b20      	cmp	r3, #32
 800564e:	d00a      	beq.n	8005666 <UART_SetConfig+0x18a>
 8005650:	2b20      	cmp	r3, #32
 8005652:	d814      	bhi.n	800567e <UART_SetConfig+0x1a2>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <UART_SetConfig+0x182>
 8005658:	2b10      	cmp	r3, #16
 800565a:	d008      	beq.n	800566e <UART_SetConfig+0x192>
 800565c:	e00f      	b.n	800567e <UART_SetConfig+0x1a2>
 800565e:	2300      	movs	r3, #0
 8005660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005664:	e06d      	b.n	8005742 <UART_SetConfig+0x266>
 8005666:	2302      	movs	r3, #2
 8005668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566c:	e069      	b.n	8005742 <UART_SetConfig+0x266>
 800566e:	2304      	movs	r3, #4
 8005670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005674:	e065      	b.n	8005742 <UART_SetConfig+0x266>
 8005676:	2308      	movs	r3, #8
 8005678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567c:	e061      	b.n	8005742 <UART_SetConfig+0x266>
 800567e:	2310      	movs	r3, #16
 8005680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005684:	e05d      	b.n	8005742 <UART_SetConfig+0x266>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a4b      	ldr	r2, [pc, #300]	; (80057b8 <UART_SetConfig+0x2dc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d125      	bne.n	80056dc <UART_SetConfig+0x200>
 8005690:	4b46      	ldr	r3, [pc, #280]	; (80057ac <UART_SetConfig+0x2d0>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800569a:	2bc0      	cmp	r3, #192	; 0xc0
 800569c:	d016      	beq.n	80056cc <UART_SetConfig+0x1f0>
 800569e:	2bc0      	cmp	r3, #192	; 0xc0
 80056a0:	d818      	bhi.n	80056d4 <UART_SetConfig+0x1f8>
 80056a2:	2b80      	cmp	r3, #128	; 0x80
 80056a4:	d00a      	beq.n	80056bc <UART_SetConfig+0x1e0>
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d814      	bhi.n	80056d4 <UART_SetConfig+0x1f8>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <UART_SetConfig+0x1d8>
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d008      	beq.n	80056c4 <UART_SetConfig+0x1e8>
 80056b2:	e00f      	b.n	80056d4 <UART_SetConfig+0x1f8>
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ba:	e042      	b.n	8005742 <UART_SetConfig+0x266>
 80056bc:	2302      	movs	r3, #2
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c2:	e03e      	b.n	8005742 <UART_SetConfig+0x266>
 80056c4:	2304      	movs	r3, #4
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ca:	e03a      	b.n	8005742 <UART_SetConfig+0x266>
 80056cc:	2308      	movs	r3, #8
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d2:	e036      	b.n	8005742 <UART_SetConfig+0x266>
 80056d4:	2310      	movs	r3, #16
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056da:	e032      	b.n	8005742 <UART_SetConfig+0x266>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a30      	ldr	r2, [pc, #192]	; (80057a4 <UART_SetConfig+0x2c8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d12a      	bne.n	800573c <UART_SetConfig+0x260>
 80056e6:	4b31      	ldr	r3, [pc, #196]	; (80057ac <UART_SetConfig+0x2d0>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056f4:	d01a      	beq.n	800572c <UART_SetConfig+0x250>
 80056f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056fa:	d81b      	bhi.n	8005734 <UART_SetConfig+0x258>
 80056fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005700:	d00c      	beq.n	800571c <UART_SetConfig+0x240>
 8005702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005706:	d815      	bhi.n	8005734 <UART_SetConfig+0x258>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <UART_SetConfig+0x238>
 800570c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005710:	d008      	beq.n	8005724 <UART_SetConfig+0x248>
 8005712:	e00f      	b.n	8005734 <UART_SetConfig+0x258>
 8005714:	2300      	movs	r3, #0
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571a:	e012      	b.n	8005742 <UART_SetConfig+0x266>
 800571c:	2302      	movs	r3, #2
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005722:	e00e      	b.n	8005742 <UART_SetConfig+0x266>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572a:	e00a      	b.n	8005742 <UART_SetConfig+0x266>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005732:	e006      	b.n	8005742 <UART_SetConfig+0x266>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e002      	b.n	8005742 <UART_SetConfig+0x266>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <UART_SetConfig+0x2c8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	f040 808b 	bne.w	8005864 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800574e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005752:	2b08      	cmp	r3, #8
 8005754:	d834      	bhi.n	80057c0 <UART_SetConfig+0x2e4>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <UART_SetConfig+0x280>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005781 	.word	0x08005781
 8005760:	080057c1 	.word	0x080057c1
 8005764:	08005789 	.word	0x08005789
 8005768:	080057c1 	.word	0x080057c1
 800576c:	0800578f 	.word	0x0800578f
 8005770:	080057c1 	.word	0x080057c1
 8005774:	080057c1 	.word	0x080057c1
 8005778:	080057c1 	.word	0x080057c1
 800577c:	08005797 	.word	0x08005797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005780:	f7fd fc2e 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8005784:	61f8      	str	r0, [r7, #28]
        break;
 8005786:	e021      	b.n	80057cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005788:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <UART_SetConfig+0x2e0>)
 800578a:	61fb      	str	r3, [r7, #28]
        break;
 800578c:	e01e      	b.n	80057cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578e:	f7fd fb8f 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8005792:	61f8      	str	r0, [r7, #28]
        break;
 8005794:	e01a      	b.n	80057cc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579a:	61fb      	str	r3, [r7, #28]
        break;
 800579c:	e016      	b.n	80057cc <UART_SetConfig+0x2f0>
 800579e:	bf00      	nop
 80057a0:	efff69f3 	.word	0xefff69f3
 80057a4:	40008000 	.word	0x40008000
 80057a8:	40013800 	.word	0x40013800
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40004400 	.word	0x40004400
 80057b4:	40004800 	.word	0x40004800
 80057b8:	40004c00 	.word	0x40004c00
 80057bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80fa 	beq.w	80059c8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4413      	add	r3, r2
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d305      	bcc.n	80057f0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d903      	bls.n	80057f8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057f6:	e0e7      	b.n	80059c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2200      	movs	r2, #0
 80057fc:	461c      	mov	r4, r3
 80057fe:	4615      	mov	r5, r2
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	022b      	lsls	r3, r5, #8
 800580a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800580e:	0222      	lsls	r2, r4, #8
 8005810:	68f9      	ldr	r1, [r7, #12]
 8005812:	6849      	ldr	r1, [r1, #4]
 8005814:	0849      	lsrs	r1, r1, #1
 8005816:	2000      	movs	r0, #0
 8005818:	4688      	mov	r8, r1
 800581a:	4681      	mov	r9, r0
 800581c:	eb12 0a08 	adds.w	sl, r2, r8
 8005820:	eb43 0b09 	adc.w	fp, r3, r9
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005832:	4650      	mov	r0, sl
 8005834:	4659      	mov	r1, fp
 8005836:	f7fb fa0f 	bl	8000c58 <__aeabi_uldivmod>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4613      	mov	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005848:	d308      	bcc.n	800585c <UART_SetConfig+0x380>
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005850:	d204      	bcs.n	800585c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	60da      	str	r2, [r3, #12]
 800585a:	e0b5      	b.n	80059c8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005862:	e0b1      	b.n	80059c8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586c:	d15d      	bne.n	800592a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800586e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005872:	2b08      	cmp	r3, #8
 8005874:	d827      	bhi.n	80058c6 <UART_SetConfig+0x3ea>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <UART_SetConfig+0x3a0>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	080058a1 	.word	0x080058a1
 8005880:	080058a9 	.word	0x080058a9
 8005884:	080058b1 	.word	0x080058b1
 8005888:	080058c7 	.word	0x080058c7
 800588c:	080058b7 	.word	0x080058b7
 8005890:	080058c7 	.word	0x080058c7
 8005894:	080058c7 	.word	0x080058c7
 8005898:	080058c7 	.word	0x080058c7
 800589c:	080058bf 	.word	0x080058bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a0:	f7fd fb9e 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80058a4:	61f8      	str	r0, [r7, #28]
        break;
 80058a6:	e014      	b.n	80058d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7fd fbb0 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 80058ac:	61f8      	str	r0, [r7, #28]
        break;
 80058ae:	e010      	b.n	80058d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b0:	4b4c      	ldr	r3, [pc, #304]	; (80059e4 <UART_SetConfig+0x508>)
 80058b2:	61fb      	str	r3, [r7, #28]
        break;
 80058b4:	e00d      	b.n	80058d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b6:	f7fd fafb 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 80058ba:	61f8      	str	r0, [r7, #28]
        break;
 80058bc:	e009      	b.n	80058d2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c2:	61fb      	str	r3, [r7, #28]
        break;
 80058c4:	e005      	b.n	80058d2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d077      	beq.n	80059c8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	005a      	lsls	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	441a      	add	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b0f      	cmp	r3, #15
 80058f2:	d916      	bls.n	8005922 <UART_SetConfig+0x446>
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fa:	d212      	bcs.n	8005922 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f023 030f 	bic.w	r3, r3, #15
 8005904:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	b29a      	uxth	r2, r3
 8005912:	8afb      	ldrh	r3, [r7, #22]
 8005914:	4313      	orrs	r3, r2
 8005916:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	8afa      	ldrh	r2, [r7, #22]
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	e052      	b.n	80059c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005928:	e04e      	b.n	80059c8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800592e:	2b08      	cmp	r3, #8
 8005930:	d827      	bhi.n	8005982 <UART_SetConfig+0x4a6>
 8005932:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <UART_SetConfig+0x45c>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	0800595d 	.word	0x0800595d
 800593c:	08005965 	.word	0x08005965
 8005940:	0800596d 	.word	0x0800596d
 8005944:	08005983 	.word	0x08005983
 8005948:	08005973 	.word	0x08005973
 800594c:	08005983 	.word	0x08005983
 8005950:	08005983 	.word	0x08005983
 8005954:	08005983 	.word	0x08005983
 8005958:	0800597b 	.word	0x0800597b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800595c:	f7fd fb40 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8005960:	61f8      	str	r0, [r7, #28]
        break;
 8005962:	e014      	b.n	800598e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005964:	f7fd fb52 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8005968:	61f8      	str	r0, [r7, #28]
        break;
 800596a:	e010      	b.n	800598e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800596c:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <UART_SetConfig+0x508>)
 800596e:	61fb      	str	r3, [r7, #28]
        break;
 8005970:	e00d      	b.n	800598e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005972:	f7fd fa9d 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8005976:	61f8      	str	r0, [r7, #28]
        break;
 8005978:	e009      	b.n	800598e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800597e:	61fb      	str	r3, [r7, #28]
        break;
 8005980:	e005      	b.n	800598e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800598c:	bf00      	nop
    }

    if (pclk != 0U)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d019      	beq.n	80059c8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	085a      	lsrs	r2, r3, #1
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	441a      	add	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b0f      	cmp	r3, #15
 80059ac:	d909      	bls.n	80059c2 <UART_SetConfig+0x4e6>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b4:	d205      	bcs.n	80059c2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	e002      	b.n	80059c8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80059d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3728      	adds	r7, #40	; 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e2:	bf00      	nop
 80059e4:	00f42400 	.word	0x00f42400

080059e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01a      	beq.n	8005afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae6:	d10a      	bne.n	8005afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
  }
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b3c:	f7fc f8fa 	bl	8001d34 <HAL_GetTick>
 8005b40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d10e      	bne.n	8005b6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f82d 	bl	8005bbe <UART_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e023      	b.n	8005bb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d10e      	bne.n	8005b9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f817 	bl	8005bbe <UART_WaitOnFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e00d      	b.n	8005bb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b09c      	sub	sp, #112	; 0x70
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	603b      	str	r3, [r7, #0]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bce:	e0a5      	b.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	f000 80a1 	beq.w	8005d1c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bda:	f7fc f8ab 	bl	8001d34 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d302      	bcc.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d13e      	bne.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c04:	667b      	str	r3, [r7, #100]	; 0x64
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e6      	bne.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3308      	adds	r3, #8
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	663b      	str	r3, [r7, #96]	; 0x60
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c42:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e5      	bne.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e067      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d04f      	beq.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8a:	d147      	bne.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c94:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e6      	bne.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ce8:	623a      	str	r2, [r7, #32]
 8005cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	69f9      	ldr	r1, [r7, #28]
 8005cee:	6a3a      	ldr	r2, [r7, #32]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e010      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69da      	ldr	r2, [r3, #28]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4013      	ands	r3, r2
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	f43f af4a 	beq.w	8005bd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3770      	adds	r7, #112	; 0x70
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b097      	sub	sp, #92	; 0x5c
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	88fa      	ldrh	r2, [r7, #6]
 8005d68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	d10e      	bne.n	8005d9a <UART_Start_Receive_IT+0x52>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <UART_Start_Receive_IT+0x48>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d8e:	e02d      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	22ff      	movs	r2, #255	; 0xff
 8005d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d98:	e028      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10d      	bne.n	8005dbe <UART_Start_Receive_IT+0x76>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <UART_Start_Receive_IT+0x6c>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	22ff      	movs	r2, #255	; 0xff
 8005dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005db2:	e01b      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	227f      	movs	r2, #127	; 0x7f
 8005db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dbc:	e016      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc6:	d10d      	bne.n	8005de4 <UART_Start_Receive_IT+0x9c>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <UART_Start_Receive_IT+0x92>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	227f      	movs	r2, #127	; 0x7f
 8005dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dd8:	e008      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	223f      	movs	r2, #63	; 0x3f
 8005dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005de2:	e003      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2222      	movs	r2, #34	; 0x22
 8005df8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	657b      	str	r3, [r7, #84]	; 0x54
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3308      	adds	r3, #8
 8005e18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e36:	d107      	bne.n	8005e48 <UART_Start_Receive_IT+0x100>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a24      	ldr	r2, [pc, #144]	; (8005ed4 <UART_Start_Receive_IT+0x18c>)
 8005e44:	665a      	str	r2, [r3, #100]	; 0x64
 8005e46:	e002      	b.n	8005e4e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a23      	ldr	r2, [pc, #140]	; (8005ed8 <UART_Start_Receive_IT+0x190>)
 8005e4c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d019      	beq.n	8005e92 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e6      	bne.n	8005e5e <UART_Start_Receive_IT+0x116>
 8005e90:	e018      	b.n	8005ec4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f043 0320 	orr.w	r3, r3, #32
 8005ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb0:	623b      	str	r3, [r7, #32]
 8005eb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	69f9      	ldr	r1, [r7, #28]
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e6      	bne.n	8005e92 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	375c      	adds	r7, #92	; 0x5c
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	08006183 	.word	0x08006183
 8005ed8:	08006023 	.word	0x08006023

08005edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b095      	sub	sp, #84	; 0x54
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f02:	643b      	str	r3, [r7, #64]	; 0x40
 8005f04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e6      	bne.n	8005ee4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	e853 3f00 	ldrex	r3, [r3]
 8005f24:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3308      	adds	r3, #8
 8005f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e5      	bne.n	8005f16 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d118      	bne.n	8005f84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f023 0310 	bic.w	r3, r3, #16
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6979      	ldr	r1, [r7, #20]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e6      	bne.n	8005f52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f96:	bf00      	nop
 8005f98:	3754      	adds	r7, #84	; 0x54
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff fa75 	bl	80054b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc6:	bf00      	nop
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b088      	sub	sp, #32
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6979      	ldr	r1, [r7, #20]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	613b      	str	r3, [r7, #16]
   return(result);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e6      	bne.n	8005fd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff fa41 	bl	800549c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800601a:	bf00      	nop
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b096      	sub	sp, #88	; 0x58
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006030:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006038:	2b22      	cmp	r3, #34	; 0x22
 800603a:	f040 8094 	bne.w	8006166 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006044:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006048:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800604c:	b2d9      	uxtb	r1, r3
 800604e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006052:	b2da      	uxtb	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006058:	400a      	ands	r2, r1
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d179      	bne.n	800617a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800609a:	653b      	str	r3, [r7, #80]	; 0x50
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
 80060a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e6      	bne.n	8006086 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3308      	adds	r3, #8
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	623b      	str	r3, [r7, #32]
   return(result);
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3308      	adds	r3, #8
 80060d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060d8:	633a      	str	r2, [r7, #48]	; 0x30
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e5      	bne.n	80060b8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d12e      	bne.n	800615e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	60fb      	str	r3, [r7, #12]
   return(result);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0310 	bic.w	r3, r3, #16
 800611a:	64bb      	str	r3, [r7, #72]	; 0x48
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	69b9      	ldr	r1, [r7, #24]
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	617b      	str	r3, [r7, #20]
   return(result);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e6      	bne.n	8006106 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f003 0310 	and.w	r3, r3, #16
 8006142:	2b10      	cmp	r3, #16
 8006144:	d103      	bne.n	800614e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2210      	movs	r2, #16
 800614c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff f9b4 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800615c:	e00d      	b.n	800617a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fb faa0 	bl	80016a4 <HAL_UART_RxCpltCallback>
}
 8006164:	e009      	b.n	800617a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	8b1b      	ldrh	r3, [r3, #24]
 800616c:	b29a      	uxth	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0208 	orr.w	r2, r2, #8
 8006176:	b292      	uxth	r2, r2
 8006178:	831a      	strh	r2, [r3, #24]
}
 800617a:	bf00      	nop
 800617c:	3758      	adds	r7, #88	; 0x58
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b096      	sub	sp, #88	; 0x58
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006190:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006198:	2b22      	cmp	r3, #34	; 0x22
 800619a:	f040 8094 	bne.w	80062c6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ac:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80061ae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80061b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80061b6:	4013      	ands	r3, r2
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c2:	1c9a      	adds	r2, r3, #2
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d179      	bne.n	80062da <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006204:	643b      	str	r3, [r7, #64]	; 0x40
 8006206:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800620a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e6      	bne.n	80061e6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3308      	adds	r3, #8
 800621e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	61fb      	str	r3, [r7, #28]
   return(result);
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800623e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e5      	bne.n	8006218 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625c:	2b01      	cmp	r3, #1
 800625e:	d12e      	bne.n	80062be <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	60bb      	str	r3, [r7, #8]
   return(result);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f023 0310 	bic.w	r3, r3, #16
 800627a:	647b      	str	r3, [r7, #68]	; 0x44
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6979      	ldr	r1, [r7, #20]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	613b      	str	r3, [r7, #16]
   return(result);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e6      	bne.n	8006266 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d103      	bne.n	80062ae <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2210      	movs	r2, #16
 80062ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff f904 	bl	80054c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062bc:	e00d      	b.n	80062da <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fb f9f0 	bl	80016a4 <HAL_UART_RxCpltCallback>
}
 80062c4:	e009      	b.n	80062da <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	8b1b      	ldrh	r3, [r3, #24]
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0208 	orr.w	r2, r2, #8
 80062d6:	b292      	uxth	r2, r2
 80062d8:	831a      	strh	r2, [r3, #24]
}
 80062da:	bf00      	nop
 80062dc:	3758      	adds	r7, #88	; 0x58
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <atoi>:
 80062f6:	220a      	movs	r2, #10
 80062f8:	2100      	movs	r1, #0
 80062fa:	f000 bdb5 	b.w	8006e68 <strtol>
	...

08006300 <__errno>:
 8006300:	4b01      	ldr	r3, [pc, #4]	; (8006308 <__errno+0x8>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	2000000c 	.word	0x2000000c

0800630c <__libc_init_array>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4d0d      	ldr	r5, [pc, #52]	; (8006344 <__libc_init_array+0x38>)
 8006310:	4c0d      	ldr	r4, [pc, #52]	; (8006348 <__libc_init_array+0x3c>)
 8006312:	1b64      	subs	r4, r4, r5
 8006314:	10a4      	asrs	r4, r4, #2
 8006316:	2600      	movs	r6, #0
 8006318:	42a6      	cmp	r6, r4
 800631a:	d109      	bne.n	8006330 <__libc_init_array+0x24>
 800631c:	4d0b      	ldr	r5, [pc, #44]	; (800634c <__libc_init_array+0x40>)
 800631e:	4c0c      	ldr	r4, [pc, #48]	; (8006350 <__libc_init_array+0x44>)
 8006320:	f003 f804 	bl	800932c <_init>
 8006324:	1b64      	subs	r4, r4, r5
 8006326:	10a4      	asrs	r4, r4, #2
 8006328:	2600      	movs	r6, #0
 800632a:	42a6      	cmp	r6, r4
 800632c:	d105      	bne.n	800633a <__libc_init_array+0x2e>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	f855 3b04 	ldr.w	r3, [r5], #4
 8006334:	4798      	blx	r3
 8006336:	3601      	adds	r6, #1
 8006338:	e7ee      	b.n	8006318 <__libc_init_array+0xc>
 800633a:	f855 3b04 	ldr.w	r3, [r5], #4
 800633e:	4798      	blx	r3
 8006340:	3601      	adds	r6, #1
 8006342:	e7f2      	b.n	800632a <__libc_init_array+0x1e>
 8006344:	0800979c 	.word	0x0800979c
 8006348:	0800979c 	.word	0x0800979c
 800634c:	0800979c 	.word	0x0800979c
 8006350:	080097a0 	.word	0x080097a0

08006354 <memset>:
 8006354:	4402      	add	r2, r0
 8006356:	4603      	mov	r3, r0
 8006358:	4293      	cmp	r3, r2
 800635a:	d100      	bne.n	800635e <memset+0xa>
 800635c:	4770      	bx	lr
 800635e:	f803 1b01 	strb.w	r1, [r3], #1
 8006362:	e7f9      	b.n	8006358 <memset+0x4>

08006364 <__cvt>:
 8006364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	ec55 4b10 	vmov	r4, r5, d0
 800636c:	2d00      	cmp	r5, #0
 800636e:	460e      	mov	r6, r1
 8006370:	4619      	mov	r1, r3
 8006372:	462b      	mov	r3, r5
 8006374:	bfbb      	ittet	lt
 8006376:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800637a:	461d      	movlt	r5, r3
 800637c:	2300      	movge	r3, #0
 800637e:	232d      	movlt	r3, #45	; 0x2d
 8006380:	700b      	strb	r3, [r1, #0]
 8006382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006384:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006388:	4691      	mov	r9, r2
 800638a:	f023 0820 	bic.w	r8, r3, #32
 800638e:	bfbc      	itt	lt
 8006390:	4622      	movlt	r2, r4
 8006392:	4614      	movlt	r4, r2
 8006394:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006398:	d005      	beq.n	80063a6 <__cvt+0x42>
 800639a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800639e:	d100      	bne.n	80063a2 <__cvt+0x3e>
 80063a0:	3601      	adds	r6, #1
 80063a2:	2102      	movs	r1, #2
 80063a4:	e000      	b.n	80063a8 <__cvt+0x44>
 80063a6:	2103      	movs	r1, #3
 80063a8:	ab03      	add	r3, sp, #12
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	ab02      	add	r3, sp, #8
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	ec45 4b10 	vmov	d0, r4, r5
 80063b4:	4653      	mov	r3, sl
 80063b6:	4632      	mov	r2, r6
 80063b8:	f000 feae 	bl	8007118 <_dtoa_r>
 80063bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063c0:	4607      	mov	r7, r0
 80063c2:	d102      	bne.n	80063ca <__cvt+0x66>
 80063c4:	f019 0f01 	tst.w	r9, #1
 80063c8:	d022      	beq.n	8006410 <__cvt+0xac>
 80063ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063ce:	eb07 0906 	add.w	r9, r7, r6
 80063d2:	d110      	bne.n	80063f6 <__cvt+0x92>
 80063d4:	783b      	ldrb	r3, [r7, #0]
 80063d6:	2b30      	cmp	r3, #48	; 0x30
 80063d8:	d10a      	bne.n	80063f0 <__cvt+0x8c>
 80063da:	2200      	movs	r2, #0
 80063dc:	2300      	movs	r3, #0
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7fa fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80063e6:	b918      	cbnz	r0, 80063f0 <__cvt+0x8c>
 80063e8:	f1c6 0601 	rsb	r6, r6, #1
 80063ec:	f8ca 6000 	str.w	r6, [sl]
 80063f0:	f8da 3000 	ldr.w	r3, [sl]
 80063f4:	4499      	add	r9, r3
 80063f6:	2200      	movs	r2, #0
 80063f8:	2300      	movs	r3, #0
 80063fa:	4620      	mov	r0, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	f7fa fb6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006402:	b108      	cbz	r0, 8006408 <__cvt+0xa4>
 8006404:	f8cd 900c 	str.w	r9, [sp, #12]
 8006408:	2230      	movs	r2, #48	; 0x30
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	454b      	cmp	r3, r9
 800640e:	d307      	bcc.n	8006420 <__cvt+0xbc>
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006414:	1bdb      	subs	r3, r3, r7
 8006416:	4638      	mov	r0, r7
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	b004      	add	sp, #16
 800641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006420:	1c59      	adds	r1, r3, #1
 8006422:	9103      	str	r1, [sp, #12]
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	e7f0      	b.n	800640a <__cvt+0xa6>

08006428 <__exponent>:
 8006428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800642a:	4603      	mov	r3, r0
 800642c:	2900      	cmp	r1, #0
 800642e:	bfb8      	it	lt
 8006430:	4249      	neglt	r1, r1
 8006432:	f803 2b02 	strb.w	r2, [r3], #2
 8006436:	bfb4      	ite	lt
 8006438:	222d      	movlt	r2, #45	; 0x2d
 800643a:	222b      	movge	r2, #43	; 0x2b
 800643c:	2909      	cmp	r1, #9
 800643e:	7042      	strb	r2, [r0, #1]
 8006440:	dd2a      	ble.n	8006498 <__exponent+0x70>
 8006442:	f10d 0407 	add.w	r4, sp, #7
 8006446:	46a4      	mov	ip, r4
 8006448:	270a      	movs	r7, #10
 800644a:	46a6      	mov	lr, r4
 800644c:	460a      	mov	r2, r1
 800644e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006452:	fb07 1516 	mls	r5, r7, r6, r1
 8006456:	3530      	adds	r5, #48	; 0x30
 8006458:	2a63      	cmp	r2, #99	; 0x63
 800645a:	f104 34ff 	add.w	r4, r4, #4294967295
 800645e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006462:	4631      	mov	r1, r6
 8006464:	dcf1      	bgt.n	800644a <__exponent+0x22>
 8006466:	3130      	adds	r1, #48	; 0x30
 8006468:	f1ae 0502 	sub.w	r5, lr, #2
 800646c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006470:	1c44      	adds	r4, r0, #1
 8006472:	4629      	mov	r1, r5
 8006474:	4561      	cmp	r1, ip
 8006476:	d30a      	bcc.n	800648e <__exponent+0x66>
 8006478:	f10d 0209 	add.w	r2, sp, #9
 800647c:	eba2 020e 	sub.w	r2, r2, lr
 8006480:	4565      	cmp	r5, ip
 8006482:	bf88      	it	hi
 8006484:	2200      	movhi	r2, #0
 8006486:	4413      	add	r3, r2
 8006488:	1a18      	subs	r0, r3, r0
 800648a:	b003      	add	sp, #12
 800648c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006492:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006496:	e7ed      	b.n	8006474 <__exponent+0x4c>
 8006498:	2330      	movs	r3, #48	; 0x30
 800649a:	3130      	adds	r1, #48	; 0x30
 800649c:	7083      	strb	r3, [r0, #2]
 800649e:	70c1      	strb	r1, [r0, #3]
 80064a0:	1d03      	adds	r3, r0, #4
 80064a2:	e7f1      	b.n	8006488 <__exponent+0x60>

080064a4 <_printf_float>:
 80064a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	ed2d 8b02 	vpush	{d8}
 80064ac:	b08d      	sub	sp, #52	; 0x34
 80064ae:	460c      	mov	r4, r1
 80064b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064b4:	4616      	mov	r6, r2
 80064b6:	461f      	mov	r7, r3
 80064b8:	4605      	mov	r5, r0
 80064ba:	f001 fdd3 	bl	8008064 <_localeconv_r>
 80064be:	f8d0 a000 	ldr.w	sl, [r0]
 80064c2:	4650      	mov	r0, sl
 80064c4:	f7f9 fe8c 	bl	80001e0 <strlen>
 80064c8:	2300      	movs	r3, #0
 80064ca:	930a      	str	r3, [sp, #40]	; 0x28
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	9305      	str	r3, [sp, #20]
 80064d0:	f8d8 3000 	ldr.w	r3, [r8]
 80064d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064d8:	3307      	adds	r3, #7
 80064da:	f023 0307 	bic.w	r3, r3, #7
 80064de:	f103 0208 	add.w	r2, r3, #8
 80064e2:	f8c8 2000 	str.w	r2, [r8]
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064f6:	9307      	str	r3, [sp, #28]
 80064f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80064fc:	ee08 0a10 	vmov	s16, r0
 8006500:	4b9f      	ldr	r3, [pc, #636]	; (8006780 <_printf_float+0x2dc>)
 8006502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006506:	f04f 32ff 	mov.w	r2, #4294967295
 800650a:	f7fa fb17 	bl	8000b3c <__aeabi_dcmpun>
 800650e:	bb88      	cbnz	r0, 8006574 <_printf_float+0xd0>
 8006510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006514:	4b9a      	ldr	r3, [pc, #616]	; (8006780 <_printf_float+0x2dc>)
 8006516:	f04f 32ff 	mov.w	r2, #4294967295
 800651a:	f7fa faf1 	bl	8000b00 <__aeabi_dcmple>
 800651e:	bb48      	cbnz	r0, 8006574 <_printf_float+0xd0>
 8006520:	2200      	movs	r2, #0
 8006522:	2300      	movs	r3, #0
 8006524:	4640      	mov	r0, r8
 8006526:	4649      	mov	r1, r9
 8006528:	f7fa fae0 	bl	8000aec <__aeabi_dcmplt>
 800652c:	b110      	cbz	r0, 8006534 <_printf_float+0x90>
 800652e:	232d      	movs	r3, #45	; 0x2d
 8006530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006534:	4b93      	ldr	r3, [pc, #588]	; (8006784 <_printf_float+0x2e0>)
 8006536:	4894      	ldr	r0, [pc, #592]	; (8006788 <_printf_float+0x2e4>)
 8006538:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800653c:	bf94      	ite	ls
 800653e:	4698      	movls	r8, r3
 8006540:	4680      	movhi	r8, r0
 8006542:	2303      	movs	r3, #3
 8006544:	6123      	str	r3, [r4, #16]
 8006546:	9b05      	ldr	r3, [sp, #20]
 8006548:	f023 0204 	bic.w	r2, r3, #4
 800654c:	6022      	str	r2, [r4, #0]
 800654e:	f04f 0900 	mov.w	r9, #0
 8006552:	9700      	str	r7, [sp, #0]
 8006554:	4633      	mov	r3, r6
 8006556:	aa0b      	add	r2, sp, #44	; 0x2c
 8006558:	4621      	mov	r1, r4
 800655a:	4628      	mov	r0, r5
 800655c:	f000 f9d8 	bl	8006910 <_printf_common>
 8006560:	3001      	adds	r0, #1
 8006562:	f040 8090 	bne.w	8006686 <_printf_float+0x1e2>
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	b00d      	add	sp, #52	; 0x34
 800656c:	ecbd 8b02 	vpop	{d8}
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	4640      	mov	r0, r8
 800657a:	4649      	mov	r1, r9
 800657c:	f7fa fade 	bl	8000b3c <__aeabi_dcmpun>
 8006580:	b140      	cbz	r0, 8006594 <_printf_float+0xf0>
 8006582:	464b      	mov	r3, r9
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfbc      	itt	lt
 8006588:	232d      	movlt	r3, #45	; 0x2d
 800658a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800658e:	487f      	ldr	r0, [pc, #508]	; (800678c <_printf_float+0x2e8>)
 8006590:	4b7f      	ldr	r3, [pc, #508]	; (8006790 <_printf_float+0x2ec>)
 8006592:	e7d1      	b.n	8006538 <_printf_float+0x94>
 8006594:	6863      	ldr	r3, [r4, #4]
 8006596:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800659a:	9206      	str	r2, [sp, #24]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	d13f      	bne.n	8006620 <_printf_float+0x17c>
 80065a0:	2306      	movs	r3, #6
 80065a2:	6063      	str	r3, [r4, #4]
 80065a4:	9b05      	ldr	r3, [sp, #20]
 80065a6:	6861      	ldr	r1, [r4, #4]
 80065a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065ac:	2300      	movs	r3, #0
 80065ae:	9303      	str	r3, [sp, #12]
 80065b0:	ab0a      	add	r3, sp, #40	; 0x28
 80065b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065b6:	ab09      	add	r3, sp, #36	; 0x24
 80065b8:	ec49 8b10 	vmov	d0, r8, r9
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	6022      	str	r2, [r4, #0]
 80065c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065c4:	4628      	mov	r0, r5
 80065c6:	f7ff fecd 	bl	8006364 <__cvt>
 80065ca:	9b06      	ldr	r3, [sp, #24]
 80065cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ce:	2b47      	cmp	r3, #71	; 0x47
 80065d0:	4680      	mov	r8, r0
 80065d2:	d108      	bne.n	80065e6 <_printf_float+0x142>
 80065d4:	1cc8      	adds	r0, r1, #3
 80065d6:	db02      	blt.n	80065de <_printf_float+0x13a>
 80065d8:	6863      	ldr	r3, [r4, #4]
 80065da:	4299      	cmp	r1, r3
 80065dc:	dd41      	ble.n	8006662 <_printf_float+0x1be>
 80065de:	f1ab 0b02 	sub.w	fp, fp, #2
 80065e2:	fa5f fb8b 	uxtb.w	fp, fp
 80065e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065ea:	d820      	bhi.n	800662e <_printf_float+0x18a>
 80065ec:	3901      	subs	r1, #1
 80065ee:	465a      	mov	r2, fp
 80065f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065f4:	9109      	str	r1, [sp, #36]	; 0x24
 80065f6:	f7ff ff17 	bl	8006428 <__exponent>
 80065fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065fc:	1813      	adds	r3, r2, r0
 80065fe:	2a01      	cmp	r2, #1
 8006600:	4681      	mov	r9, r0
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	dc02      	bgt.n	800660c <_printf_float+0x168>
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	07d2      	lsls	r2, r2, #31
 800660a:	d501      	bpl.n	8006610 <_printf_float+0x16c>
 800660c:	3301      	adds	r3, #1
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006614:	2b00      	cmp	r3, #0
 8006616:	d09c      	beq.n	8006552 <_printf_float+0xae>
 8006618:	232d      	movs	r3, #45	; 0x2d
 800661a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661e:	e798      	b.n	8006552 <_printf_float+0xae>
 8006620:	9a06      	ldr	r2, [sp, #24]
 8006622:	2a47      	cmp	r2, #71	; 0x47
 8006624:	d1be      	bne.n	80065a4 <_printf_float+0x100>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1bc      	bne.n	80065a4 <_printf_float+0x100>
 800662a:	2301      	movs	r3, #1
 800662c:	e7b9      	b.n	80065a2 <_printf_float+0xfe>
 800662e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006632:	d118      	bne.n	8006666 <_printf_float+0x1c2>
 8006634:	2900      	cmp	r1, #0
 8006636:	6863      	ldr	r3, [r4, #4]
 8006638:	dd0b      	ble.n	8006652 <_printf_float+0x1ae>
 800663a:	6121      	str	r1, [r4, #16]
 800663c:	b913      	cbnz	r3, 8006644 <_printf_float+0x1a0>
 800663e:	6822      	ldr	r2, [r4, #0]
 8006640:	07d0      	lsls	r0, r2, #31
 8006642:	d502      	bpl.n	800664a <_printf_float+0x1a6>
 8006644:	3301      	adds	r3, #1
 8006646:	440b      	add	r3, r1
 8006648:	6123      	str	r3, [r4, #16]
 800664a:	65a1      	str	r1, [r4, #88]	; 0x58
 800664c:	f04f 0900 	mov.w	r9, #0
 8006650:	e7de      	b.n	8006610 <_printf_float+0x16c>
 8006652:	b913      	cbnz	r3, 800665a <_printf_float+0x1b6>
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	07d2      	lsls	r2, r2, #31
 8006658:	d501      	bpl.n	800665e <_printf_float+0x1ba>
 800665a:	3302      	adds	r3, #2
 800665c:	e7f4      	b.n	8006648 <_printf_float+0x1a4>
 800665e:	2301      	movs	r3, #1
 8006660:	e7f2      	b.n	8006648 <_printf_float+0x1a4>
 8006662:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006668:	4299      	cmp	r1, r3
 800666a:	db05      	blt.n	8006678 <_printf_float+0x1d4>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	6121      	str	r1, [r4, #16]
 8006670:	07d8      	lsls	r0, r3, #31
 8006672:	d5ea      	bpl.n	800664a <_printf_float+0x1a6>
 8006674:	1c4b      	adds	r3, r1, #1
 8006676:	e7e7      	b.n	8006648 <_printf_float+0x1a4>
 8006678:	2900      	cmp	r1, #0
 800667a:	bfd4      	ite	le
 800667c:	f1c1 0202 	rsble	r2, r1, #2
 8006680:	2201      	movgt	r2, #1
 8006682:	4413      	add	r3, r2
 8006684:	e7e0      	b.n	8006648 <_printf_float+0x1a4>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	055a      	lsls	r2, r3, #21
 800668a:	d407      	bmi.n	800669c <_printf_float+0x1f8>
 800668c:	6923      	ldr	r3, [r4, #16]
 800668e:	4642      	mov	r2, r8
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	47b8      	blx	r7
 8006696:	3001      	adds	r0, #1
 8006698:	d12c      	bne.n	80066f4 <_printf_float+0x250>
 800669a:	e764      	b.n	8006566 <_printf_float+0xc2>
 800669c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066a0:	f240 80e0 	bls.w	8006864 <_printf_float+0x3c0>
 80066a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066a8:	2200      	movs	r2, #0
 80066aa:	2300      	movs	r3, #0
 80066ac:	f7fa fa14 	bl	8000ad8 <__aeabi_dcmpeq>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d034      	beq.n	800671e <_printf_float+0x27a>
 80066b4:	4a37      	ldr	r2, [pc, #220]	; (8006794 <_printf_float+0x2f0>)
 80066b6:	2301      	movs	r3, #1
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	f43f af51 	beq.w	8006566 <_printf_float+0xc2>
 80066c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066c8:	429a      	cmp	r2, r3
 80066ca:	db02      	blt.n	80066d2 <_printf_float+0x22e>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	07d8      	lsls	r0, r3, #31
 80066d0:	d510      	bpl.n	80066f4 <_printf_float+0x250>
 80066d2:	ee18 3a10 	vmov	r3, s16
 80066d6:	4652      	mov	r2, sl
 80066d8:	4631      	mov	r1, r6
 80066da:	4628      	mov	r0, r5
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	f43f af41 	beq.w	8006566 <_printf_float+0xc2>
 80066e4:	f04f 0800 	mov.w	r8, #0
 80066e8:	f104 091a 	add.w	r9, r4, #26
 80066ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ee:	3b01      	subs	r3, #1
 80066f0:	4543      	cmp	r3, r8
 80066f2:	dc09      	bgt.n	8006708 <_printf_float+0x264>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	079b      	lsls	r3, r3, #30
 80066f8:	f100 8105 	bmi.w	8006906 <_printf_float+0x462>
 80066fc:	68e0      	ldr	r0, [r4, #12]
 80066fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006700:	4298      	cmp	r0, r3
 8006702:	bfb8      	it	lt
 8006704:	4618      	movlt	r0, r3
 8006706:	e730      	b.n	800656a <_printf_float+0xc6>
 8006708:	2301      	movs	r3, #1
 800670a:	464a      	mov	r2, r9
 800670c:	4631      	mov	r1, r6
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f af27 	beq.w	8006566 <_printf_float+0xc2>
 8006718:	f108 0801 	add.w	r8, r8, #1
 800671c:	e7e6      	b.n	80066ec <_printf_float+0x248>
 800671e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	dc39      	bgt.n	8006798 <_printf_float+0x2f4>
 8006724:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <_printf_float+0x2f0>)
 8006726:	2301      	movs	r3, #1
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f af19 	beq.w	8006566 <_printf_float+0xc2>
 8006734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006738:	4313      	orrs	r3, r2
 800673a:	d102      	bne.n	8006742 <_printf_float+0x29e>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	07d9      	lsls	r1, r3, #31
 8006740:	d5d8      	bpl.n	80066f4 <_printf_float+0x250>
 8006742:	ee18 3a10 	vmov	r3, s16
 8006746:	4652      	mov	r2, sl
 8006748:	4631      	mov	r1, r6
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	f43f af09 	beq.w	8006566 <_printf_float+0xc2>
 8006754:	f04f 0900 	mov.w	r9, #0
 8006758:	f104 0a1a 	add.w	sl, r4, #26
 800675c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675e:	425b      	negs	r3, r3
 8006760:	454b      	cmp	r3, r9
 8006762:	dc01      	bgt.n	8006768 <_printf_float+0x2c4>
 8006764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006766:	e792      	b.n	800668e <_printf_float+0x1ea>
 8006768:	2301      	movs	r3, #1
 800676a:	4652      	mov	r2, sl
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	f43f aef7 	beq.w	8006566 <_printf_float+0xc2>
 8006778:	f109 0901 	add.w	r9, r9, #1
 800677c:	e7ee      	b.n	800675c <_printf_float+0x2b8>
 800677e:	bf00      	nop
 8006780:	7fefffff 	.word	0x7fefffff
 8006784:	080093bc 	.word	0x080093bc
 8006788:	080093c0 	.word	0x080093c0
 800678c:	080093c8 	.word	0x080093c8
 8006790:	080093c4 	.word	0x080093c4
 8006794:	080093cc 	.word	0x080093cc
 8006798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800679a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800679c:	429a      	cmp	r2, r3
 800679e:	bfa8      	it	ge
 80067a0:	461a      	movge	r2, r3
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	4691      	mov	r9, r2
 80067a6:	dc37      	bgt.n	8006818 <_printf_float+0x374>
 80067a8:	f04f 0b00 	mov.w	fp, #0
 80067ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067b0:	f104 021a 	add.w	r2, r4, #26
 80067b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067b6:	9305      	str	r3, [sp, #20]
 80067b8:	eba3 0309 	sub.w	r3, r3, r9
 80067bc:	455b      	cmp	r3, fp
 80067be:	dc33      	bgt.n	8006828 <_printf_float+0x384>
 80067c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c4:	429a      	cmp	r2, r3
 80067c6:	db3b      	blt.n	8006840 <_printf_float+0x39c>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	07da      	lsls	r2, r3, #31
 80067cc:	d438      	bmi.n	8006840 <_printf_float+0x39c>
 80067ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d0:	9a05      	ldr	r2, [sp, #20]
 80067d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067d4:	1a9a      	subs	r2, r3, r2
 80067d6:	eba3 0901 	sub.w	r9, r3, r1
 80067da:	4591      	cmp	r9, r2
 80067dc:	bfa8      	it	ge
 80067de:	4691      	movge	r9, r2
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	dc35      	bgt.n	8006852 <_printf_float+0x3ae>
 80067e6:	f04f 0800 	mov.w	r8, #0
 80067ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067ee:	f104 0a1a 	add.w	sl, r4, #26
 80067f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	eba3 0309 	sub.w	r3, r3, r9
 80067fc:	4543      	cmp	r3, r8
 80067fe:	f77f af79 	ble.w	80066f4 <_printf_float+0x250>
 8006802:	2301      	movs	r3, #1
 8006804:	4652      	mov	r2, sl
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f aeaa 	beq.w	8006566 <_printf_float+0xc2>
 8006812:	f108 0801 	add.w	r8, r8, #1
 8006816:	e7ec      	b.n	80067f2 <_printf_float+0x34e>
 8006818:	4613      	mov	r3, r2
 800681a:	4631      	mov	r1, r6
 800681c:	4642      	mov	r2, r8
 800681e:	4628      	mov	r0, r5
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	d1c0      	bne.n	80067a8 <_printf_float+0x304>
 8006826:	e69e      	b.n	8006566 <_printf_float+0xc2>
 8006828:	2301      	movs	r3, #1
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	9205      	str	r2, [sp, #20]
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f ae97 	beq.w	8006566 <_printf_float+0xc2>
 8006838:	9a05      	ldr	r2, [sp, #20]
 800683a:	f10b 0b01 	add.w	fp, fp, #1
 800683e:	e7b9      	b.n	80067b4 <_printf_float+0x310>
 8006840:	ee18 3a10 	vmov	r3, s16
 8006844:	4652      	mov	r2, sl
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	47b8      	blx	r7
 800684c:	3001      	adds	r0, #1
 800684e:	d1be      	bne.n	80067ce <_printf_float+0x32a>
 8006850:	e689      	b.n	8006566 <_printf_float+0xc2>
 8006852:	9a05      	ldr	r2, [sp, #20]
 8006854:	464b      	mov	r3, r9
 8006856:	4442      	add	r2, r8
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	d1c1      	bne.n	80067e6 <_printf_float+0x342>
 8006862:	e680      	b.n	8006566 <_printf_float+0xc2>
 8006864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006866:	2a01      	cmp	r2, #1
 8006868:	dc01      	bgt.n	800686e <_printf_float+0x3ca>
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d538      	bpl.n	80068e0 <_printf_float+0x43c>
 800686e:	2301      	movs	r3, #1
 8006870:	4642      	mov	r2, r8
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	f43f ae74 	beq.w	8006566 <_printf_float+0xc2>
 800687e:	ee18 3a10 	vmov	r3, s16
 8006882:	4652      	mov	r2, sl
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	f43f ae6b 	beq.w	8006566 <_printf_float+0xc2>
 8006890:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	f7fa f91e 	bl	8000ad8 <__aeabi_dcmpeq>
 800689c:	b9d8      	cbnz	r0, 80068d6 <_printf_float+0x432>
 800689e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a0:	f108 0201 	add.w	r2, r8, #1
 80068a4:	3b01      	subs	r3, #1
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	d10e      	bne.n	80068ce <_printf_float+0x42a>
 80068b0:	e659      	b.n	8006566 <_printf_float+0xc2>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4652      	mov	r2, sl
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	f43f ae52 	beq.w	8006566 <_printf_float+0xc2>
 80068c2:	f108 0801 	add.w	r8, r8, #1
 80068c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c8:	3b01      	subs	r3, #1
 80068ca:	4543      	cmp	r3, r8
 80068cc:	dcf1      	bgt.n	80068b2 <_printf_float+0x40e>
 80068ce:	464b      	mov	r3, r9
 80068d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068d4:	e6dc      	b.n	8006690 <_printf_float+0x1ec>
 80068d6:	f04f 0800 	mov.w	r8, #0
 80068da:	f104 0a1a 	add.w	sl, r4, #26
 80068de:	e7f2      	b.n	80068c6 <_printf_float+0x422>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4642      	mov	r2, r8
 80068e4:	e7df      	b.n	80068a6 <_printf_float+0x402>
 80068e6:	2301      	movs	r3, #1
 80068e8:	464a      	mov	r2, r9
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f ae38 	beq.w	8006566 <_printf_float+0xc2>
 80068f6:	f108 0801 	add.w	r8, r8, #1
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068fe:	1a5b      	subs	r3, r3, r1
 8006900:	4543      	cmp	r3, r8
 8006902:	dcf0      	bgt.n	80068e6 <_printf_float+0x442>
 8006904:	e6fa      	b.n	80066fc <_printf_float+0x258>
 8006906:	f04f 0800 	mov.w	r8, #0
 800690a:	f104 0919 	add.w	r9, r4, #25
 800690e:	e7f4      	b.n	80068fa <_printf_float+0x456>

08006910 <_printf_common>:
 8006910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006914:	4616      	mov	r6, r2
 8006916:	4699      	mov	r9, r3
 8006918:	688a      	ldr	r2, [r1, #8]
 800691a:	690b      	ldr	r3, [r1, #16]
 800691c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006920:	4293      	cmp	r3, r2
 8006922:	bfb8      	it	lt
 8006924:	4613      	movlt	r3, r2
 8006926:	6033      	str	r3, [r6, #0]
 8006928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800692c:	4607      	mov	r7, r0
 800692e:	460c      	mov	r4, r1
 8006930:	b10a      	cbz	r2, 8006936 <_printf_common+0x26>
 8006932:	3301      	adds	r3, #1
 8006934:	6033      	str	r3, [r6, #0]
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	0699      	lsls	r1, r3, #26
 800693a:	bf42      	ittt	mi
 800693c:	6833      	ldrmi	r3, [r6, #0]
 800693e:	3302      	addmi	r3, #2
 8006940:	6033      	strmi	r3, [r6, #0]
 8006942:	6825      	ldr	r5, [r4, #0]
 8006944:	f015 0506 	ands.w	r5, r5, #6
 8006948:	d106      	bne.n	8006958 <_printf_common+0x48>
 800694a:	f104 0a19 	add.w	sl, r4, #25
 800694e:	68e3      	ldr	r3, [r4, #12]
 8006950:	6832      	ldr	r2, [r6, #0]
 8006952:	1a9b      	subs	r3, r3, r2
 8006954:	42ab      	cmp	r3, r5
 8006956:	dc26      	bgt.n	80069a6 <_printf_common+0x96>
 8006958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800695c:	1e13      	subs	r3, r2, #0
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	bf18      	it	ne
 8006962:	2301      	movne	r3, #1
 8006964:	0692      	lsls	r2, r2, #26
 8006966:	d42b      	bmi.n	80069c0 <_printf_common+0xb0>
 8006968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800696c:	4649      	mov	r1, r9
 800696e:	4638      	mov	r0, r7
 8006970:	47c0      	blx	r8
 8006972:	3001      	adds	r0, #1
 8006974:	d01e      	beq.n	80069b4 <_printf_common+0xa4>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	68e5      	ldr	r5, [r4, #12]
 800697a:	6832      	ldr	r2, [r6, #0]
 800697c:	f003 0306 	and.w	r3, r3, #6
 8006980:	2b04      	cmp	r3, #4
 8006982:	bf08      	it	eq
 8006984:	1aad      	subeq	r5, r5, r2
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	6922      	ldr	r2, [r4, #16]
 800698a:	bf0c      	ite	eq
 800698c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006990:	2500      	movne	r5, #0
 8006992:	4293      	cmp	r3, r2
 8006994:	bfc4      	itt	gt
 8006996:	1a9b      	subgt	r3, r3, r2
 8006998:	18ed      	addgt	r5, r5, r3
 800699a:	2600      	movs	r6, #0
 800699c:	341a      	adds	r4, #26
 800699e:	42b5      	cmp	r5, r6
 80069a0:	d11a      	bne.n	80069d8 <_printf_common+0xc8>
 80069a2:	2000      	movs	r0, #0
 80069a4:	e008      	b.n	80069b8 <_printf_common+0xa8>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4652      	mov	r2, sl
 80069aa:	4649      	mov	r1, r9
 80069ac:	4638      	mov	r0, r7
 80069ae:	47c0      	blx	r8
 80069b0:	3001      	adds	r0, #1
 80069b2:	d103      	bne.n	80069bc <_printf_common+0xac>
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
 80069b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069bc:	3501      	adds	r5, #1
 80069be:	e7c6      	b.n	800694e <_printf_common+0x3e>
 80069c0:	18e1      	adds	r1, r4, r3
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	2030      	movs	r0, #48	; 0x30
 80069c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ca:	4422      	add	r2, r4
 80069cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069d4:	3302      	adds	r3, #2
 80069d6:	e7c7      	b.n	8006968 <_printf_common+0x58>
 80069d8:	2301      	movs	r3, #1
 80069da:	4622      	mov	r2, r4
 80069dc:	4649      	mov	r1, r9
 80069de:	4638      	mov	r0, r7
 80069e0:	47c0      	blx	r8
 80069e2:	3001      	adds	r0, #1
 80069e4:	d0e6      	beq.n	80069b4 <_printf_common+0xa4>
 80069e6:	3601      	adds	r6, #1
 80069e8:	e7d9      	b.n	800699e <_printf_common+0x8e>
	...

080069ec <_printf_i>:
 80069ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	7e0f      	ldrb	r7, [r1, #24]
 80069f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069f4:	2f78      	cmp	r7, #120	; 0x78
 80069f6:	4691      	mov	r9, r2
 80069f8:	4680      	mov	r8, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	469a      	mov	sl, r3
 80069fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a02:	d807      	bhi.n	8006a14 <_printf_i+0x28>
 8006a04:	2f62      	cmp	r7, #98	; 0x62
 8006a06:	d80a      	bhi.n	8006a1e <_printf_i+0x32>
 8006a08:	2f00      	cmp	r7, #0
 8006a0a:	f000 80d8 	beq.w	8006bbe <_printf_i+0x1d2>
 8006a0e:	2f58      	cmp	r7, #88	; 0x58
 8006a10:	f000 80a3 	beq.w	8006b5a <_printf_i+0x16e>
 8006a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a1c:	e03a      	b.n	8006a94 <_printf_i+0xa8>
 8006a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a22:	2b15      	cmp	r3, #21
 8006a24:	d8f6      	bhi.n	8006a14 <_printf_i+0x28>
 8006a26:	a101      	add	r1, pc, #4	; (adr r1, 8006a2c <_printf_i+0x40>)
 8006a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a2c:	08006a85 	.word	0x08006a85
 8006a30:	08006a99 	.word	0x08006a99
 8006a34:	08006a15 	.word	0x08006a15
 8006a38:	08006a15 	.word	0x08006a15
 8006a3c:	08006a15 	.word	0x08006a15
 8006a40:	08006a15 	.word	0x08006a15
 8006a44:	08006a99 	.word	0x08006a99
 8006a48:	08006a15 	.word	0x08006a15
 8006a4c:	08006a15 	.word	0x08006a15
 8006a50:	08006a15 	.word	0x08006a15
 8006a54:	08006a15 	.word	0x08006a15
 8006a58:	08006ba5 	.word	0x08006ba5
 8006a5c:	08006ac9 	.word	0x08006ac9
 8006a60:	08006b87 	.word	0x08006b87
 8006a64:	08006a15 	.word	0x08006a15
 8006a68:	08006a15 	.word	0x08006a15
 8006a6c:	08006bc7 	.word	0x08006bc7
 8006a70:	08006a15 	.word	0x08006a15
 8006a74:	08006ac9 	.word	0x08006ac9
 8006a78:	08006a15 	.word	0x08006a15
 8006a7c:	08006a15 	.word	0x08006a15
 8006a80:	08006b8f 	.word	0x08006b8f
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	1d1a      	adds	r2, r3, #4
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	602a      	str	r2, [r5, #0]
 8006a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0a3      	b.n	8006be0 <_printf_i+0x1f4>
 8006a98:	6820      	ldr	r0, [r4, #0]
 8006a9a:	6829      	ldr	r1, [r5, #0]
 8006a9c:	0606      	lsls	r6, r0, #24
 8006a9e:	f101 0304 	add.w	r3, r1, #4
 8006aa2:	d50a      	bpl.n	8006aba <_printf_i+0xce>
 8006aa4:	680e      	ldr	r6, [r1, #0]
 8006aa6:	602b      	str	r3, [r5, #0]
 8006aa8:	2e00      	cmp	r6, #0
 8006aaa:	da03      	bge.n	8006ab4 <_printf_i+0xc8>
 8006aac:	232d      	movs	r3, #45	; 0x2d
 8006aae:	4276      	negs	r6, r6
 8006ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab4:	485e      	ldr	r0, [pc, #376]	; (8006c30 <_printf_i+0x244>)
 8006ab6:	230a      	movs	r3, #10
 8006ab8:	e019      	b.n	8006aee <_printf_i+0x102>
 8006aba:	680e      	ldr	r6, [r1, #0]
 8006abc:	602b      	str	r3, [r5, #0]
 8006abe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ac2:	bf18      	it	ne
 8006ac4:	b236      	sxthne	r6, r6
 8006ac6:	e7ef      	b.n	8006aa8 <_printf_i+0xbc>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	6820      	ldr	r0, [r4, #0]
 8006acc:	1d19      	adds	r1, r3, #4
 8006ace:	6029      	str	r1, [r5, #0]
 8006ad0:	0601      	lsls	r1, r0, #24
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_i+0xec>
 8006ad4:	681e      	ldr	r6, [r3, #0]
 8006ad6:	e002      	b.n	8006ade <_printf_i+0xf2>
 8006ad8:	0646      	lsls	r6, r0, #25
 8006ada:	d5fb      	bpl.n	8006ad4 <_printf_i+0xe8>
 8006adc:	881e      	ldrh	r6, [r3, #0]
 8006ade:	4854      	ldr	r0, [pc, #336]	; (8006c30 <_printf_i+0x244>)
 8006ae0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2308      	moveq	r3, #8
 8006ae6:	230a      	movne	r3, #10
 8006ae8:	2100      	movs	r1, #0
 8006aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aee:	6865      	ldr	r5, [r4, #4]
 8006af0:	60a5      	str	r5, [r4, #8]
 8006af2:	2d00      	cmp	r5, #0
 8006af4:	bfa2      	ittt	ge
 8006af6:	6821      	ldrge	r1, [r4, #0]
 8006af8:	f021 0104 	bicge.w	r1, r1, #4
 8006afc:	6021      	strge	r1, [r4, #0]
 8006afe:	b90e      	cbnz	r6, 8006b04 <_printf_i+0x118>
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	d04d      	beq.n	8006ba0 <_printf_i+0x1b4>
 8006b04:	4615      	mov	r5, r2
 8006b06:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b0a:	fb03 6711 	mls	r7, r3, r1, r6
 8006b0e:	5dc7      	ldrb	r7, [r0, r7]
 8006b10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b14:	4637      	mov	r7, r6
 8006b16:	42bb      	cmp	r3, r7
 8006b18:	460e      	mov	r6, r1
 8006b1a:	d9f4      	bls.n	8006b06 <_printf_i+0x11a>
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d10b      	bne.n	8006b38 <_printf_i+0x14c>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07de      	lsls	r6, r3, #31
 8006b24:	d508      	bpl.n	8006b38 <_printf_i+0x14c>
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	6861      	ldr	r1, [r4, #4]
 8006b2a:	4299      	cmp	r1, r3
 8006b2c:	bfde      	ittt	le
 8006b2e:	2330      	movle	r3, #48	; 0x30
 8006b30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b38:	1b52      	subs	r2, r2, r5
 8006b3a:	6122      	str	r2, [r4, #16]
 8006b3c:	f8cd a000 	str.w	sl, [sp]
 8006b40:	464b      	mov	r3, r9
 8006b42:	aa03      	add	r2, sp, #12
 8006b44:	4621      	mov	r1, r4
 8006b46:	4640      	mov	r0, r8
 8006b48:	f7ff fee2 	bl	8006910 <_printf_common>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d14c      	bne.n	8006bea <_printf_i+0x1fe>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	b004      	add	sp, #16
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	4835      	ldr	r0, [pc, #212]	; (8006c30 <_printf_i+0x244>)
 8006b5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b60:	6829      	ldr	r1, [r5, #0]
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b68:	6029      	str	r1, [r5, #0]
 8006b6a:	061d      	lsls	r5, r3, #24
 8006b6c:	d514      	bpl.n	8006b98 <_printf_i+0x1ac>
 8006b6e:	07df      	lsls	r7, r3, #31
 8006b70:	bf44      	itt	mi
 8006b72:	f043 0320 	orrmi.w	r3, r3, #32
 8006b76:	6023      	strmi	r3, [r4, #0]
 8006b78:	b91e      	cbnz	r6, 8006b82 <_printf_i+0x196>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	f023 0320 	bic.w	r3, r3, #32
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	2310      	movs	r3, #16
 8006b84:	e7b0      	b.n	8006ae8 <_printf_i+0xfc>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	f043 0320 	orr.w	r3, r3, #32
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	2378      	movs	r3, #120	; 0x78
 8006b90:	4828      	ldr	r0, [pc, #160]	; (8006c34 <_printf_i+0x248>)
 8006b92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b96:	e7e3      	b.n	8006b60 <_printf_i+0x174>
 8006b98:	0659      	lsls	r1, r3, #25
 8006b9a:	bf48      	it	mi
 8006b9c:	b2b6      	uxthmi	r6, r6
 8006b9e:	e7e6      	b.n	8006b6e <_printf_i+0x182>
 8006ba0:	4615      	mov	r5, r2
 8006ba2:	e7bb      	b.n	8006b1c <_printf_i+0x130>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	6826      	ldr	r6, [r4, #0]
 8006ba8:	6961      	ldr	r1, [r4, #20]
 8006baa:	1d18      	adds	r0, r3, #4
 8006bac:	6028      	str	r0, [r5, #0]
 8006bae:	0635      	lsls	r5, r6, #24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	d501      	bpl.n	8006bb8 <_printf_i+0x1cc>
 8006bb4:	6019      	str	r1, [r3, #0]
 8006bb6:	e002      	b.n	8006bbe <_printf_i+0x1d2>
 8006bb8:	0670      	lsls	r0, r6, #25
 8006bba:	d5fb      	bpl.n	8006bb4 <_printf_i+0x1c8>
 8006bbc:	8019      	strh	r1, [r3, #0]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	6123      	str	r3, [r4, #16]
 8006bc2:	4615      	mov	r5, r2
 8006bc4:	e7ba      	b.n	8006b3c <_printf_i+0x150>
 8006bc6:	682b      	ldr	r3, [r5, #0]
 8006bc8:	1d1a      	adds	r2, r3, #4
 8006bca:	602a      	str	r2, [r5, #0]
 8006bcc:	681d      	ldr	r5, [r3, #0]
 8006bce:	6862      	ldr	r2, [r4, #4]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f7f9 fb0c 	bl	80001f0 <memchr>
 8006bd8:	b108      	cbz	r0, 8006bde <_printf_i+0x1f2>
 8006bda:	1b40      	subs	r0, r0, r5
 8006bdc:	6060      	str	r0, [r4, #4]
 8006bde:	6863      	ldr	r3, [r4, #4]
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	2300      	movs	r3, #0
 8006be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be8:	e7a8      	b.n	8006b3c <_printf_i+0x150>
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	462a      	mov	r2, r5
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	47d0      	blx	sl
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d0ab      	beq.n	8006b50 <_printf_i+0x164>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	079b      	lsls	r3, r3, #30
 8006bfc:	d413      	bmi.n	8006c26 <_printf_i+0x23a>
 8006bfe:	68e0      	ldr	r0, [r4, #12]
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	4298      	cmp	r0, r3
 8006c04:	bfb8      	it	lt
 8006c06:	4618      	movlt	r0, r3
 8006c08:	e7a4      	b.n	8006b54 <_printf_i+0x168>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	4649      	mov	r1, r9
 8006c10:	4640      	mov	r0, r8
 8006c12:	47d0      	blx	sl
 8006c14:	3001      	adds	r0, #1
 8006c16:	d09b      	beq.n	8006b50 <_printf_i+0x164>
 8006c18:	3501      	adds	r5, #1
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	9903      	ldr	r1, [sp, #12]
 8006c1e:	1a5b      	subs	r3, r3, r1
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dcf2      	bgt.n	8006c0a <_printf_i+0x21e>
 8006c24:	e7eb      	b.n	8006bfe <_printf_i+0x212>
 8006c26:	2500      	movs	r5, #0
 8006c28:	f104 0619 	add.w	r6, r4, #25
 8006c2c:	e7f5      	b.n	8006c1a <_printf_i+0x22e>
 8006c2e:	bf00      	nop
 8006c30:	080093ce 	.word	0x080093ce
 8006c34:	080093df 	.word	0x080093df

08006c38 <_puts_r>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	460e      	mov	r6, r1
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	b118      	cbz	r0, 8006c48 <_puts_r+0x10>
 8006c40:	6983      	ldr	r3, [r0, #24]
 8006c42:	b90b      	cbnz	r3, 8006c48 <_puts_r+0x10>
 8006c44:	f001 f970 	bl	8007f28 <__sinit>
 8006c48:	69ab      	ldr	r3, [r5, #24]
 8006c4a:	68ac      	ldr	r4, [r5, #8]
 8006c4c:	b913      	cbnz	r3, 8006c54 <_puts_r+0x1c>
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f001 f96a 	bl	8007f28 <__sinit>
 8006c54:	4b2c      	ldr	r3, [pc, #176]	; (8006d08 <_puts_r+0xd0>)
 8006c56:	429c      	cmp	r4, r3
 8006c58:	d120      	bne.n	8006c9c <_puts_r+0x64>
 8006c5a:	686c      	ldr	r4, [r5, #4]
 8006c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c5e:	07db      	lsls	r3, r3, #31
 8006c60:	d405      	bmi.n	8006c6e <_puts_r+0x36>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	0598      	lsls	r0, r3, #22
 8006c66:	d402      	bmi.n	8006c6e <_puts_r+0x36>
 8006c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c6a:	f001 fa00 	bl	800806e <__retarget_lock_acquire_recursive>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	0719      	lsls	r1, r3, #28
 8006c72:	d51d      	bpl.n	8006cb0 <_puts_r+0x78>
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	b1db      	cbz	r3, 8006cb0 <_puts_r+0x78>
 8006c78:	3e01      	subs	r6, #1
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c80:	3b01      	subs	r3, #1
 8006c82:	60a3      	str	r3, [r4, #8]
 8006c84:	bb39      	cbnz	r1, 8006cd6 <_puts_r+0x9e>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da38      	bge.n	8006cfc <_puts_r+0xc4>
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	210a      	movs	r1, #10
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 f8f4 	bl	8006e7c <__swbuf_r>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d011      	beq.n	8006cbc <_puts_r+0x84>
 8006c98:	250a      	movs	r5, #10
 8006c9a:	e011      	b.n	8006cc0 <_puts_r+0x88>
 8006c9c:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <_puts_r+0xd4>)
 8006c9e:	429c      	cmp	r4, r3
 8006ca0:	d101      	bne.n	8006ca6 <_puts_r+0x6e>
 8006ca2:	68ac      	ldr	r4, [r5, #8]
 8006ca4:	e7da      	b.n	8006c5c <_puts_r+0x24>
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <_puts_r+0xd8>)
 8006ca8:	429c      	cmp	r4, r3
 8006caa:	bf08      	it	eq
 8006cac:	68ec      	ldreq	r4, [r5, #12]
 8006cae:	e7d5      	b.n	8006c5c <_puts_r+0x24>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 f934 	bl	8006f20 <__swsetup_r>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d0dd      	beq.n	8006c78 <_puts_r+0x40>
 8006cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8006cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cc2:	07da      	lsls	r2, r3, #31
 8006cc4:	d405      	bmi.n	8006cd2 <_puts_r+0x9a>
 8006cc6:	89a3      	ldrh	r3, [r4, #12]
 8006cc8:	059b      	lsls	r3, r3, #22
 8006cca:	d402      	bmi.n	8006cd2 <_puts_r+0x9a>
 8006ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cce:	f001 f9cf 	bl	8008070 <__retarget_lock_release_recursive>
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	bd70      	pop	{r4, r5, r6, pc}
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	da04      	bge.n	8006ce4 <_puts_r+0xac>
 8006cda:	69a2      	ldr	r2, [r4, #24]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	dc06      	bgt.n	8006cee <_puts_r+0xb6>
 8006ce0:	290a      	cmp	r1, #10
 8006ce2:	d004      	beq.n	8006cee <_puts_r+0xb6>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	7019      	strb	r1, [r3, #0]
 8006cec:	e7c5      	b.n	8006c7a <_puts_r+0x42>
 8006cee:	4622      	mov	r2, r4
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f000 f8c3 	bl	8006e7c <__swbuf_r>
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	d1bf      	bne.n	8006c7a <_puts_r+0x42>
 8006cfa:	e7df      	b.n	8006cbc <_puts_r+0x84>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	250a      	movs	r5, #10
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	6022      	str	r2, [r4, #0]
 8006d04:	701d      	strb	r5, [r3, #0]
 8006d06:	e7db      	b.n	8006cc0 <_puts_r+0x88>
 8006d08:	080095a4 	.word	0x080095a4
 8006d0c:	080095c4 	.word	0x080095c4
 8006d10:	08009584 	.word	0x08009584

08006d14 <puts>:
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <puts+0xc>)
 8006d16:	4601      	mov	r1, r0
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	f7ff bf8d 	b.w	8006c38 <_puts_r>
 8006d1e:	bf00      	nop
 8006d20:	2000000c 	.word	0x2000000c

08006d24 <siprintf>:
 8006d24:	b40e      	push	{r1, r2, r3}
 8006d26:	b500      	push	{lr}
 8006d28:	b09c      	sub	sp, #112	; 0x70
 8006d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d2c:	9002      	str	r0, [sp, #8]
 8006d2e:	9006      	str	r0, [sp, #24]
 8006d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d34:	4809      	ldr	r0, [pc, #36]	; (8006d5c <siprintf+0x38>)
 8006d36:	9107      	str	r1, [sp, #28]
 8006d38:	9104      	str	r1, [sp, #16]
 8006d3a:	4909      	ldr	r1, [pc, #36]	; (8006d60 <siprintf+0x3c>)
 8006d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d40:	9105      	str	r1, [sp, #20]
 8006d42:	6800      	ldr	r0, [r0, #0]
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	a902      	add	r1, sp, #8
 8006d48:	f001 fee4 	bl	8008b14 <_svfiprintf_r>
 8006d4c:	9b02      	ldr	r3, [sp, #8]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	b01c      	add	sp, #112	; 0x70
 8006d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d58:	b003      	add	sp, #12
 8006d5a:	4770      	bx	lr
 8006d5c:	2000000c 	.word	0x2000000c
 8006d60:	ffff0208 	.word	0xffff0208

08006d64 <_strtol_l.constprop.0>:
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6a:	d001      	beq.n	8006d70 <_strtol_l.constprop.0+0xc>
 8006d6c:	2b24      	cmp	r3, #36	; 0x24
 8006d6e:	d906      	bls.n	8006d7e <_strtol_l.constprop.0+0x1a>
 8006d70:	f7ff fac6 	bl	8006300 <__errno>
 8006d74:	2316      	movs	r3, #22
 8006d76:	6003      	str	r3, [r0, #0]
 8006d78:	2000      	movs	r0, #0
 8006d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e64 <_strtol_l.constprop.0+0x100>
 8006d82:	460d      	mov	r5, r1
 8006d84:	462e      	mov	r6, r5
 8006d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d8a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006d8e:	f017 0708 	ands.w	r7, r7, #8
 8006d92:	d1f7      	bne.n	8006d84 <_strtol_l.constprop.0+0x20>
 8006d94:	2c2d      	cmp	r4, #45	; 0x2d
 8006d96:	d132      	bne.n	8006dfe <_strtol_l.constprop.0+0x9a>
 8006d98:	782c      	ldrb	r4, [r5, #0]
 8006d9a:	2701      	movs	r7, #1
 8006d9c:	1cb5      	adds	r5, r6, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d05b      	beq.n	8006e5a <_strtol_l.constprop.0+0xf6>
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d109      	bne.n	8006dba <_strtol_l.constprop.0+0x56>
 8006da6:	2c30      	cmp	r4, #48	; 0x30
 8006da8:	d107      	bne.n	8006dba <_strtol_l.constprop.0+0x56>
 8006daa:	782c      	ldrb	r4, [r5, #0]
 8006dac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006db0:	2c58      	cmp	r4, #88	; 0x58
 8006db2:	d14d      	bne.n	8006e50 <_strtol_l.constprop.0+0xec>
 8006db4:	786c      	ldrb	r4, [r5, #1]
 8006db6:	2310      	movs	r3, #16
 8006db8:	3502      	adds	r5, #2
 8006dba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006dbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dc2:	f04f 0c00 	mov.w	ip, #0
 8006dc6:	fbb8 f9f3 	udiv	r9, r8, r3
 8006dca:	4666      	mov	r6, ip
 8006dcc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006dd0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006dd4:	f1be 0f09 	cmp.w	lr, #9
 8006dd8:	d816      	bhi.n	8006e08 <_strtol_l.constprop.0+0xa4>
 8006dda:	4674      	mov	r4, lr
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	dd24      	ble.n	8006e2a <_strtol_l.constprop.0+0xc6>
 8006de0:	f1bc 0f00 	cmp.w	ip, #0
 8006de4:	db1e      	blt.n	8006e24 <_strtol_l.constprop.0+0xc0>
 8006de6:	45b1      	cmp	r9, r6
 8006de8:	d31c      	bcc.n	8006e24 <_strtol_l.constprop.0+0xc0>
 8006dea:	d101      	bne.n	8006df0 <_strtol_l.constprop.0+0x8c>
 8006dec:	45a2      	cmp	sl, r4
 8006dee:	db19      	blt.n	8006e24 <_strtol_l.constprop.0+0xc0>
 8006df0:	fb06 4603 	mla	r6, r6, r3, r4
 8006df4:	f04f 0c01 	mov.w	ip, #1
 8006df8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dfc:	e7e8      	b.n	8006dd0 <_strtol_l.constprop.0+0x6c>
 8006dfe:	2c2b      	cmp	r4, #43	; 0x2b
 8006e00:	bf04      	itt	eq
 8006e02:	782c      	ldrbeq	r4, [r5, #0]
 8006e04:	1cb5      	addeq	r5, r6, #2
 8006e06:	e7ca      	b.n	8006d9e <_strtol_l.constprop.0+0x3a>
 8006e08:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006e0c:	f1be 0f19 	cmp.w	lr, #25
 8006e10:	d801      	bhi.n	8006e16 <_strtol_l.constprop.0+0xb2>
 8006e12:	3c37      	subs	r4, #55	; 0x37
 8006e14:	e7e2      	b.n	8006ddc <_strtol_l.constprop.0+0x78>
 8006e16:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006e1a:	f1be 0f19 	cmp.w	lr, #25
 8006e1e:	d804      	bhi.n	8006e2a <_strtol_l.constprop.0+0xc6>
 8006e20:	3c57      	subs	r4, #87	; 0x57
 8006e22:	e7db      	b.n	8006ddc <_strtol_l.constprop.0+0x78>
 8006e24:	f04f 3cff 	mov.w	ip, #4294967295
 8006e28:	e7e6      	b.n	8006df8 <_strtol_l.constprop.0+0x94>
 8006e2a:	f1bc 0f00 	cmp.w	ip, #0
 8006e2e:	da05      	bge.n	8006e3c <_strtol_l.constprop.0+0xd8>
 8006e30:	2322      	movs	r3, #34	; 0x22
 8006e32:	6003      	str	r3, [r0, #0]
 8006e34:	4646      	mov	r6, r8
 8006e36:	b942      	cbnz	r2, 8006e4a <_strtol_l.constprop.0+0xe6>
 8006e38:	4630      	mov	r0, r6
 8006e3a:	e79e      	b.n	8006d7a <_strtol_l.constprop.0+0x16>
 8006e3c:	b107      	cbz	r7, 8006e40 <_strtol_l.constprop.0+0xdc>
 8006e3e:	4276      	negs	r6, r6
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	d0f9      	beq.n	8006e38 <_strtol_l.constprop.0+0xd4>
 8006e44:	f1bc 0f00 	cmp.w	ip, #0
 8006e48:	d000      	beq.n	8006e4c <_strtol_l.constprop.0+0xe8>
 8006e4a:	1e69      	subs	r1, r5, #1
 8006e4c:	6011      	str	r1, [r2, #0]
 8006e4e:	e7f3      	b.n	8006e38 <_strtol_l.constprop.0+0xd4>
 8006e50:	2430      	movs	r4, #48	; 0x30
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1b1      	bne.n	8006dba <_strtol_l.constprop.0+0x56>
 8006e56:	2308      	movs	r3, #8
 8006e58:	e7af      	b.n	8006dba <_strtol_l.constprop.0+0x56>
 8006e5a:	2c30      	cmp	r4, #48	; 0x30
 8006e5c:	d0a5      	beq.n	8006daa <_strtol_l.constprop.0+0x46>
 8006e5e:	230a      	movs	r3, #10
 8006e60:	e7ab      	b.n	8006dba <_strtol_l.constprop.0+0x56>
 8006e62:	bf00      	nop
 8006e64:	080093f1 	.word	0x080093f1

08006e68 <strtol>:
 8006e68:	4613      	mov	r3, r2
 8006e6a:	460a      	mov	r2, r1
 8006e6c:	4601      	mov	r1, r0
 8006e6e:	4802      	ldr	r0, [pc, #8]	; (8006e78 <strtol+0x10>)
 8006e70:	6800      	ldr	r0, [r0, #0]
 8006e72:	f7ff bf77 	b.w	8006d64 <_strtol_l.constprop.0>
 8006e76:	bf00      	nop
 8006e78:	2000000c 	.word	0x2000000c

08006e7c <__swbuf_r>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	460e      	mov	r6, r1
 8006e80:	4614      	mov	r4, r2
 8006e82:	4605      	mov	r5, r0
 8006e84:	b118      	cbz	r0, 8006e8e <__swbuf_r+0x12>
 8006e86:	6983      	ldr	r3, [r0, #24]
 8006e88:	b90b      	cbnz	r3, 8006e8e <__swbuf_r+0x12>
 8006e8a:	f001 f84d 	bl	8007f28 <__sinit>
 8006e8e:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <__swbuf_r+0x98>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d12b      	bne.n	8006eec <__swbuf_r+0x70>
 8006e94:	686c      	ldr	r4, [r5, #4]
 8006e96:	69a3      	ldr	r3, [r4, #24]
 8006e98:	60a3      	str	r3, [r4, #8]
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	071a      	lsls	r2, r3, #28
 8006e9e:	d52f      	bpl.n	8006f00 <__swbuf_r+0x84>
 8006ea0:	6923      	ldr	r3, [r4, #16]
 8006ea2:	b36b      	cbz	r3, 8006f00 <__swbuf_r+0x84>
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	6820      	ldr	r0, [r4, #0]
 8006ea8:	1ac0      	subs	r0, r0, r3
 8006eaa:	6963      	ldr	r3, [r4, #20]
 8006eac:	b2f6      	uxtb	r6, r6
 8006eae:	4283      	cmp	r3, r0
 8006eb0:	4637      	mov	r7, r6
 8006eb2:	dc04      	bgt.n	8006ebe <__swbuf_r+0x42>
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 ffa2 	bl	8007e00 <_fflush_r>
 8006ebc:	bb30      	cbnz	r0, 8006f0c <__swbuf_r+0x90>
 8006ebe:	68a3      	ldr	r3, [r4, #8]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	60a3      	str	r3, [r4, #8]
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	6022      	str	r2, [r4, #0]
 8006eca:	701e      	strb	r6, [r3, #0]
 8006ecc:	6963      	ldr	r3, [r4, #20]
 8006ece:	3001      	adds	r0, #1
 8006ed0:	4283      	cmp	r3, r0
 8006ed2:	d004      	beq.n	8006ede <__swbuf_r+0x62>
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	07db      	lsls	r3, r3, #31
 8006ed8:	d506      	bpl.n	8006ee8 <__swbuf_r+0x6c>
 8006eda:	2e0a      	cmp	r6, #10
 8006edc:	d104      	bne.n	8006ee8 <__swbuf_r+0x6c>
 8006ede:	4621      	mov	r1, r4
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f000 ff8d 	bl	8007e00 <_fflush_r>
 8006ee6:	b988      	cbnz	r0, 8006f0c <__swbuf_r+0x90>
 8006ee8:	4638      	mov	r0, r7
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <__swbuf_r+0x9c>)
 8006eee:	429c      	cmp	r4, r3
 8006ef0:	d101      	bne.n	8006ef6 <__swbuf_r+0x7a>
 8006ef2:	68ac      	ldr	r4, [r5, #8]
 8006ef4:	e7cf      	b.n	8006e96 <__swbuf_r+0x1a>
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <__swbuf_r+0xa0>)
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	bf08      	it	eq
 8006efc:	68ec      	ldreq	r4, [r5, #12]
 8006efe:	e7ca      	b.n	8006e96 <__swbuf_r+0x1a>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4628      	mov	r0, r5
 8006f04:	f000 f80c 	bl	8006f20 <__swsetup_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d0cb      	beq.n	8006ea4 <__swbuf_r+0x28>
 8006f0c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f10:	e7ea      	b.n	8006ee8 <__swbuf_r+0x6c>
 8006f12:	bf00      	nop
 8006f14:	080095a4 	.word	0x080095a4
 8006f18:	080095c4 	.word	0x080095c4
 8006f1c:	08009584 	.word	0x08009584

08006f20 <__swsetup_r>:
 8006f20:	4b32      	ldr	r3, [pc, #200]	; (8006fec <__swsetup_r+0xcc>)
 8006f22:	b570      	push	{r4, r5, r6, lr}
 8006f24:	681d      	ldr	r5, [r3, #0]
 8006f26:	4606      	mov	r6, r0
 8006f28:	460c      	mov	r4, r1
 8006f2a:	b125      	cbz	r5, 8006f36 <__swsetup_r+0x16>
 8006f2c:	69ab      	ldr	r3, [r5, #24]
 8006f2e:	b913      	cbnz	r3, 8006f36 <__swsetup_r+0x16>
 8006f30:	4628      	mov	r0, r5
 8006f32:	f000 fff9 	bl	8007f28 <__sinit>
 8006f36:	4b2e      	ldr	r3, [pc, #184]	; (8006ff0 <__swsetup_r+0xd0>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	d10f      	bne.n	8006f5c <__swsetup_r+0x3c>
 8006f3c:	686c      	ldr	r4, [r5, #4]
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f44:	0719      	lsls	r1, r3, #28
 8006f46:	d42c      	bmi.n	8006fa2 <__swsetup_r+0x82>
 8006f48:	06dd      	lsls	r5, r3, #27
 8006f4a:	d411      	bmi.n	8006f70 <__swsetup_r+0x50>
 8006f4c:	2309      	movs	r3, #9
 8006f4e:	6033      	str	r3, [r6, #0]
 8006f50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f54:	81a3      	strh	r3, [r4, #12]
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	e03e      	b.n	8006fda <__swsetup_r+0xba>
 8006f5c:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <__swsetup_r+0xd4>)
 8006f5e:	429c      	cmp	r4, r3
 8006f60:	d101      	bne.n	8006f66 <__swsetup_r+0x46>
 8006f62:	68ac      	ldr	r4, [r5, #8]
 8006f64:	e7eb      	b.n	8006f3e <__swsetup_r+0x1e>
 8006f66:	4b24      	ldr	r3, [pc, #144]	; (8006ff8 <__swsetup_r+0xd8>)
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	bf08      	it	eq
 8006f6c:	68ec      	ldreq	r4, [r5, #12]
 8006f6e:	e7e6      	b.n	8006f3e <__swsetup_r+0x1e>
 8006f70:	0758      	lsls	r0, r3, #29
 8006f72:	d512      	bpl.n	8006f9a <__swsetup_r+0x7a>
 8006f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f76:	b141      	cbz	r1, 8006f8a <__swsetup_r+0x6a>
 8006f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	d002      	beq.n	8006f86 <__swsetup_r+0x66>
 8006f80:	4630      	mov	r0, r6
 8006f82:	f001 fc8b 	bl	800889c <_free_r>
 8006f86:	2300      	movs	r3, #0
 8006f88:	6363      	str	r3, [r4, #52]	; 0x34
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	2300      	movs	r3, #0
 8006f94:	6063      	str	r3, [r4, #4]
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0308 	orr.w	r3, r3, #8
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	b94b      	cbnz	r3, 8006fba <__swsetup_r+0x9a>
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fb0:	d003      	beq.n	8006fba <__swsetup_r+0x9a>
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f001 f881 	bl	80080bc <__smakebuf_r>
 8006fba:	89a0      	ldrh	r0, [r4, #12]
 8006fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fc0:	f010 0301 	ands.w	r3, r0, #1
 8006fc4:	d00a      	beq.n	8006fdc <__swsetup_r+0xbc>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60a3      	str	r3, [r4, #8]
 8006fca:	6963      	ldr	r3, [r4, #20]
 8006fcc:	425b      	negs	r3, r3
 8006fce:	61a3      	str	r3, [r4, #24]
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	b943      	cbnz	r3, 8006fe6 <__swsetup_r+0xc6>
 8006fd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fd8:	d1ba      	bne.n	8006f50 <__swsetup_r+0x30>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	0781      	lsls	r1, r0, #30
 8006fde:	bf58      	it	pl
 8006fe0:	6963      	ldrpl	r3, [r4, #20]
 8006fe2:	60a3      	str	r3, [r4, #8]
 8006fe4:	e7f4      	b.n	8006fd0 <__swsetup_r+0xb0>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e7f7      	b.n	8006fda <__swsetup_r+0xba>
 8006fea:	bf00      	nop
 8006fec:	2000000c 	.word	0x2000000c
 8006ff0:	080095a4 	.word	0x080095a4
 8006ff4:	080095c4 	.word	0x080095c4
 8006ff8:	08009584 	.word	0x08009584

08006ffc <quorem>:
 8006ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	6903      	ldr	r3, [r0, #16]
 8007002:	690c      	ldr	r4, [r1, #16]
 8007004:	42a3      	cmp	r3, r4
 8007006:	4607      	mov	r7, r0
 8007008:	f2c0 8081 	blt.w	800710e <quorem+0x112>
 800700c:	3c01      	subs	r4, #1
 800700e:	f101 0814 	add.w	r8, r1, #20
 8007012:	f100 0514 	add.w	r5, r0, #20
 8007016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007024:	3301      	adds	r3, #1
 8007026:	429a      	cmp	r2, r3
 8007028:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800702c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007030:	fbb2 f6f3 	udiv	r6, r2, r3
 8007034:	d331      	bcc.n	800709a <quorem+0x9e>
 8007036:	f04f 0e00 	mov.w	lr, #0
 800703a:	4640      	mov	r0, r8
 800703c:	46ac      	mov	ip, r5
 800703e:	46f2      	mov	sl, lr
 8007040:	f850 2b04 	ldr.w	r2, [r0], #4
 8007044:	b293      	uxth	r3, r2
 8007046:	fb06 e303 	mla	r3, r6, r3, lr
 800704a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800704e:	b29b      	uxth	r3, r3
 8007050:	ebaa 0303 	sub.w	r3, sl, r3
 8007054:	f8dc a000 	ldr.w	sl, [ip]
 8007058:	0c12      	lsrs	r2, r2, #16
 800705a:	fa13 f38a 	uxtah	r3, r3, sl
 800705e:	fb06 e202 	mla	r2, r6, r2, lr
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800706a:	b292      	uxth	r2, r2
 800706c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007074:	f8bd 3000 	ldrh.w	r3, [sp]
 8007078:	4581      	cmp	r9, r0
 800707a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707e:	f84c 3b04 	str.w	r3, [ip], #4
 8007082:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007086:	d2db      	bcs.n	8007040 <quorem+0x44>
 8007088:	f855 300b 	ldr.w	r3, [r5, fp]
 800708c:	b92b      	cbnz	r3, 800709a <quorem+0x9e>
 800708e:	9b01      	ldr	r3, [sp, #4]
 8007090:	3b04      	subs	r3, #4
 8007092:	429d      	cmp	r5, r3
 8007094:	461a      	mov	r2, r3
 8007096:	d32e      	bcc.n	80070f6 <quorem+0xfa>
 8007098:	613c      	str	r4, [r7, #16]
 800709a:	4638      	mov	r0, r7
 800709c:	f001 fae6 	bl	800866c <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	db24      	blt.n	80070ee <quorem+0xf2>
 80070a4:	3601      	adds	r6, #1
 80070a6:	4628      	mov	r0, r5
 80070a8:	f04f 0c00 	mov.w	ip, #0
 80070ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80070b0:	f8d0 e000 	ldr.w	lr, [r0]
 80070b4:	b293      	uxth	r3, r2
 80070b6:	ebac 0303 	sub.w	r3, ip, r3
 80070ba:	0c12      	lsrs	r2, r2, #16
 80070bc:	fa13 f38e 	uxtah	r3, r3, lr
 80070c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ce:	45c1      	cmp	r9, r8
 80070d0:	f840 3b04 	str.w	r3, [r0], #4
 80070d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070d8:	d2e8      	bcs.n	80070ac <quorem+0xb0>
 80070da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070e2:	b922      	cbnz	r2, 80070ee <quorem+0xf2>
 80070e4:	3b04      	subs	r3, #4
 80070e6:	429d      	cmp	r5, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	d30a      	bcc.n	8007102 <quorem+0x106>
 80070ec:	613c      	str	r4, [r7, #16]
 80070ee:	4630      	mov	r0, r6
 80070f0:	b003      	add	sp, #12
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	3b04      	subs	r3, #4
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	d1cc      	bne.n	8007098 <quorem+0x9c>
 80070fe:	3c01      	subs	r4, #1
 8007100:	e7c7      	b.n	8007092 <quorem+0x96>
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	3b04      	subs	r3, #4
 8007106:	2a00      	cmp	r2, #0
 8007108:	d1f0      	bne.n	80070ec <quorem+0xf0>
 800710a:	3c01      	subs	r4, #1
 800710c:	e7eb      	b.n	80070e6 <quorem+0xea>
 800710e:	2000      	movs	r0, #0
 8007110:	e7ee      	b.n	80070f0 <quorem+0xf4>
 8007112:	0000      	movs	r0, r0
 8007114:	0000      	movs	r0, r0
	...

08007118 <_dtoa_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	ed2d 8b04 	vpush	{d8-d9}
 8007120:	ec57 6b10 	vmov	r6, r7, d0
 8007124:	b093      	sub	sp, #76	; 0x4c
 8007126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800712c:	9106      	str	r1, [sp, #24]
 800712e:	ee10 aa10 	vmov	sl, s0
 8007132:	4604      	mov	r4, r0
 8007134:	9209      	str	r2, [sp, #36]	; 0x24
 8007136:	930c      	str	r3, [sp, #48]	; 0x30
 8007138:	46bb      	mov	fp, r7
 800713a:	b975      	cbnz	r5, 800715a <_dtoa_r+0x42>
 800713c:	2010      	movs	r0, #16
 800713e:	f000 fffd 	bl	800813c <malloc>
 8007142:	4602      	mov	r2, r0
 8007144:	6260      	str	r0, [r4, #36]	; 0x24
 8007146:	b920      	cbnz	r0, 8007152 <_dtoa_r+0x3a>
 8007148:	4ba7      	ldr	r3, [pc, #668]	; (80073e8 <_dtoa_r+0x2d0>)
 800714a:	21ea      	movs	r1, #234	; 0xea
 800714c:	48a7      	ldr	r0, [pc, #668]	; (80073ec <_dtoa_r+0x2d4>)
 800714e:	f001 fe47 	bl	8008de0 <__assert_func>
 8007152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007156:	6005      	str	r5, [r0, #0]
 8007158:	60c5      	str	r5, [r0, #12]
 800715a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800715c:	6819      	ldr	r1, [r3, #0]
 800715e:	b151      	cbz	r1, 8007176 <_dtoa_r+0x5e>
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	604a      	str	r2, [r1, #4]
 8007164:	2301      	movs	r3, #1
 8007166:	4093      	lsls	r3, r2
 8007168:	608b      	str	r3, [r1, #8]
 800716a:	4620      	mov	r0, r4
 800716c:	f001 f83c 	bl	80081e8 <_Bfree>
 8007170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	1e3b      	subs	r3, r7, #0
 8007178:	bfaa      	itet	ge
 800717a:	2300      	movge	r3, #0
 800717c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007180:	f8c8 3000 	strge.w	r3, [r8]
 8007184:	4b9a      	ldr	r3, [pc, #616]	; (80073f0 <_dtoa_r+0x2d8>)
 8007186:	bfbc      	itt	lt
 8007188:	2201      	movlt	r2, #1
 800718a:	f8c8 2000 	strlt.w	r2, [r8]
 800718e:	ea33 030b 	bics.w	r3, r3, fp
 8007192:	d11b      	bne.n	80071cc <_dtoa_r+0xb4>
 8007194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007196:	f242 730f 	movw	r3, #9999	; 0x270f
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071a0:	4333      	orrs	r3, r6
 80071a2:	f000 8592 	beq.w	8007cca <_dtoa_r+0xbb2>
 80071a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071a8:	b963      	cbnz	r3, 80071c4 <_dtoa_r+0xac>
 80071aa:	4b92      	ldr	r3, [pc, #584]	; (80073f4 <_dtoa_r+0x2dc>)
 80071ac:	e022      	b.n	80071f4 <_dtoa_r+0xdc>
 80071ae:	4b92      	ldr	r3, [pc, #584]	; (80073f8 <_dtoa_r+0x2e0>)
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	3308      	adds	r3, #8
 80071b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	9801      	ldr	r0, [sp, #4]
 80071ba:	b013      	add	sp, #76	; 0x4c
 80071bc:	ecbd 8b04 	vpop	{d8-d9}
 80071c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c4:	4b8b      	ldr	r3, [pc, #556]	; (80073f4 <_dtoa_r+0x2dc>)
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	3303      	adds	r3, #3
 80071ca:	e7f3      	b.n	80071b4 <_dtoa_r+0x9c>
 80071cc:	2200      	movs	r2, #0
 80071ce:	2300      	movs	r3, #0
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	f7f9 fc80 	bl	8000ad8 <__aeabi_dcmpeq>
 80071d8:	ec4b ab19 	vmov	d9, sl, fp
 80071dc:	4680      	mov	r8, r0
 80071de:	b158      	cbz	r0, 80071f8 <_dtoa_r+0xe0>
 80071e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071e2:	2301      	movs	r3, #1
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 856b 	beq.w	8007cc4 <_dtoa_r+0xbac>
 80071ee:	4883      	ldr	r0, [pc, #524]	; (80073fc <_dtoa_r+0x2e4>)
 80071f0:	6018      	str	r0, [r3, #0]
 80071f2:	1e43      	subs	r3, r0, #1
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	e7df      	b.n	80071b8 <_dtoa_r+0xa0>
 80071f8:	ec4b ab10 	vmov	d0, sl, fp
 80071fc:	aa10      	add	r2, sp, #64	; 0x40
 80071fe:	a911      	add	r1, sp, #68	; 0x44
 8007200:	4620      	mov	r0, r4
 8007202:	f001 fad9 	bl	80087b8 <__d2b>
 8007206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800720a:	ee08 0a10 	vmov	s16, r0
 800720e:	2d00      	cmp	r5, #0
 8007210:	f000 8084 	beq.w	800731c <_dtoa_r+0x204>
 8007214:	ee19 3a90 	vmov	r3, s19
 8007218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800721c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007220:	4656      	mov	r6, sl
 8007222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800722a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800722e:	4b74      	ldr	r3, [pc, #464]	; (8007400 <_dtoa_r+0x2e8>)
 8007230:	2200      	movs	r2, #0
 8007232:	4630      	mov	r0, r6
 8007234:	4639      	mov	r1, r7
 8007236:	f7f9 f82f 	bl	8000298 <__aeabi_dsub>
 800723a:	a365      	add	r3, pc, #404	; (adr r3, 80073d0 <_dtoa_r+0x2b8>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f7f9 f9e2 	bl	8000608 <__aeabi_dmul>
 8007244:	a364      	add	r3, pc, #400	; (adr r3, 80073d8 <_dtoa_r+0x2c0>)
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	f7f9 f827 	bl	800029c <__adddf3>
 800724e:	4606      	mov	r6, r0
 8007250:	4628      	mov	r0, r5
 8007252:	460f      	mov	r7, r1
 8007254:	f7f9 f96e 	bl	8000534 <__aeabi_i2d>
 8007258:	a361      	add	r3, pc, #388	; (adr r3, 80073e0 <_dtoa_r+0x2c8>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f9 f9d3 	bl	8000608 <__aeabi_dmul>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4630      	mov	r0, r6
 8007268:	4639      	mov	r1, r7
 800726a:	f7f9 f817 	bl	800029c <__adddf3>
 800726e:	4606      	mov	r6, r0
 8007270:	460f      	mov	r7, r1
 8007272:	f7f9 fc79 	bl	8000b68 <__aeabi_d2iz>
 8007276:	2200      	movs	r2, #0
 8007278:	9000      	str	r0, [sp, #0]
 800727a:	2300      	movs	r3, #0
 800727c:	4630      	mov	r0, r6
 800727e:	4639      	mov	r1, r7
 8007280:	f7f9 fc34 	bl	8000aec <__aeabi_dcmplt>
 8007284:	b150      	cbz	r0, 800729c <_dtoa_r+0x184>
 8007286:	9800      	ldr	r0, [sp, #0]
 8007288:	f7f9 f954 	bl	8000534 <__aeabi_i2d>
 800728c:	4632      	mov	r2, r6
 800728e:	463b      	mov	r3, r7
 8007290:	f7f9 fc22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007294:	b910      	cbnz	r0, 800729c <_dtoa_r+0x184>
 8007296:	9b00      	ldr	r3, [sp, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	9b00      	ldr	r3, [sp, #0]
 800729e:	2b16      	cmp	r3, #22
 80072a0:	d85a      	bhi.n	8007358 <_dtoa_r+0x240>
 80072a2:	9a00      	ldr	r2, [sp, #0]
 80072a4:	4b57      	ldr	r3, [pc, #348]	; (8007404 <_dtoa_r+0x2ec>)
 80072a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	ec51 0b19 	vmov	r0, r1, d9
 80072b2:	f7f9 fc1b 	bl	8000aec <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d050      	beq.n	800735c <_dtoa_r+0x244>
 80072ba:	9b00      	ldr	r3, [sp, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072c6:	1b5d      	subs	r5, r3, r5
 80072c8:	1e6b      	subs	r3, r5, #1
 80072ca:	9305      	str	r3, [sp, #20]
 80072cc:	bf45      	ittet	mi
 80072ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80072d2:	9304      	strmi	r3, [sp, #16]
 80072d4:	2300      	movpl	r3, #0
 80072d6:	2300      	movmi	r3, #0
 80072d8:	bf4c      	ite	mi
 80072da:	9305      	strmi	r3, [sp, #20]
 80072dc:	9304      	strpl	r3, [sp, #16]
 80072de:	9b00      	ldr	r3, [sp, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db3d      	blt.n	8007360 <_dtoa_r+0x248>
 80072e4:	9b05      	ldr	r3, [sp, #20]
 80072e6:	9a00      	ldr	r2, [sp, #0]
 80072e8:	920a      	str	r2, [sp, #40]	; 0x28
 80072ea:	4413      	add	r3, r2
 80072ec:	9305      	str	r3, [sp, #20]
 80072ee:	2300      	movs	r3, #0
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	9b06      	ldr	r3, [sp, #24]
 80072f4:	2b09      	cmp	r3, #9
 80072f6:	f200 8089 	bhi.w	800740c <_dtoa_r+0x2f4>
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	bfc4      	itt	gt
 80072fe:	3b04      	subgt	r3, #4
 8007300:	9306      	strgt	r3, [sp, #24]
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	f1a3 0302 	sub.w	r3, r3, #2
 8007308:	bfcc      	ite	gt
 800730a:	2500      	movgt	r5, #0
 800730c:	2501      	movle	r5, #1
 800730e:	2b03      	cmp	r3, #3
 8007310:	f200 8087 	bhi.w	8007422 <_dtoa_r+0x30a>
 8007314:	e8df f003 	tbb	[pc, r3]
 8007318:	59383a2d 	.word	0x59383a2d
 800731c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007320:	441d      	add	r5, r3
 8007322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007326:	2b20      	cmp	r3, #32
 8007328:	bfc1      	itttt	gt
 800732a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800732e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007332:	fa0b f303 	lslgt.w	r3, fp, r3
 8007336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800733a:	bfda      	itte	le
 800733c:	f1c3 0320 	rsble	r3, r3, #32
 8007340:	fa06 f003 	lslle.w	r0, r6, r3
 8007344:	4318      	orrgt	r0, r3
 8007346:	f7f9 f8e5 	bl	8000514 <__aeabi_ui2d>
 800734a:	2301      	movs	r3, #1
 800734c:	4606      	mov	r6, r0
 800734e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007352:	3d01      	subs	r5, #1
 8007354:	930e      	str	r3, [sp, #56]	; 0x38
 8007356:	e76a      	b.n	800722e <_dtoa_r+0x116>
 8007358:	2301      	movs	r3, #1
 800735a:	e7b2      	b.n	80072c2 <_dtoa_r+0x1aa>
 800735c:	900b      	str	r0, [sp, #44]	; 0x2c
 800735e:	e7b1      	b.n	80072c4 <_dtoa_r+0x1ac>
 8007360:	9b04      	ldr	r3, [sp, #16]
 8007362:	9a00      	ldr	r2, [sp, #0]
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	9304      	str	r3, [sp, #16]
 8007368:	4253      	negs	r3, r2
 800736a:	9307      	str	r3, [sp, #28]
 800736c:	2300      	movs	r3, #0
 800736e:	930a      	str	r3, [sp, #40]	; 0x28
 8007370:	e7bf      	b.n	80072f2 <_dtoa_r+0x1da>
 8007372:	2300      	movs	r3, #0
 8007374:	9308      	str	r3, [sp, #32]
 8007376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	dc55      	bgt.n	8007428 <_dtoa_r+0x310>
 800737c:	2301      	movs	r3, #1
 800737e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007382:	461a      	mov	r2, r3
 8007384:	9209      	str	r2, [sp, #36]	; 0x24
 8007386:	e00c      	b.n	80073a2 <_dtoa_r+0x28a>
 8007388:	2301      	movs	r3, #1
 800738a:	e7f3      	b.n	8007374 <_dtoa_r+0x25c>
 800738c:	2300      	movs	r3, #0
 800738e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	9b00      	ldr	r3, [sp, #0]
 8007394:	4413      	add	r3, r2
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	3301      	adds	r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	9303      	str	r3, [sp, #12]
 800739e:	bfb8      	it	lt
 80073a0:	2301      	movlt	r3, #1
 80073a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073a4:	2200      	movs	r2, #0
 80073a6:	6042      	str	r2, [r0, #4]
 80073a8:	2204      	movs	r2, #4
 80073aa:	f102 0614 	add.w	r6, r2, #20
 80073ae:	429e      	cmp	r6, r3
 80073b0:	6841      	ldr	r1, [r0, #4]
 80073b2:	d93d      	bls.n	8007430 <_dtoa_r+0x318>
 80073b4:	4620      	mov	r0, r4
 80073b6:	f000 fed7 	bl	8008168 <_Balloc>
 80073ba:	9001      	str	r0, [sp, #4]
 80073bc:	2800      	cmp	r0, #0
 80073be:	d13b      	bne.n	8007438 <_dtoa_r+0x320>
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <_dtoa_r+0x2f0>)
 80073c2:	4602      	mov	r2, r0
 80073c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073c8:	e6c0      	b.n	800714c <_dtoa_r+0x34>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e7df      	b.n	800738e <_dtoa_r+0x276>
 80073ce:	bf00      	nop
 80073d0:	636f4361 	.word	0x636f4361
 80073d4:	3fd287a7 	.word	0x3fd287a7
 80073d8:	8b60c8b3 	.word	0x8b60c8b3
 80073dc:	3fc68a28 	.word	0x3fc68a28
 80073e0:	509f79fb 	.word	0x509f79fb
 80073e4:	3fd34413 	.word	0x3fd34413
 80073e8:	080094fe 	.word	0x080094fe
 80073ec:	08009515 	.word	0x08009515
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	080094fa 	.word	0x080094fa
 80073f8:	080094f1 	.word	0x080094f1
 80073fc:	080093cd 	.word	0x080093cd
 8007400:	3ff80000 	.word	0x3ff80000
 8007404:	08009668 	.word	0x08009668
 8007408:	08009570 	.word	0x08009570
 800740c:	2501      	movs	r5, #1
 800740e:	2300      	movs	r3, #0
 8007410:	9306      	str	r3, [sp, #24]
 8007412:	9508      	str	r5, [sp, #32]
 8007414:	f04f 33ff 	mov.w	r3, #4294967295
 8007418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	2312      	movs	r3, #18
 8007420:	e7b0      	b.n	8007384 <_dtoa_r+0x26c>
 8007422:	2301      	movs	r3, #1
 8007424:	9308      	str	r3, [sp, #32]
 8007426:	e7f5      	b.n	8007414 <_dtoa_r+0x2fc>
 8007428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800742e:	e7b8      	b.n	80073a2 <_dtoa_r+0x28a>
 8007430:	3101      	adds	r1, #1
 8007432:	6041      	str	r1, [r0, #4]
 8007434:	0052      	lsls	r2, r2, #1
 8007436:	e7b8      	b.n	80073aa <_dtoa_r+0x292>
 8007438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800743a:	9a01      	ldr	r2, [sp, #4]
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	2b0e      	cmp	r3, #14
 8007442:	f200 809d 	bhi.w	8007580 <_dtoa_r+0x468>
 8007446:	2d00      	cmp	r5, #0
 8007448:	f000 809a 	beq.w	8007580 <_dtoa_r+0x468>
 800744c:	9b00      	ldr	r3, [sp, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	dd32      	ble.n	80074b8 <_dtoa_r+0x3a0>
 8007452:	4ab7      	ldr	r2, [pc, #732]	; (8007730 <_dtoa_r+0x618>)
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800745c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007460:	9b00      	ldr	r3, [sp, #0]
 8007462:	05d8      	lsls	r0, r3, #23
 8007464:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007468:	d516      	bpl.n	8007498 <_dtoa_r+0x380>
 800746a:	4bb2      	ldr	r3, [pc, #712]	; (8007734 <_dtoa_r+0x61c>)
 800746c:	ec51 0b19 	vmov	r0, r1, d9
 8007470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007474:	f7f9 f9f2 	bl	800085c <__aeabi_ddiv>
 8007478:	f007 070f 	and.w	r7, r7, #15
 800747c:	4682      	mov	sl, r0
 800747e:	468b      	mov	fp, r1
 8007480:	2503      	movs	r5, #3
 8007482:	4eac      	ldr	r6, [pc, #688]	; (8007734 <_dtoa_r+0x61c>)
 8007484:	b957      	cbnz	r7, 800749c <_dtoa_r+0x384>
 8007486:	4642      	mov	r2, r8
 8007488:	464b      	mov	r3, r9
 800748a:	4650      	mov	r0, sl
 800748c:	4659      	mov	r1, fp
 800748e:	f7f9 f9e5 	bl	800085c <__aeabi_ddiv>
 8007492:	4682      	mov	sl, r0
 8007494:	468b      	mov	fp, r1
 8007496:	e028      	b.n	80074ea <_dtoa_r+0x3d2>
 8007498:	2502      	movs	r5, #2
 800749a:	e7f2      	b.n	8007482 <_dtoa_r+0x36a>
 800749c:	07f9      	lsls	r1, r7, #31
 800749e:	d508      	bpl.n	80074b2 <_dtoa_r+0x39a>
 80074a0:	4640      	mov	r0, r8
 80074a2:	4649      	mov	r1, r9
 80074a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074a8:	f7f9 f8ae 	bl	8000608 <__aeabi_dmul>
 80074ac:	3501      	adds	r5, #1
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	107f      	asrs	r7, r7, #1
 80074b4:	3608      	adds	r6, #8
 80074b6:	e7e5      	b.n	8007484 <_dtoa_r+0x36c>
 80074b8:	f000 809b 	beq.w	80075f2 <_dtoa_r+0x4da>
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	4f9d      	ldr	r7, [pc, #628]	; (8007734 <_dtoa_r+0x61c>)
 80074c0:	425e      	negs	r6, r3
 80074c2:	4b9b      	ldr	r3, [pc, #620]	; (8007730 <_dtoa_r+0x618>)
 80074c4:	f006 020f 	and.w	r2, r6, #15
 80074c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	ec51 0b19 	vmov	r0, r1, d9
 80074d4:	f7f9 f898 	bl	8000608 <__aeabi_dmul>
 80074d8:	1136      	asrs	r6, r6, #4
 80074da:	4682      	mov	sl, r0
 80074dc:	468b      	mov	fp, r1
 80074de:	2300      	movs	r3, #0
 80074e0:	2502      	movs	r5, #2
 80074e2:	2e00      	cmp	r6, #0
 80074e4:	d17a      	bne.n	80075dc <_dtoa_r+0x4c4>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1d3      	bne.n	8007492 <_dtoa_r+0x37a>
 80074ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8082 	beq.w	80075f6 <_dtoa_r+0x4de>
 80074f2:	4b91      	ldr	r3, [pc, #580]	; (8007738 <_dtoa_r+0x620>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	4650      	mov	r0, sl
 80074f8:	4659      	mov	r1, fp
 80074fa:	f7f9 faf7 	bl	8000aec <__aeabi_dcmplt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d079      	beq.n	80075f6 <_dtoa_r+0x4de>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d076      	beq.n	80075f6 <_dtoa_r+0x4de>
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	dd36      	ble.n	800757c <_dtoa_r+0x464>
 800750e:	9b00      	ldr	r3, [sp, #0]
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	1e5f      	subs	r7, r3, #1
 8007516:	2200      	movs	r2, #0
 8007518:	4b88      	ldr	r3, [pc, #544]	; (800773c <_dtoa_r+0x624>)
 800751a:	f7f9 f875 	bl	8000608 <__aeabi_dmul>
 800751e:	9e02      	ldr	r6, [sp, #8]
 8007520:	4682      	mov	sl, r0
 8007522:	468b      	mov	fp, r1
 8007524:	3501      	adds	r5, #1
 8007526:	4628      	mov	r0, r5
 8007528:	f7f9 f804 	bl	8000534 <__aeabi_i2d>
 800752c:	4652      	mov	r2, sl
 800752e:	465b      	mov	r3, fp
 8007530:	f7f9 f86a 	bl	8000608 <__aeabi_dmul>
 8007534:	4b82      	ldr	r3, [pc, #520]	; (8007740 <_dtoa_r+0x628>)
 8007536:	2200      	movs	r2, #0
 8007538:	f7f8 feb0 	bl	800029c <__adddf3>
 800753c:	46d0      	mov	r8, sl
 800753e:	46d9      	mov	r9, fp
 8007540:	4682      	mov	sl, r0
 8007542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007546:	2e00      	cmp	r6, #0
 8007548:	d158      	bne.n	80075fc <_dtoa_r+0x4e4>
 800754a:	4b7e      	ldr	r3, [pc, #504]	; (8007744 <_dtoa_r+0x62c>)
 800754c:	2200      	movs	r2, #0
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f8 fea1 	bl	8000298 <__aeabi_dsub>
 8007556:	4652      	mov	r2, sl
 8007558:	465b      	mov	r3, fp
 800755a:	4680      	mov	r8, r0
 800755c:	4689      	mov	r9, r1
 800755e:	f7f9 fae3 	bl	8000b28 <__aeabi_dcmpgt>
 8007562:	2800      	cmp	r0, #0
 8007564:	f040 8295 	bne.w	8007a92 <_dtoa_r+0x97a>
 8007568:	4652      	mov	r2, sl
 800756a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800756e:	4640      	mov	r0, r8
 8007570:	4649      	mov	r1, r9
 8007572:	f7f9 fabb 	bl	8000aec <__aeabi_dcmplt>
 8007576:	2800      	cmp	r0, #0
 8007578:	f040 8289 	bne.w	8007a8e <_dtoa_r+0x976>
 800757c:	ec5b ab19 	vmov	sl, fp, d9
 8007580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007582:	2b00      	cmp	r3, #0
 8007584:	f2c0 8148 	blt.w	8007818 <_dtoa_r+0x700>
 8007588:	9a00      	ldr	r2, [sp, #0]
 800758a:	2a0e      	cmp	r2, #14
 800758c:	f300 8144 	bgt.w	8007818 <_dtoa_r+0x700>
 8007590:	4b67      	ldr	r3, [pc, #412]	; (8007730 <_dtoa_r+0x618>)
 8007592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007596:	e9d3 8900 	ldrd	r8, r9, [r3]
 800759a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	f280 80d5 	bge.w	800774c <_dtoa_r+0x634>
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f300 80d1 	bgt.w	800774c <_dtoa_r+0x634>
 80075aa:	f040 826f 	bne.w	8007a8c <_dtoa_r+0x974>
 80075ae:	4b65      	ldr	r3, [pc, #404]	; (8007744 <_dtoa_r+0x62c>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	4652      	mov	r2, sl
 80075bc:	465b      	mov	r3, fp
 80075be:	f7f9 faa9 	bl	8000b14 <__aeabi_dcmpge>
 80075c2:	9e03      	ldr	r6, [sp, #12]
 80075c4:	4637      	mov	r7, r6
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f040 8245 	bne.w	8007a56 <_dtoa_r+0x93e>
 80075cc:	9d01      	ldr	r5, [sp, #4]
 80075ce:	2331      	movs	r3, #49	; 0x31
 80075d0:	f805 3b01 	strb.w	r3, [r5], #1
 80075d4:	9b00      	ldr	r3, [sp, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	e240      	b.n	8007a5e <_dtoa_r+0x946>
 80075dc:	07f2      	lsls	r2, r6, #31
 80075de:	d505      	bpl.n	80075ec <_dtoa_r+0x4d4>
 80075e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e4:	f7f9 f810 	bl	8000608 <__aeabi_dmul>
 80075e8:	3501      	adds	r5, #1
 80075ea:	2301      	movs	r3, #1
 80075ec:	1076      	asrs	r6, r6, #1
 80075ee:	3708      	adds	r7, #8
 80075f0:	e777      	b.n	80074e2 <_dtoa_r+0x3ca>
 80075f2:	2502      	movs	r5, #2
 80075f4:	e779      	b.n	80074ea <_dtoa_r+0x3d2>
 80075f6:	9f00      	ldr	r7, [sp, #0]
 80075f8:	9e03      	ldr	r6, [sp, #12]
 80075fa:	e794      	b.n	8007526 <_dtoa_r+0x40e>
 80075fc:	9901      	ldr	r1, [sp, #4]
 80075fe:	4b4c      	ldr	r3, [pc, #304]	; (8007730 <_dtoa_r+0x618>)
 8007600:	4431      	add	r1, r6
 8007602:	910d      	str	r1, [sp, #52]	; 0x34
 8007604:	9908      	ldr	r1, [sp, #32]
 8007606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800760a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800760e:	2900      	cmp	r1, #0
 8007610:	d043      	beq.n	800769a <_dtoa_r+0x582>
 8007612:	494d      	ldr	r1, [pc, #308]	; (8007748 <_dtoa_r+0x630>)
 8007614:	2000      	movs	r0, #0
 8007616:	f7f9 f921 	bl	800085c <__aeabi_ddiv>
 800761a:	4652      	mov	r2, sl
 800761c:	465b      	mov	r3, fp
 800761e:	f7f8 fe3b 	bl	8000298 <__aeabi_dsub>
 8007622:	9d01      	ldr	r5, [sp, #4]
 8007624:	4682      	mov	sl, r0
 8007626:	468b      	mov	fp, r1
 8007628:	4649      	mov	r1, r9
 800762a:	4640      	mov	r0, r8
 800762c:	f7f9 fa9c 	bl	8000b68 <__aeabi_d2iz>
 8007630:	4606      	mov	r6, r0
 8007632:	f7f8 ff7f 	bl	8000534 <__aeabi_i2d>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f8 fe2b 	bl	8000298 <__aeabi_dsub>
 8007642:	3630      	adds	r6, #48	; 0x30
 8007644:	f805 6b01 	strb.w	r6, [r5], #1
 8007648:	4652      	mov	r2, sl
 800764a:	465b      	mov	r3, fp
 800764c:	4680      	mov	r8, r0
 800764e:	4689      	mov	r9, r1
 8007650:	f7f9 fa4c 	bl	8000aec <__aeabi_dcmplt>
 8007654:	2800      	cmp	r0, #0
 8007656:	d163      	bne.n	8007720 <_dtoa_r+0x608>
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	4936      	ldr	r1, [pc, #216]	; (8007738 <_dtoa_r+0x620>)
 800765e:	2000      	movs	r0, #0
 8007660:	f7f8 fe1a 	bl	8000298 <__aeabi_dsub>
 8007664:	4652      	mov	r2, sl
 8007666:	465b      	mov	r3, fp
 8007668:	f7f9 fa40 	bl	8000aec <__aeabi_dcmplt>
 800766c:	2800      	cmp	r0, #0
 800766e:	f040 80b5 	bne.w	80077dc <_dtoa_r+0x6c4>
 8007672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007674:	429d      	cmp	r5, r3
 8007676:	d081      	beq.n	800757c <_dtoa_r+0x464>
 8007678:	4b30      	ldr	r3, [pc, #192]	; (800773c <_dtoa_r+0x624>)
 800767a:	2200      	movs	r2, #0
 800767c:	4650      	mov	r0, sl
 800767e:	4659      	mov	r1, fp
 8007680:	f7f8 ffc2 	bl	8000608 <__aeabi_dmul>
 8007684:	4b2d      	ldr	r3, [pc, #180]	; (800773c <_dtoa_r+0x624>)
 8007686:	4682      	mov	sl, r0
 8007688:	468b      	mov	fp, r1
 800768a:	4640      	mov	r0, r8
 800768c:	4649      	mov	r1, r9
 800768e:	2200      	movs	r2, #0
 8007690:	f7f8 ffba 	bl	8000608 <__aeabi_dmul>
 8007694:	4680      	mov	r8, r0
 8007696:	4689      	mov	r9, r1
 8007698:	e7c6      	b.n	8007628 <_dtoa_r+0x510>
 800769a:	4650      	mov	r0, sl
 800769c:	4659      	mov	r1, fp
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a4:	9d01      	ldr	r5, [sp, #4]
 80076a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076a8:	4682      	mov	sl, r0
 80076aa:	468b      	mov	fp, r1
 80076ac:	4649      	mov	r1, r9
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7f9 fa5a 	bl	8000b68 <__aeabi_d2iz>
 80076b4:	4606      	mov	r6, r0
 80076b6:	f7f8 ff3d 	bl	8000534 <__aeabi_i2d>
 80076ba:	3630      	adds	r6, #48	; 0x30
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4640      	mov	r0, r8
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f8 fde8 	bl	8000298 <__aeabi_dsub>
 80076c8:	f805 6b01 	strb.w	r6, [r5], #1
 80076cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ce:	429d      	cmp	r5, r3
 80076d0:	4680      	mov	r8, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	d124      	bne.n	8007724 <_dtoa_r+0x60c>
 80076da:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <_dtoa_r+0x630>)
 80076dc:	4650      	mov	r0, sl
 80076de:	4659      	mov	r1, fp
 80076e0:	f7f8 fddc 	bl	800029c <__adddf3>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f7f9 fa1c 	bl	8000b28 <__aeabi_dcmpgt>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d173      	bne.n	80077dc <_dtoa_r+0x6c4>
 80076f4:	4652      	mov	r2, sl
 80076f6:	465b      	mov	r3, fp
 80076f8:	4913      	ldr	r1, [pc, #76]	; (8007748 <_dtoa_r+0x630>)
 80076fa:	2000      	movs	r0, #0
 80076fc:	f7f8 fdcc 	bl	8000298 <__aeabi_dsub>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4640      	mov	r0, r8
 8007706:	4649      	mov	r1, r9
 8007708:	f7f9 f9f0 	bl	8000aec <__aeabi_dcmplt>
 800770c:	2800      	cmp	r0, #0
 800770e:	f43f af35 	beq.w	800757c <_dtoa_r+0x464>
 8007712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007714:	1e6b      	subs	r3, r5, #1
 8007716:	930f      	str	r3, [sp, #60]	; 0x3c
 8007718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800771c:	2b30      	cmp	r3, #48	; 0x30
 800771e:	d0f8      	beq.n	8007712 <_dtoa_r+0x5fa>
 8007720:	9700      	str	r7, [sp, #0]
 8007722:	e049      	b.n	80077b8 <_dtoa_r+0x6a0>
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <_dtoa_r+0x624>)
 8007726:	f7f8 ff6f 	bl	8000608 <__aeabi_dmul>
 800772a:	4680      	mov	r8, r0
 800772c:	4689      	mov	r9, r1
 800772e:	e7bd      	b.n	80076ac <_dtoa_r+0x594>
 8007730:	08009668 	.word	0x08009668
 8007734:	08009640 	.word	0x08009640
 8007738:	3ff00000 	.word	0x3ff00000
 800773c:	40240000 	.word	0x40240000
 8007740:	401c0000 	.word	0x401c0000
 8007744:	40140000 	.word	0x40140000
 8007748:	3fe00000 	.word	0x3fe00000
 800774c:	9d01      	ldr	r5, [sp, #4]
 800774e:	4656      	mov	r6, sl
 8007750:	465f      	mov	r7, fp
 8007752:	4642      	mov	r2, r8
 8007754:	464b      	mov	r3, r9
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	f7f9 f87f 	bl	800085c <__aeabi_ddiv>
 800775e:	f7f9 fa03 	bl	8000b68 <__aeabi_d2iz>
 8007762:	4682      	mov	sl, r0
 8007764:	f7f8 fee6 	bl	8000534 <__aeabi_i2d>
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	f7f8 ff4c 	bl	8000608 <__aeabi_dmul>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800777c:	f7f8 fd8c 	bl	8000298 <__aeabi_dsub>
 8007780:	f805 6b01 	strb.w	r6, [r5], #1
 8007784:	9e01      	ldr	r6, [sp, #4]
 8007786:	9f03      	ldr	r7, [sp, #12]
 8007788:	1bae      	subs	r6, r5, r6
 800778a:	42b7      	cmp	r7, r6
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	d135      	bne.n	80077fe <_dtoa_r+0x6e6>
 8007792:	f7f8 fd83 	bl	800029c <__adddf3>
 8007796:	4642      	mov	r2, r8
 8007798:	464b      	mov	r3, r9
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	f7f9 f9c3 	bl	8000b28 <__aeabi_dcmpgt>
 80077a2:	b9d0      	cbnz	r0, 80077da <_dtoa_r+0x6c2>
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f9 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80077b0:	b110      	cbz	r0, 80077b8 <_dtoa_r+0x6a0>
 80077b2:	f01a 0f01 	tst.w	sl, #1
 80077b6:	d110      	bne.n	80077da <_dtoa_r+0x6c2>
 80077b8:	4620      	mov	r0, r4
 80077ba:	ee18 1a10 	vmov	r1, s16
 80077be:	f000 fd13 	bl	80081e8 <_Bfree>
 80077c2:	2300      	movs	r3, #0
 80077c4:	9800      	ldr	r0, [sp, #0]
 80077c6:	702b      	strb	r3, [r5, #0]
 80077c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ca:	3001      	adds	r0, #1
 80077cc:	6018      	str	r0, [r3, #0]
 80077ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f43f acf1 	beq.w	80071b8 <_dtoa_r+0xa0>
 80077d6:	601d      	str	r5, [r3, #0]
 80077d8:	e4ee      	b.n	80071b8 <_dtoa_r+0xa0>
 80077da:	9f00      	ldr	r7, [sp, #0]
 80077dc:	462b      	mov	r3, r5
 80077de:	461d      	mov	r5, r3
 80077e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e4:	2a39      	cmp	r2, #57	; 0x39
 80077e6:	d106      	bne.n	80077f6 <_dtoa_r+0x6de>
 80077e8:	9a01      	ldr	r2, [sp, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1f7      	bne.n	80077de <_dtoa_r+0x6c6>
 80077ee:	9901      	ldr	r1, [sp, #4]
 80077f0:	2230      	movs	r2, #48	; 0x30
 80077f2:	3701      	adds	r7, #1
 80077f4:	700a      	strb	r2, [r1, #0]
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	3201      	adds	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e790      	b.n	8007720 <_dtoa_r+0x608>
 80077fe:	4ba6      	ldr	r3, [pc, #664]	; (8007a98 <_dtoa_r+0x980>)
 8007800:	2200      	movs	r2, #0
 8007802:	f7f8 ff01 	bl	8000608 <__aeabi_dmul>
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	f7f9 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 8007812:	2800      	cmp	r0, #0
 8007814:	d09d      	beq.n	8007752 <_dtoa_r+0x63a>
 8007816:	e7cf      	b.n	80077b8 <_dtoa_r+0x6a0>
 8007818:	9a08      	ldr	r2, [sp, #32]
 800781a:	2a00      	cmp	r2, #0
 800781c:	f000 80d7 	beq.w	80079ce <_dtoa_r+0x8b6>
 8007820:	9a06      	ldr	r2, [sp, #24]
 8007822:	2a01      	cmp	r2, #1
 8007824:	f300 80ba 	bgt.w	800799c <_dtoa_r+0x884>
 8007828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800782a:	2a00      	cmp	r2, #0
 800782c:	f000 80b2 	beq.w	8007994 <_dtoa_r+0x87c>
 8007830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007834:	9e07      	ldr	r6, [sp, #28]
 8007836:	9d04      	ldr	r5, [sp, #16]
 8007838:	9a04      	ldr	r2, [sp, #16]
 800783a:	441a      	add	r2, r3
 800783c:	9204      	str	r2, [sp, #16]
 800783e:	9a05      	ldr	r2, [sp, #20]
 8007840:	2101      	movs	r1, #1
 8007842:	441a      	add	r2, r3
 8007844:	4620      	mov	r0, r4
 8007846:	9205      	str	r2, [sp, #20]
 8007848:	f000 fd86 	bl	8008358 <__i2b>
 800784c:	4607      	mov	r7, r0
 800784e:	2d00      	cmp	r5, #0
 8007850:	dd0c      	ble.n	800786c <_dtoa_r+0x754>
 8007852:	9b05      	ldr	r3, [sp, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dd09      	ble.n	800786c <_dtoa_r+0x754>
 8007858:	42ab      	cmp	r3, r5
 800785a:	9a04      	ldr	r2, [sp, #16]
 800785c:	bfa8      	it	ge
 800785e:	462b      	movge	r3, r5
 8007860:	1ad2      	subs	r2, r2, r3
 8007862:	9204      	str	r2, [sp, #16]
 8007864:	9a05      	ldr	r2, [sp, #20]
 8007866:	1aed      	subs	r5, r5, r3
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	9b07      	ldr	r3, [sp, #28]
 800786e:	b31b      	cbz	r3, 80078b8 <_dtoa_r+0x7a0>
 8007870:	9b08      	ldr	r3, [sp, #32]
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80af 	beq.w	80079d6 <_dtoa_r+0x8be>
 8007878:	2e00      	cmp	r6, #0
 800787a:	dd13      	ble.n	80078a4 <_dtoa_r+0x78c>
 800787c:	4639      	mov	r1, r7
 800787e:	4632      	mov	r2, r6
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fe29 	bl	80084d8 <__pow5mult>
 8007886:	ee18 2a10 	vmov	r2, s16
 800788a:	4601      	mov	r1, r0
 800788c:	4607      	mov	r7, r0
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fd78 	bl	8008384 <__multiply>
 8007894:	ee18 1a10 	vmov	r1, s16
 8007898:	4680      	mov	r8, r0
 800789a:	4620      	mov	r0, r4
 800789c:	f000 fca4 	bl	80081e8 <_Bfree>
 80078a0:	ee08 8a10 	vmov	s16, r8
 80078a4:	9b07      	ldr	r3, [sp, #28]
 80078a6:	1b9a      	subs	r2, r3, r6
 80078a8:	d006      	beq.n	80078b8 <_dtoa_r+0x7a0>
 80078aa:	ee18 1a10 	vmov	r1, s16
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 fe12 	bl	80084d8 <__pow5mult>
 80078b4:	ee08 0a10 	vmov	s16, r0
 80078b8:	2101      	movs	r1, #1
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 fd4c 	bl	8008358 <__i2b>
 80078c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	4606      	mov	r6, r0
 80078c6:	f340 8088 	ble.w	80079da <_dtoa_r+0x8c2>
 80078ca:	461a      	mov	r2, r3
 80078cc:	4601      	mov	r1, r0
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 fe02 	bl	80084d8 <__pow5mult>
 80078d4:	9b06      	ldr	r3, [sp, #24]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	4606      	mov	r6, r0
 80078da:	f340 8081 	ble.w	80079e0 <_dtoa_r+0x8c8>
 80078de:	f04f 0800 	mov.w	r8, #0
 80078e2:	6933      	ldr	r3, [r6, #16]
 80078e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078e8:	6918      	ldr	r0, [r3, #16]
 80078ea:	f000 fce5 	bl	80082b8 <__hi0bits>
 80078ee:	f1c0 0020 	rsb	r0, r0, #32
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	4418      	add	r0, r3
 80078f6:	f010 001f 	ands.w	r0, r0, #31
 80078fa:	f000 8092 	beq.w	8007a22 <_dtoa_r+0x90a>
 80078fe:	f1c0 0320 	rsb	r3, r0, #32
 8007902:	2b04      	cmp	r3, #4
 8007904:	f340 808a 	ble.w	8007a1c <_dtoa_r+0x904>
 8007908:	f1c0 001c 	rsb	r0, r0, #28
 800790c:	9b04      	ldr	r3, [sp, #16]
 800790e:	4403      	add	r3, r0
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	9b05      	ldr	r3, [sp, #20]
 8007914:	4403      	add	r3, r0
 8007916:	4405      	add	r5, r0
 8007918:	9305      	str	r3, [sp, #20]
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd07      	ble.n	8007930 <_dtoa_r+0x818>
 8007920:	ee18 1a10 	vmov	r1, s16
 8007924:	461a      	mov	r2, r3
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fe30 	bl	800858c <__lshift>
 800792c:	ee08 0a10 	vmov	s16, r0
 8007930:	9b05      	ldr	r3, [sp, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	dd05      	ble.n	8007942 <_dtoa_r+0x82a>
 8007936:	4631      	mov	r1, r6
 8007938:	461a      	mov	r2, r3
 800793a:	4620      	mov	r0, r4
 800793c:	f000 fe26 	bl	800858c <__lshift>
 8007940:	4606      	mov	r6, r0
 8007942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d06e      	beq.n	8007a26 <_dtoa_r+0x90e>
 8007948:	ee18 0a10 	vmov	r0, s16
 800794c:	4631      	mov	r1, r6
 800794e:	f000 fe8d 	bl	800866c <__mcmp>
 8007952:	2800      	cmp	r0, #0
 8007954:	da67      	bge.n	8007a26 <_dtoa_r+0x90e>
 8007956:	9b00      	ldr	r3, [sp, #0]
 8007958:	3b01      	subs	r3, #1
 800795a:	ee18 1a10 	vmov	r1, s16
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	220a      	movs	r2, #10
 8007962:	2300      	movs	r3, #0
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fc61 	bl	800822c <__multadd>
 800796a:	9b08      	ldr	r3, [sp, #32]
 800796c:	ee08 0a10 	vmov	s16, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 81b1 	beq.w	8007cd8 <_dtoa_r+0xbc0>
 8007976:	2300      	movs	r3, #0
 8007978:	4639      	mov	r1, r7
 800797a:	220a      	movs	r2, #10
 800797c:	4620      	mov	r0, r4
 800797e:	f000 fc55 	bl	800822c <__multadd>
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	4607      	mov	r7, r0
 8007988:	f300 808e 	bgt.w	8007aa8 <_dtoa_r+0x990>
 800798c:	9b06      	ldr	r3, [sp, #24]
 800798e:	2b02      	cmp	r3, #2
 8007990:	dc51      	bgt.n	8007a36 <_dtoa_r+0x91e>
 8007992:	e089      	b.n	8007aa8 <_dtoa_r+0x990>
 8007994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800799a:	e74b      	b.n	8007834 <_dtoa_r+0x71c>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	1e5e      	subs	r6, r3, #1
 80079a0:	9b07      	ldr	r3, [sp, #28]
 80079a2:	42b3      	cmp	r3, r6
 80079a4:	bfbf      	itttt	lt
 80079a6:	9b07      	ldrlt	r3, [sp, #28]
 80079a8:	9607      	strlt	r6, [sp, #28]
 80079aa:	1af2      	sublt	r2, r6, r3
 80079ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80079ae:	bfb6      	itet	lt
 80079b0:	189b      	addlt	r3, r3, r2
 80079b2:	1b9e      	subge	r6, r3, r6
 80079b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	bfb8      	it	lt
 80079ba:	2600      	movlt	r6, #0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bfb7      	itett	lt
 80079c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80079c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80079c8:	1a9d      	sublt	r5, r3, r2
 80079ca:	2300      	movlt	r3, #0
 80079cc:	e734      	b.n	8007838 <_dtoa_r+0x720>
 80079ce:	9e07      	ldr	r6, [sp, #28]
 80079d0:	9d04      	ldr	r5, [sp, #16]
 80079d2:	9f08      	ldr	r7, [sp, #32]
 80079d4:	e73b      	b.n	800784e <_dtoa_r+0x736>
 80079d6:	9a07      	ldr	r2, [sp, #28]
 80079d8:	e767      	b.n	80078aa <_dtoa_r+0x792>
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	dc18      	bgt.n	8007a12 <_dtoa_r+0x8fa>
 80079e0:	f1ba 0f00 	cmp.w	sl, #0
 80079e4:	d115      	bne.n	8007a12 <_dtoa_r+0x8fa>
 80079e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079ea:	b993      	cbnz	r3, 8007a12 <_dtoa_r+0x8fa>
 80079ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079f0:	0d1b      	lsrs	r3, r3, #20
 80079f2:	051b      	lsls	r3, r3, #20
 80079f4:	b183      	cbz	r3, 8007a18 <_dtoa_r+0x900>
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	3301      	adds	r3, #1
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	3301      	adds	r3, #1
 8007a00:	9305      	str	r3, [sp, #20]
 8007a02:	f04f 0801 	mov.w	r8, #1
 8007a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f47f af6a 	bne.w	80078e2 <_dtoa_r+0x7ca>
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e76f      	b.n	80078f2 <_dtoa_r+0x7da>
 8007a12:	f04f 0800 	mov.w	r8, #0
 8007a16:	e7f6      	b.n	8007a06 <_dtoa_r+0x8ee>
 8007a18:	4698      	mov	r8, r3
 8007a1a:	e7f4      	b.n	8007a06 <_dtoa_r+0x8ee>
 8007a1c:	f43f af7d 	beq.w	800791a <_dtoa_r+0x802>
 8007a20:	4618      	mov	r0, r3
 8007a22:	301c      	adds	r0, #28
 8007a24:	e772      	b.n	800790c <_dtoa_r+0x7f4>
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dc37      	bgt.n	8007a9c <_dtoa_r+0x984>
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	dd34      	ble.n	8007a9c <_dtoa_r+0x984>
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	9302      	str	r3, [sp, #8]
 8007a36:	9b02      	ldr	r3, [sp, #8]
 8007a38:	b96b      	cbnz	r3, 8007a56 <_dtoa_r+0x93e>
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 fbf4 	bl	800822c <__multadd>
 8007a44:	4601      	mov	r1, r0
 8007a46:	4606      	mov	r6, r0
 8007a48:	ee18 0a10 	vmov	r0, s16
 8007a4c:	f000 fe0e 	bl	800866c <__mcmp>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	f73f adbb 	bgt.w	80075cc <_dtoa_r+0x4b4>
 8007a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a58:	9d01      	ldr	r5, [sp, #4]
 8007a5a:	43db      	mvns	r3, r3
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	f04f 0800 	mov.w	r8, #0
 8007a62:	4631      	mov	r1, r6
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fbbf 	bl	80081e8 <_Bfree>
 8007a6a:	2f00      	cmp	r7, #0
 8007a6c:	f43f aea4 	beq.w	80077b8 <_dtoa_r+0x6a0>
 8007a70:	f1b8 0f00 	cmp.w	r8, #0
 8007a74:	d005      	beq.n	8007a82 <_dtoa_r+0x96a>
 8007a76:	45b8      	cmp	r8, r7
 8007a78:	d003      	beq.n	8007a82 <_dtoa_r+0x96a>
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f000 fbb3 	bl	80081e8 <_Bfree>
 8007a82:	4639      	mov	r1, r7
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 fbaf 	bl	80081e8 <_Bfree>
 8007a8a:	e695      	b.n	80077b8 <_dtoa_r+0x6a0>
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	4637      	mov	r7, r6
 8007a90:	e7e1      	b.n	8007a56 <_dtoa_r+0x93e>
 8007a92:	9700      	str	r7, [sp, #0]
 8007a94:	4637      	mov	r7, r6
 8007a96:	e599      	b.n	80075cc <_dtoa_r+0x4b4>
 8007a98:	40240000 	.word	0x40240000
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80ca 	beq.w	8007c38 <_dtoa_r+0xb20>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	dd05      	ble.n	8007ab8 <_dtoa_r+0x9a0>
 8007aac:	4639      	mov	r1, r7
 8007aae:	462a      	mov	r2, r5
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 fd6b 	bl	800858c <__lshift>
 8007ab6:	4607      	mov	r7, r0
 8007ab8:	f1b8 0f00 	cmp.w	r8, #0
 8007abc:	d05b      	beq.n	8007b76 <_dtoa_r+0xa5e>
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 fb51 	bl	8008168 <_Balloc>
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b928      	cbnz	r0, 8007ad6 <_dtoa_r+0x9be>
 8007aca:	4b87      	ldr	r3, [pc, #540]	; (8007ce8 <_dtoa_r+0xbd0>)
 8007acc:	4602      	mov	r2, r0
 8007ace:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ad2:	f7ff bb3b 	b.w	800714c <_dtoa_r+0x34>
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	3202      	adds	r2, #2
 8007ada:	0092      	lsls	r2, r2, #2
 8007adc:	f107 010c 	add.w	r1, r7, #12
 8007ae0:	300c      	adds	r0, #12
 8007ae2:	f000 fb33 	bl	800814c <memcpy>
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 fd4e 	bl	800858c <__lshift>
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	f103 0901 	add.w	r9, r3, #1
 8007af6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	9305      	str	r3, [sp, #20]
 8007afe:	f00a 0301 	and.w	r3, sl, #1
 8007b02:	46b8      	mov	r8, r7
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	4607      	mov	r7, r0
 8007b08:	4631      	mov	r1, r6
 8007b0a:	ee18 0a10 	vmov	r0, s16
 8007b0e:	f7ff fa75 	bl	8006ffc <quorem>
 8007b12:	4641      	mov	r1, r8
 8007b14:	9002      	str	r0, [sp, #8]
 8007b16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b1a:	ee18 0a10 	vmov	r0, s16
 8007b1e:	f000 fda5 	bl	800866c <__mcmp>
 8007b22:	463a      	mov	r2, r7
 8007b24:	9003      	str	r0, [sp, #12]
 8007b26:	4631      	mov	r1, r6
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fdbb 	bl	80086a4 <__mdiff>
 8007b2e:	68c2      	ldr	r2, [r0, #12]
 8007b30:	f109 3bff 	add.w	fp, r9, #4294967295
 8007b34:	4605      	mov	r5, r0
 8007b36:	bb02      	cbnz	r2, 8007b7a <_dtoa_r+0xa62>
 8007b38:	4601      	mov	r1, r0
 8007b3a:	ee18 0a10 	vmov	r0, s16
 8007b3e:	f000 fd95 	bl	800866c <__mcmp>
 8007b42:	4602      	mov	r2, r0
 8007b44:	4629      	mov	r1, r5
 8007b46:	4620      	mov	r0, r4
 8007b48:	9207      	str	r2, [sp, #28]
 8007b4a:	f000 fb4d 	bl	80081e8 <_Bfree>
 8007b4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007b52:	ea43 0102 	orr.w	r1, r3, r2
 8007b56:	9b04      	ldr	r3, [sp, #16]
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	464d      	mov	r5, r9
 8007b5c:	d10f      	bne.n	8007b7e <_dtoa_r+0xa66>
 8007b5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b62:	d02a      	beq.n	8007bba <_dtoa_r+0xaa2>
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dd02      	ble.n	8007b70 <_dtoa_r+0xa58>
 8007b6a:	9b02      	ldr	r3, [sp, #8]
 8007b6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007b70:	f88b a000 	strb.w	sl, [fp]
 8007b74:	e775      	b.n	8007a62 <_dtoa_r+0x94a>
 8007b76:	4638      	mov	r0, r7
 8007b78:	e7ba      	b.n	8007af0 <_dtoa_r+0x9d8>
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	e7e2      	b.n	8007b44 <_dtoa_r+0xa2c>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	db04      	blt.n	8007b8e <_dtoa_r+0xa76>
 8007b84:	9906      	ldr	r1, [sp, #24]
 8007b86:	430b      	orrs	r3, r1
 8007b88:	9904      	ldr	r1, [sp, #16]
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	d122      	bne.n	8007bd4 <_dtoa_r+0xabc>
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	ddee      	ble.n	8007b70 <_dtoa_r+0xa58>
 8007b92:	ee18 1a10 	vmov	r1, s16
 8007b96:	2201      	movs	r2, #1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 fcf7 	bl	800858c <__lshift>
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	ee08 0a10 	vmov	s16, r0
 8007ba4:	f000 fd62 	bl	800866c <__mcmp>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	dc03      	bgt.n	8007bb4 <_dtoa_r+0xa9c>
 8007bac:	d1e0      	bne.n	8007b70 <_dtoa_r+0xa58>
 8007bae:	f01a 0f01 	tst.w	sl, #1
 8007bb2:	d0dd      	beq.n	8007b70 <_dtoa_r+0xa58>
 8007bb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bb8:	d1d7      	bne.n	8007b6a <_dtoa_r+0xa52>
 8007bba:	2339      	movs	r3, #57	; 0x39
 8007bbc:	f88b 3000 	strb.w	r3, [fp]
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	461d      	mov	r5, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bca:	2a39      	cmp	r2, #57	; 0x39
 8007bcc:	d071      	beq.n	8007cb2 <_dtoa_r+0xb9a>
 8007bce:	3201      	adds	r2, #1
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	e746      	b.n	8007a62 <_dtoa_r+0x94a>
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	dd07      	ble.n	8007be8 <_dtoa_r+0xad0>
 8007bd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bdc:	d0ed      	beq.n	8007bba <_dtoa_r+0xaa2>
 8007bde:	f10a 0301 	add.w	r3, sl, #1
 8007be2:	f88b 3000 	strb.w	r3, [fp]
 8007be6:	e73c      	b.n	8007a62 <_dtoa_r+0x94a>
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007bee:	4599      	cmp	r9, r3
 8007bf0:	d047      	beq.n	8007c82 <_dtoa_r+0xb6a>
 8007bf2:	ee18 1a10 	vmov	r1, s16
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 fb16 	bl	800822c <__multadd>
 8007c00:	45b8      	cmp	r8, r7
 8007c02:	ee08 0a10 	vmov	s16, r0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	f04f 020a 	mov.w	r2, #10
 8007c0e:	4641      	mov	r1, r8
 8007c10:	4620      	mov	r0, r4
 8007c12:	d106      	bne.n	8007c22 <_dtoa_r+0xb0a>
 8007c14:	f000 fb0a 	bl	800822c <__multadd>
 8007c18:	4680      	mov	r8, r0
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	f109 0901 	add.w	r9, r9, #1
 8007c20:	e772      	b.n	8007b08 <_dtoa_r+0x9f0>
 8007c22:	f000 fb03 	bl	800822c <__multadd>
 8007c26:	4639      	mov	r1, r7
 8007c28:	4680      	mov	r8, r0
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	220a      	movs	r2, #10
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 fafc 	bl	800822c <__multadd>
 8007c34:	4607      	mov	r7, r0
 8007c36:	e7f1      	b.n	8007c1c <_dtoa_r+0xb04>
 8007c38:	9b03      	ldr	r3, [sp, #12]
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	9d01      	ldr	r5, [sp, #4]
 8007c3e:	ee18 0a10 	vmov	r0, s16
 8007c42:	4631      	mov	r1, r6
 8007c44:	f7ff f9da 	bl	8006ffc <quorem>
 8007c48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c4c:	9b01      	ldr	r3, [sp, #4]
 8007c4e:	f805 ab01 	strb.w	sl, [r5], #1
 8007c52:	1aea      	subs	r2, r5, r3
 8007c54:	9b02      	ldr	r3, [sp, #8]
 8007c56:	4293      	cmp	r3, r2
 8007c58:	dd09      	ble.n	8007c6e <_dtoa_r+0xb56>
 8007c5a:	ee18 1a10 	vmov	r1, s16
 8007c5e:	2300      	movs	r3, #0
 8007c60:	220a      	movs	r2, #10
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 fae2 	bl	800822c <__multadd>
 8007c68:	ee08 0a10 	vmov	s16, r0
 8007c6c:	e7e7      	b.n	8007c3e <_dtoa_r+0xb26>
 8007c6e:	9b02      	ldr	r3, [sp, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bfc8      	it	gt
 8007c74:	461d      	movgt	r5, r3
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	bfd8      	it	le
 8007c7a:	2501      	movle	r5, #1
 8007c7c:	441d      	add	r5, r3
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	ee18 1a10 	vmov	r1, s16
 8007c86:	2201      	movs	r2, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fc7f 	bl	800858c <__lshift>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	ee08 0a10 	vmov	s16, r0
 8007c94:	f000 fcea 	bl	800866c <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dc91      	bgt.n	8007bc0 <_dtoa_r+0xaa8>
 8007c9c:	d102      	bne.n	8007ca4 <_dtoa_r+0xb8c>
 8007c9e:	f01a 0f01 	tst.w	sl, #1
 8007ca2:	d18d      	bne.n	8007bc0 <_dtoa_r+0xaa8>
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	461d      	mov	r5, r3
 8007ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cac:	2a30      	cmp	r2, #48	; 0x30
 8007cae:	d0fa      	beq.n	8007ca6 <_dtoa_r+0xb8e>
 8007cb0:	e6d7      	b.n	8007a62 <_dtoa_r+0x94a>
 8007cb2:	9a01      	ldr	r2, [sp, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d184      	bne.n	8007bc2 <_dtoa_r+0xaaa>
 8007cb8:	9b00      	ldr	r3, [sp, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	2331      	movs	r3, #49	; 0x31
 8007cc0:	7013      	strb	r3, [r2, #0]
 8007cc2:	e6ce      	b.n	8007a62 <_dtoa_r+0x94a>
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <_dtoa_r+0xbd4>)
 8007cc6:	f7ff ba95 	b.w	80071f4 <_dtoa_r+0xdc>
 8007cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f47f aa6e 	bne.w	80071ae <_dtoa_r+0x96>
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <_dtoa_r+0xbd8>)
 8007cd4:	f7ff ba8e 	b.w	80071f4 <_dtoa_r+0xdc>
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	dcae      	bgt.n	8007c3c <_dtoa_r+0xb24>
 8007cde:	9b06      	ldr	r3, [sp, #24]
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	f73f aea8 	bgt.w	8007a36 <_dtoa_r+0x91e>
 8007ce6:	e7a9      	b.n	8007c3c <_dtoa_r+0xb24>
 8007ce8:	08009570 	.word	0x08009570
 8007cec:	080093cc 	.word	0x080093cc
 8007cf0:	080094f1 	.word	0x080094f1

08007cf4 <__sflush_r>:
 8007cf4:	898a      	ldrh	r2, [r1, #12]
 8007cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	0710      	lsls	r0, r2, #28
 8007cfe:	460c      	mov	r4, r1
 8007d00:	d458      	bmi.n	8007db4 <__sflush_r+0xc0>
 8007d02:	684b      	ldr	r3, [r1, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dc05      	bgt.n	8007d14 <__sflush_r+0x20>
 8007d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	dc02      	bgt.n	8007d14 <__sflush_r+0x20>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	d0f9      	beq.n	8007d0e <__sflush_r+0x1a>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d20:	682f      	ldr	r7, [r5, #0]
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	d032      	beq.n	8007d8c <__sflush_r+0x98>
 8007d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	075a      	lsls	r2, r3, #29
 8007d2c:	d505      	bpl.n	8007d3a <__sflush_r+0x46>
 8007d2e:	6863      	ldr	r3, [r4, #4]
 8007d30:	1ac0      	subs	r0, r0, r3
 8007d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d34:	b10b      	cbz	r3, 8007d3a <__sflush_r+0x46>
 8007d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d38:	1ac0      	subs	r0, r0, r3
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d40:	6a21      	ldr	r1, [r4, #32]
 8007d42:	4628      	mov	r0, r5
 8007d44:	47b0      	blx	r6
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	d106      	bne.n	8007d5a <__sflush_r+0x66>
 8007d4c:	6829      	ldr	r1, [r5, #0]
 8007d4e:	291d      	cmp	r1, #29
 8007d50:	d82c      	bhi.n	8007dac <__sflush_r+0xb8>
 8007d52:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <__sflush_r+0x108>)
 8007d54:	40ca      	lsrs	r2, r1
 8007d56:	07d6      	lsls	r6, r2, #31
 8007d58:	d528      	bpl.n	8007dac <__sflush_r+0xb8>
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	6062      	str	r2, [r4, #4]
 8007d5e:	04d9      	lsls	r1, r3, #19
 8007d60:	6922      	ldr	r2, [r4, #16]
 8007d62:	6022      	str	r2, [r4, #0]
 8007d64:	d504      	bpl.n	8007d70 <__sflush_r+0x7c>
 8007d66:	1c42      	adds	r2, r0, #1
 8007d68:	d101      	bne.n	8007d6e <__sflush_r+0x7a>
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	b903      	cbnz	r3, 8007d70 <__sflush_r+0x7c>
 8007d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d72:	602f      	str	r7, [r5, #0]
 8007d74:	2900      	cmp	r1, #0
 8007d76:	d0ca      	beq.n	8007d0e <__sflush_r+0x1a>
 8007d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	d002      	beq.n	8007d86 <__sflush_r+0x92>
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 fd8b 	bl	800889c <_free_r>
 8007d86:	2000      	movs	r0, #0
 8007d88:	6360      	str	r0, [r4, #52]	; 0x34
 8007d8a:	e7c1      	b.n	8007d10 <__sflush_r+0x1c>
 8007d8c:	6a21      	ldr	r1, [r4, #32]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b0      	blx	r6
 8007d94:	1c41      	adds	r1, r0, #1
 8007d96:	d1c7      	bne.n	8007d28 <__sflush_r+0x34>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0c4      	beq.n	8007d28 <__sflush_r+0x34>
 8007d9e:	2b1d      	cmp	r3, #29
 8007da0:	d001      	beq.n	8007da6 <__sflush_r+0xb2>
 8007da2:	2b16      	cmp	r3, #22
 8007da4:	d101      	bne.n	8007daa <__sflush_r+0xb6>
 8007da6:	602f      	str	r7, [r5, #0]
 8007da8:	e7b1      	b.n	8007d0e <__sflush_r+0x1a>
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	e7ad      	b.n	8007d10 <__sflush_r+0x1c>
 8007db4:	690f      	ldr	r7, [r1, #16]
 8007db6:	2f00      	cmp	r7, #0
 8007db8:	d0a9      	beq.n	8007d0e <__sflush_r+0x1a>
 8007dba:	0793      	lsls	r3, r2, #30
 8007dbc:	680e      	ldr	r6, [r1, #0]
 8007dbe:	bf08      	it	eq
 8007dc0:	694b      	ldreq	r3, [r1, #20]
 8007dc2:	600f      	str	r7, [r1, #0]
 8007dc4:	bf18      	it	ne
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	eba6 0807 	sub.w	r8, r6, r7
 8007dcc:	608b      	str	r3, [r1, #8]
 8007dce:	f1b8 0f00 	cmp.w	r8, #0
 8007dd2:	dd9c      	ble.n	8007d0e <__sflush_r+0x1a>
 8007dd4:	6a21      	ldr	r1, [r4, #32]
 8007dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dd8:	4643      	mov	r3, r8
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b0      	blx	r6
 8007de0:	2800      	cmp	r0, #0
 8007de2:	dc06      	bgt.n	8007df2 <__sflush_r+0xfe>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dea:	81a3      	strh	r3, [r4, #12]
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	e78e      	b.n	8007d10 <__sflush_r+0x1c>
 8007df2:	4407      	add	r7, r0
 8007df4:	eba8 0800 	sub.w	r8, r8, r0
 8007df8:	e7e9      	b.n	8007dce <__sflush_r+0xda>
 8007dfa:	bf00      	nop
 8007dfc:	20400001 	.word	0x20400001

08007e00 <_fflush_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	690b      	ldr	r3, [r1, #16]
 8007e04:	4605      	mov	r5, r0
 8007e06:	460c      	mov	r4, r1
 8007e08:	b913      	cbnz	r3, 8007e10 <_fflush_r+0x10>
 8007e0a:	2500      	movs	r5, #0
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	b118      	cbz	r0, 8007e1a <_fflush_r+0x1a>
 8007e12:	6983      	ldr	r3, [r0, #24]
 8007e14:	b90b      	cbnz	r3, 8007e1a <_fflush_r+0x1a>
 8007e16:	f000 f887 	bl	8007f28 <__sinit>
 8007e1a:	4b14      	ldr	r3, [pc, #80]	; (8007e6c <_fflush_r+0x6c>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	d11b      	bne.n	8007e58 <_fflush_r+0x58>
 8007e20:	686c      	ldr	r4, [r5, #4]
 8007e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0ef      	beq.n	8007e0a <_fflush_r+0xa>
 8007e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e2c:	07d0      	lsls	r0, r2, #31
 8007e2e:	d404      	bmi.n	8007e3a <_fflush_r+0x3a>
 8007e30:	0599      	lsls	r1, r3, #22
 8007e32:	d402      	bmi.n	8007e3a <_fflush_r+0x3a>
 8007e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e36:	f000 f91a 	bl	800806e <__retarget_lock_acquire_recursive>
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	f7ff ff59 	bl	8007cf4 <__sflush_r>
 8007e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e44:	07da      	lsls	r2, r3, #31
 8007e46:	4605      	mov	r5, r0
 8007e48:	d4e0      	bmi.n	8007e0c <_fflush_r+0xc>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	059b      	lsls	r3, r3, #22
 8007e4e:	d4dd      	bmi.n	8007e0c <_fflush_r+0xc>
 8007e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e52:	f000 f90d 	bl	8008070 <__retarget_lock_release_recursive>
 8007e56:	e7d9      	b.n	8007e0c <_fflush_r+0xc>
 8007e58:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <_fflush_r+0x70>)
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	d101      	bne.n	8007e62 <_fflush_r+0x62>
 8007e5e:	68ac      	ldr	r4, [r5, #8]
 8007e60:	e7df      	b.n	8007e22 <_fflush_r+0x22>
 8007e62:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <_fflush_r+0x74>)
 8007e64:	429c      	cmp	r4, r3
 8007e66:	bf08      	it	eq
 8007e68:	68ec      	ldreq	r4, [r5, #12]
 8007e6a:	e7da      	b.n	8007e22 <_fflush_r+0x22>
 8007e6c:	080095a4 	.word	0x080095a4
 8007e70:	080095c4 	.word	0x080095c4
 8007e74:	08009584 	.word	0x08009584

08007e78 <std>:
 8007e78:	2300      	movs	r3, #0
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e86:	6083      	str	r3, [r0, #8]
 8007e88:	8181      	strh	r1, [r0, #12]
 8007e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e8c:	81c2      	strh	r2, [r0, #14]
 8007e8e:	6183      	str	r3, [r0, #24]
 8007e90:	4619      	mov	r1, r3
 8007e92:	2208      	movs	r2, #8
 8007e94:	305c      	adds	r0, #92	; 0x5c
 8007e96:	f7fe fa5d 	bl	8006354 <memset>
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <std+0x38>)
 8007e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e9e:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <std+0x3c>)
 8007ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <std+0x40>)
 8007ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <std+0x44>)
 8007ea8:	6224      	str	r4, [r4, #32]
 8007eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	08008d35 	.word	0x08008d35
 8007eb4:	08008d57 	.word	0x08008d57
 8007eb8:	08008d8f 	.word	0x08008d8f
 8007ebc:	08008db3 	.word	0x08008db3

08007ec0 <_cleanup_r>:
 8007ec0:	4901      	ldr	r1, [pc, #4]	; (8007ec8 <_cleanup_r+0x8>)
 8007ec2:	f000 b8af 	b.w	8008024 <_fwalk_reent>
 8007ec6:	bf00      	nop
 8007ec8:	08007e01 	.word	0x08007e01

08007ecc <__sfmoreglue>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	2268      	movs	r2, #104	; 0x68
 8007ed0:	1e4d      	subs	r5, r1, #1
 8007ed2:	4355      	muls	r5, r2
 8007ed4:	460e      	mov	r6, r1
 8007ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eda:	f000 fd4b 	bl	8008974 <_malloc_r>
 8007ede:	4604      	mov	r4, r0
 8007ee0:	b140      	cbz	r0, 8007ef4 <__sfmoreglue+0x28>
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ee8:	300c      	adds	r0, #12
 8007eea:	60a0      	str	r0, [r4, #8]
 8007eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ef0:	f7fe fa30 	bl	8006354 <memset>
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}

08007ef8 <__sfp_lock_acquire>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__sfp_lock_acquire+0x8>)
 8007efa:	f000 b8b8 	b.w	800806e <__retarget_lock_acquire_recursive>
 8007efe:	bf00      	nop
 8007f00:	200003d5 	.word	0x200003d5

08007f04 <__sfp_lock_release>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__sfp_lock_release+0x8>)
 8007f06:	f000 b8b3 	b.w	8008070 <__retarget_lock_release_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	200003d5 	.word	0x200003d5

08007f10 <__sinit_lock_acquire>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__sinit_lock_acquire+0x8>)
 8007f12:	f000 b8ac 	b.w	800806e <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	200003d6 	.word	0x200003d6

08007f1c <__sinit_lock_release>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__sinit_lock_release+0x8>)
 8007f1e:	f000 b8a7 	b.w	8008070 <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	200003d6 	.word	0x200003d6

08007f28 <__sinit>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f7ff fff0 	bl	8007f10 <__sinit_lock_acquire>
 8007f30:	69a3      	ldr	r3, [r4, #24]
 8007f32:	b11b      	cbz	r3, 8007f3c <__sinit+0x14>
 8007f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f38:	f7ff bff0 	b.w	8007f1c <__sinit_lock_release>
 8007f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f40:	6523      	str	r3, [r4, #80]	; 0x50
 8007f42:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <__sinit+0x68>)
 8007f44:	4a13      	ldr	r2, [pc, #76]	; (8007f94 <__sinit+0x6c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	bf04      	itt	eq
 8007f4e:	2301      	moveq	r3, #1
 8007f50:	61a3      	streq	r3, [r4, #24]
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 f820 	bl	8007f98 <__sfp>
 8007f58:	6060      	str	r0, [r4, #4]
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 f81c 	bl	8007f98 <__sfp>
 8007f60:	60a0      	str	r0, [r4, #8]
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 f818 	bl	8007f98 <__sfp>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	60e0      	str	r0, [r4, #12]
 8007f6c:	2104      	movs	r1, #4
 8007f6e:	6860      	ldr	r0, [r4, #4]
 8007f70:	f7ff ff82 	bl	8007e78 <std>
 8007f74:	68a0      	ldr	r0, [r4, #8]
 8007f76:	2201      	movs	r2, #1
 8007f78:	2109      	movs	r1, #9
 8007f7a:	f7ff ff7d 	bl	8007e78 <std>
 8007f7e:	68e0      	ldr	r0, [r4, #12]
 8007f80:	2202      	movs	r2, #2
 8007f82:	2112      	movs	r1, #18
 8007f84:	f7ff ff78 	bl	8007e78 <std>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	61a3      	str	r3, [r4, #24]
 8007f8c:	e7d2      	b.n	8007f34 <__sinit+0xc>
 8007f8e:	bf00      	nop
 8007f90:	080093b8 	.word	0x080093b8
 8007f94:	08007ec1 	.word	0x08007ec1

08007f98 <__sfp>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	f7ff ffac 	bl	8007ef8 <__sfp_lock_acquire>
 8007fa0:	4b1e      	ldr	r3, [pc, #120]	; (800801c <__sfp+0x84>)
 8007fa2:	681e      	ldr	r6, [r3, #0]
 8007fa4:	69b3      	ldr	r3, [r6, #24]
 8007fa6:	b913      	cbnz	r3, 8007fae <__sfp+0x16>
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff ffbd 	bl	8007f28 <__sinit>
 8007fae:	3648      	adds	r6, #72	; 0x48
 8007fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	d503      	bpl.n	8007fc0 <__sfp+0x28>
 8007fb8:	6833      	ldr	r3, [r6, #0]
 8007fba:	b30b      	cbz	r3, 8008000 <__sfp+0x68>
 8007fbc:	6836      	ldr	r6, [r6, #0]
 8007fbe:	e7f7      	b.n	8007fb0 <__sfp+0x18>
 8007fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fc4:	b9d5      	cbnz	r5, 8007ffc <__sfp+0x64>
 8007fc6:	4b16      	ldr	r3, [pc, #88]	; (8008020 <__sfp+0x88>)
 8007fc8:	60e3      	str	r3, [r4, #12]
 8007fca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fce:	6665      	str	r5, [r4, #100]	; 0x64
 8007fd0:	f000 f84c 	bl	800806c <__retarget_lock_init_recursive>
 8007fd4:	f7ff ff96 	bl	8007f04 <__sfp_lock_release>
 8007fd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fe0:	6025      	str	r5, [r4, #0]
 8007fe2:	61a5      	str	r5, [r4, #24]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fec:	f7fe f9b2 	bl	8006354 <memset>
 8007ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ffc:	3468      	adds	r4, #104	; 0x68
 8007ffe:	e7d9      	b.n	8007fb4 <__sfp+0x1c>
 8008000:	2104      	movs	r1, #4
 8008002:	4638      	mov	r0, r7
 8008004:	f7ff ff62 	bl	8007ecc <__sfmoreglue>
 8008008:	4604      	mov	r4, r0
 800800a:	6030      	str	r0, [r6, #0]
 800800c:	2800      	cmp	r0, #0
 800800e:	d1d5      	bne.n	8007fbc <__sfp+0x24>
 8008010:	f7ff ff78 	bl	8007f04 <__sfp_lock_release>
 8008014:	230c      	movs	r3, #12
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	e7ee      	b.n	8007ff8 <__sfp+0x60>
 800801a:	bf00      	nop
 800801c:	080093b8 	.word	0x080093b8
 8008020:	ffff0001 	.word	0xffff0001

08008024 <_fwalk_reent>:
 8008024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008028:	4606      	mov	r6, r0
 800802a:	4688      	mov	r8, r1
 800802c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008030:	2700      	movs	r7, #0
 8008032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008036:	f1b9 0901 	subs.w	r9, r9, #1
 800803a:	d505      	bpl.n	8008048 <_fwalk_reent+0x24>
 800803c:	6824      	ldr	r4, [r4, #0]
 800803e:	2c00      	cmp	r4, #0
 8008040:	d1f7      	bne.n	8008032 <_fwalk_reent+0xe>
 8008042:	4638      	mov	r0, r7
 8008044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008048:	89ab      	ldrh	r3, [r5, #12]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d907      	bls.n	800805e <_fwalk_reent+0x3a>
 800804e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008052:	3301      	adds	r3, #1
 8008054:	d003      	beq.n	800805e <_fwalk_reent+0x3a>
 8008056:	4629      	mov	r1, r5
 8008058:	4630      	mov	r0, r6
 800805a:	47c0      	blx	r8
 800805c:	4307      	orrs	r7, r0
 800805e:	3568      	adds	r5, #104	; 0x68
 8008060:	e7e9      	b.n	8008036 <_fwalk_reent+0x12>
	...

08008064 <_localeconv_r>:
 8008064:	4800      	ldr	r0, [pc, #0]	; (8008068 <_localeconv_r+0x4>)
 8008066:	4770      	bx	lr
 8008068:	20000160 	.word	0x20000160

0800806c <__retarget_lock_init_recursive>:
 800806c:	4770      	bx	lr

0800806e <__retarget_lock_acquire_recursive>:
 800806e:	4770      	bx	lr

08008070 <__retarget_lock_release_recursive>:
 8008070:	4770      	bx	lr

08008072 <__swhatbuf_r>:
 8008072:	b570      	push	{r4, r5, r6, lr}
 8008074:	460e      	mov	r6, r1
 8008076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807a:	2900      	cmp	r1, #0
 800807c:	b096      	sub	sp, #88	; 0x58
 800807e:	4614      	mov	r4, r2
 8008080:	461d      	mov	r5, r3
 8008082:	da08      	bge.n	8008096 <__swhatbuf_r+0x24>
 8008084:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	602a      	str	r2, [r5, #0]
 800808c:	061a      	lsls	r2, r3, #24
 800808e:	d410      	bmi.n	80080b2 <__swhatbuf_r+0x40>
 8008090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008094:	e00e      	b.n	80080b4 <__swhatbuf_r+0x42>
 8008096:	466a      	mov	r2, sp
 8008098:	f000 fee2 	bl	8008e60 <_fstat_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	dbf1      	blt.n	8008084 <__swhatbuf_r+0x12>
 80080a0:	9a01      	ldr	r2, [sp, #4]
 80080a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080aa:	425a      	negs	r2, r3
 80080ac:	415a      	adcs	r2, r3
 80080ae:	602a      	str	r2, [r5, #0]
 80080b0:	e7ee      	b.n	8008090 <__swhatbuf_r+0x1e>
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	2000      	movs	r0, #0
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	b016      	add	sp, #88	; 0x58
 80080ba:	bd70      	pop	{r4, r5, r6, pc}

080080bc <__smakebuf_r>:
 80080bc:	898b      	ldrh	r3, [r1, #12]
 80080be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080c0:	079d      	lsls	r5, r3, #30
 80080c2:	4606      	mov	r6, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	d507      	bpl.n	80080d8 <__smakebuf_r+0x1c>
 80080c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	2301      	movs	r3, #1
 80080d2:	6163      	str	r3, [r4, #20]
 80080d4:	b002      	add	sp, #8
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	ab01      	add	r3, sp, #4
 80080da:	466a      	mov	r2, sp
 80080dc:	f7ff ffc9 	bl	8008072 <__swhatbuf_r>
 80080e0:	9900      	ldr	r1, [sp, #0]
 80080e2:	4605      	mov	r5, r0
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 fc45 	bl	8008974 <_malloc_r>
 80080ea:	b948      	cbnz	r0, 8008100 <__smakebuf_r+0x44>
 80080ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f0:	059a      	lsls	r2, r3, #22
 80080f2:	d4ef      	bmi.n	80080d4 <__smakebuf_r+0x18>
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	f043 0302 	orr.w	r3, r3, #2
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	e7e3      	b.n	80080c8 <__smakebuf_r+0xc>
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <__smakebuf_r+0x7c>)
 8008102:	62b3      	str	r3, [r6, #40]	; 0x28
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	6020      	str	r0, [r4, #0]
 8008108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	6163      	str	r3, [r4, #20]
 8008112:	9b01      	ldr	r3, [sp, #4]
 8008114:	6120      	str	r0, [r4, #16]
 8008116:	b15b      	cbz	r3, 8008130 <__smakebuf_r+0x74>
 8008118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800811c:	4630      	mov	r0, r6
 800811e:	f000 feb1 	bl	8008e84 <_isatty_r>
 8008122:	b128      	cbz	r0, 8008130 <__smakebuf_r+0x74>
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	f023 0303 	bic.w	r3, r3, #3
 800812a:	f043 0301 	orr.w	r3, r3, #1
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	89a0      	ldrh	r0, [r4, #12]
 8008132:	4305      	orrs	r5, r0
 8008134:	81a5      	strh	r5, [r4, #12]
 8008136:	e7cd      	b.n	80080d4 <__smakebuf_r+0x18>
 8008138:	08007ec1 	.word	0x08007ec1

0800813c <malloc>:
 800813c:	4b02      	ldr	r3, [pc, #8]	; (8008148 <malloc+0xc>)
 800813e:	4601      	mov	r1, r0
 8008140:	6818      	ldr	r0, [r3, #0]
 8008142:	f000 bc17 	b.w	8008974 <_malloc_r>
 8008146:	bf00      	nop
 8008148:	2000000c 	.word	0x2000000c

0800814c <memcpy>:
 800814c:	440a      	add	r2, r1
 800814e:	4291      	cmp	r1, r2
 8008150:	f100 33ff 	add.w	r3, r0, #4294967295
 8008154:	d100      	bne.n	8008158 <memcpy+0xc>
 8008156:	4770      	bx	lr
 8008158:	b510      	push	{r4, lr}
 800815a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800815e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008162:	4291      	cmp	r1, r2
 8008164:	d1f9      	bne.n	800815a <memcpy+0xe>
 8008166:	bd10      	pop	{r4, pc}

08008168 <_Balloc>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	b976      	cbnz	r6, 8008190 <_Balloc+0x28>
 8008172:	2010      	movs	r0, #16
 8008174:	f7ff ffe2 	bl	800813c <malloc>
 8008178:	4602      	mov	r2, r0
 800817a:	6260      	str	r0, [r4, #36]	; 0x24
 800817c:	b920      	cbnz	r0, 8008188 <_Balloc+0x20>
 800817e:	4b18      	ldr	r3, [pc, #96]	; (80081e0 <_Balloc+0x78>)
 8008180:	4818      	ldr	r0, [pc, #96]	; (80081e4 <_Balloc+0x7c>)
 8008182:	2166      	movs	r1, #102	; 0x66
 8008184:	f000 fe2c 	bl	8008de0 <__assert_func>
 8008188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800818c:	6006      	str	r6, [r0, #0]
 800818e:	60c6      	str	r6, [r0, #12]
 8008190:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008192:	68f3      	ldr	r3, [r6, #12]
 8008194:	b183      	cbz	r3, 80081b8 <_Balloc+0x50>
 8008196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800819e:	b9b8      	cbnz	r0, 80081d0 <_Balloc+0x68>
 80081a0:	2101      	movs	r1, #1
 80081a2:	fa01 f605 	lsl.w	r6, r1, r5
 80081a6:	1d72      	adds	r2, r6, #5
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 fb60 	bl	8008870 <_calloc_r>
 80081b0:	b160      	cbz	r0, 80081cc <_Balloc+0x64>
 80081b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081b6:	e00e      	b.n	80081d6 <_Balloc+0x6e>
 80081b8:	2221      	movs	r2, #33	; 0x21
 80081ba:	2104      	movs	r1, #4
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 fb57 	bl	8008870 <_calloc_r>
 80081c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c4:	60f0      	str	r0, [r6, #12]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e4      	bne.n	8008196 <_Balloc+0x2e>
 80081cc:	2000      	movs	r0, #0
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	6802      	ldr	r2, [r0, #0]
 80081d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081d6:	2300      	movs	r3, #0
 80081d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081dc:	e7f7      	b.n	80081ce <_Balloc+0x66>
 80081de:	bf00      	nop
 80081e0:	080094fe 	.word	0x080094fe
 80081e4:	080095e4 	.word	0x080095e4

080081e8 <_Bfree>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081ec:	4605      	mov	r5, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	b976      	cbnz	r6, 8008210 <_Bfree+0x28>
 80081f2:	2010      	movs	r0, #16
 80081f4:	f7ff ffa2 	bl	800813c <malloc>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6268      	str	r0, [r5, #36]	; 0x24
 80081fc:	b920      	cbnz	r0, 8008208 <_Bfree+0x20>
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <_Bfree+0x3c>)
 8008200:	4809      	ldr	r0, [pc, #36]	; (8008228 <_Bfree+0x40>)
 8008202:	218a      	movs	r1, #138	; 0x8a
 8008204:	f000 fdec 	bl	8008de0 <__assert_func>
 8008208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800820c:	6006      	str	r6, [r0, #0]
 800820e:	60c6      	str	r6, [r0, #12]
 8008210:	b13c      	cbz	r4, 8008222 <_Bfree+0x3a>
 8008212:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008214:	6862      	ldr	r2, [r4, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800821c:	6021      	str	r1, [r4, #0]
 800821e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	080094fe 	.word	0x080094fe
 8008228:	080095e4 	.word	0x080095e4

0800822c <__multadd>:
 800822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008230:	690d      	ldr	r5, [r1, #16]
 8008232:	4607      	mov	r7, r0
 8008234:	460c      	mov	r4, r1
 8008236:	461e      	mov	r6, r3
 8008238:	f101 0c14 	add.w	ip, r1, #20
 800823c:	2000      	movs	r0, #0
 800823e:	f8dc 3000 	ldr.w	r3, [ip]
 8008242:	b299      	uxth	r1, r3
 8008244:	fb02 6101 	mla	r1, r2, r1, r6
 8008248:	0c1e      	lsrs	r6, r3, #16
 800824a:	0c0b      	lsrs	r3, r1, #16
 800824c:	fb02 3306 	mla	r3, r2, r6, r3
 8008250:	b289      	uxth	r1, r1
 8008252:	3001      	adds	r0, #1
 8008254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008258:	4285      	cmp	r5, r0
 800825a:	f84c 1b04 	str.w	r1, [ip], #4
 800825e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008262:	dcec      	bgt.n	800823e <__multadd+0x12>
 8008264:	b30e      	cbz	r6, 80082aa <__multadd+0x7e>
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	42ab      	cmp	r3, r5
 800826a:	dc19      	bgt.n	80082a0 <__multadd+0x74>
 800826c:	6861      	ldr	r1, [r4, #4]
 800826e:	4638      	mov	r0, r7
 8008270:	3101      	adds	r1, #1
 8008272:	f7ff ff79 	bl	8008168 <_Balloc>
 8008276:	4680      	mov	r8, r0
 8008278:	b928      	cbnz	r0, 8008286 <__multadd+0x5a>
 800827a:	4602      	mov	r2, r0
 800827c:	4b0c      	ldr	r3, [pc, #48]	; (80082b0 <__multadd+0x84>)
 800827e:	480d      	ldr	r0, [pc, #52]	; (80082b4 <__multadd+0x88>)
 8008280:	21b5      	movs	r1, #181	; 0xb5
 8008282:	f000 fdad 	bl	8008de0 <__assert_func>
 8008286:	6922      	ldr	r2, [r4, #16]
 8008288:	3202      	adds	r2, #2
 800828a:	f104 010c 	add.w	r1, r4, #12
 800828e:	0092      	lsls	r2, r2, #2
 8008290:	300c      	adds	r0, #12
 8008292:	f7ff ff5b 	bl	800814c <memcpy>
 8008296:	4621      	mov	r1, r4
 8008298:	4638      	mov	r0, r7
 800829a:	f7ff ffa5 	bl	80081e8 <_Bfree>
 800829e:	4644      	mov	r4, r8
 80082a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082a4:	3501      	adds	r5, #1
 80082a6:	615e      	str	r6, [r3, #20]
 80082a8:	6125      	str	r5, [r4, #16]
 80082aa:	4620      	mov	r0, r4
 80082ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b0:	08009570 	.word	0x08009570
 80082b4:	080095e4 	.word	0x080095e4

080082b8 <__hi0bits>:
 80082b8:	0c03      	lsrs	r3, r0, #16
 80082ba:	041b      	lsls	r3, r3, #16
 80082bc:	b9d3      	cbnz	r3, 80082f4 <__hi0bits+0x3c>
 80082be:	0400      	lsls	r0, r0, #16
 80082c0:	2310      	movs	r3, #16
 80082c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082c6:	bf04      	itt	eq
 80082c8:	0200      	lsleq	r0, r0, #8
 80082ca:	3308      	addeq	r3, #8
 80082cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082d0:	bf04      	itt	eq
 80082d2:	0100      	lsleq	r0, r0, #4
 80082d4:	3304      	addeq	r3, #4
 80082d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082da:	bf04      	itt	eq
 80082dc:	0080      	lsleq	r0, r0, #2
 80082de:	3302      	addeq	r3, #2
 80082e0:	2800      	cmp	r0, #0
 80082e2:	db05      	blt.n	80082f0 <__hi0bits+0x38>
 80082e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082e8:	f103 0301 	add.w	r3, r3, #1
 80082ec:	bf08      	it	eq
 80082ee:	2320      	moveq	r3, #32
 80082f0:	4618      	mov	r0, r3
 80082f2:	4770      	bx	lr
 80082f4:	2300      	movs	r3, #0
 80082f6:	e7e4      	b.n	80082c2 <__hi0bits+0xa>

080082f8 <__lo0bits>:
 80082f8:	6803      	ldr	r3, [r0, #0]
 80082fa:	f013 0207 	ands.w	r2, r3, #7
 80082fe:	4601      	mov	r1, r0
 8008300:	d00b      	beq.n	800831a <__lo0bits+0x22>
 8008302:	07da      	lsls	r2, r3, #31
 8008304:	d423      	bmi.n	800834e <__lo0bits+0x56>
 8008306:	0798      	lsls	r0, r3, #30
 8008308:	bf49      	itett	mi
 800830a:	085b      	lsrmi	r3, r3, #1
 800830c:	089b      	lsrpl	r3, r3, #2
 800830e:	2001      	movmi	r0, #1
 8008310:	600b      	strmi	r3, [r1, #0]
 8008312:	bf5c      	itt	pl
 8008314:	600b      	strpl	r3, [r1, #0]
 8008316:	2002      	movpl	r0, #2
 8008318:	4770      	bx	lr
 800831a:	b298      	uxth	r0, r3
 800831c:	b9a8      	cbnz	r0, 800834a <__lo0bits+0x52>
 800831e:	0c1b      	lsrs	r3, r3, #16
 8008320:	2010      	movs	r0, #16
 8008322:	b2da      	uxtb	r2, r3
 8008324:	b90a      	cbnz	r2, 800832a <__lo0bits+0x32>
 8008326:	3008      	adds	r0, #8
 8008328:	0a1b      	lsrs	r3, r3, #8
 800832a:	071a      	lsls	r2, r3, #28
 800832c:	bf04      	itt	eq
 800832e:	091b      	lsreq	r3, r3, #4
 8008330:	3004      	addeq	r0, #4
 8008332:	079a      	lsls	r2, r3, #30
 8008334:	bf04      	itt	eq
 8008336:	089b      	lsreq	r3, r3, #2
 8008338:	3002      	addeq	r0, #2
 800833a:	07da      	lsls	r2, r3, #31
 800833c:	d403      	bmi.n	8008346 <__lo0bits+0x4e>
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	f100 0001 	add.w	r0, r0, #1
 8008344:	d005      	beq.n	8008352 <__lo0bits+0x5a>
 8008346:	600b      	str	r3, [r1, #0]
 8008348:	4770      	bx	lr
 800834a:	4610      	mov	r0, r2
 800834c:	e7e9      	b.n	8008322 <__lo0bits+0x2a>
 800834e:	2000      	movs	r0, #0
 8008350:	4770      	bx	lr
 8008352:	2020      	movs	r0, #32
 8008354:	4770      	bx	lr
	...

08008358 <__i2b>:
 8008358:	b510      	push	{r4, lr}
 800835a:	460c      	mov	r4, r1
 800835c:	2101      	movs	r1, #1
 800835e:	f7ff ff03 	bl	8008168 <_Balloc>
 8008362:	4602      	mov	r2, r0
 8008364:	b928      	cbnz	r0, 8008372 <__i2b+0x1a>
 8008366:	4b05      	ldr	r3, [pc, #20]	; (800837c <__i2b+0x24>)
 8008368:	4805      	ldr	r0, [pc, #20]	; (8008380 <__i2b+0x28>)
 800836a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800836e:	f000 fd37 	bl	8008de0 <__assert_func>
 8008372:	2301      	movs	r3, #1
 8008374:	6144      	str	r4, [r0, #20]
 8008376:	6103      	str	r3, [r0, #16]
 8008378:	bd10      	pop	{r4, pc}
 800837a:	bf00      	nop
 800837c:	08009570 	.word	0x08009570
 8008380:	080095e4 	.word	0x080095e4

08008384 <__multiply>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	4691      	mov	r9, r2
 800838a:	690a      	ldr	r2, [r1, #16]
 800838c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008390:	429a      	cmp	r2, r3
 8008392:	bfb8      	it	lt
 8008394:	460b      	movlt	r3, r1
 8008396:	460c      	mov	r4, r1
 8008398:	bfbc      	itt	lt
 800839a:	464c      	movlt	r4, r9
 800839c:	4699      	movlt	r9, r3
 800839e:	6927      	ldr	r7, [r4, #16]
 80083a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083a4:	68a3      	ldr	r3, [r4, #8]
 80083a6:	6861      	ldr	r1, [r4, #4]
 80083a8:	eb07 060a 	add.w	r6, r7, sl
 80083ac:	42b3      	cmp	r3, r6
 80083ae:	b085      	sub	sp, #20
 80083b0:	bfb8      	it	lt
 80083b2:	3101      	addlt	r1, #1
 80083b4:	f7ff fed8 	bl	8008168 <_Balloc>
 80083b8:	b930      	cbnz	r0, 80083c8 <__multiply+0x44>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4b44      	ldr	r3, [pc, #272]	; (80084d0 <__multiply+0x14c>)
 80083be:	4845      	ldr	r0, [pc, #276]	; (80084d4 <__multiply+0x150>)
 80083c0:	f240 115d 	movw	r1, #349	; 0x15d
 80083c4:	f000 fd0c 	bl	8008de0 <__assert_func>
 80083c8:	f100 0514 	add.w	r5, r0, #20
 80083cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083d0:	462b      	mov	r3, r5
 80083d2:	2200      	movs	r2, #0
 80083d4:	4543      	cmp	r3, r8
 80083d6:	d321      	bcc.n	800841c <__multiply+0x98>
 80083d8:	f104 0314 	add.w	r3, r4, #20
 80083dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083e0:	f109 0314 	add.w	r3, r9, #20
 80083e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083e8:	9202      	str	r2, [sp, #8]
 80083ea:	1b3a      	subs	r2, r7, r4
 80083ec:	3a15      	subs	r2, #21
 80083ee:	f022 0203 	bic.w	r2, r2, #3
 80083f2:	3204      	adds	r2, #4
 80083f4:	f104 0115 	add.w	r1, r4, #21
 80083f8:	428f      	cmp	r7, r1
 80083fa:	bf38      	it	cc
 80083fc:	2204      	movcc	r2, #4
 80083fe:	9201      	str	r2, [sp, #4]
 8008400:	9a02      	ldr	r2, [sp, #8]
 8008402:	9303      	str	r3, [sp, #12]
 8008404:	429a      	cmp	r2, r3
 8008406:	d80c      	bhi.n	8008422 <__multiply+0x9e>
 8008408:	2e00      	cmp	r6, #0
 800840a:	dd03      	ble.n	8008414 <__multiply+0x90>
 800840c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008410:	2b00      	cmp	r3, #0
 8008412:	d05a      	beq.n	80084ca <__multiply+0x146>
 8008414:	6106      	str	r6, [r0, #16]
 8008416:	b005      	add	sp, #20
 8008418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841c:	f843 2b04 	str.w	r2, [r3], #4
 8008420:	e7d8      	b.n	80083d4 <__multiply+0x50>
 8008422:	f8b3 a000 	ldrh.w	sl, [r3]
 8008426:	f1ba 0f00 	cmp.w	sl, #0
 800842a:	d024      	beq.n	8008476 <__multiply+0xf2>
 800842c:	f104 0e14 	add.w	lr, r4, #20
 8008430:	46a9      	mov	r9, r5
 8008432:	f04f 0c00 	mov.w	ip, #0
 8008436:	f85e 2b04 	ldr.w	r2, [lr], #4
 800843a:	f8d9 1000 	ldr.w	r1, [r9]
 800843e:	fa1f fb82 	uxth.w	fp, r2
 8008442:	b289      	uxth	r1, r1
 8008444:	fb0a 110b 	mla	r1, sl, fp, r1
 8008448:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800844c:	f8d9 2000 	ldr.w	r2, [r9]
 8008450:	4461      	add	r1, ip
 8008452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008456:	fb0a c20b 	mla	r2, sl, fp, ip
 800845a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800845e:	b289      	uxth	r1, r1
 8008460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008464:	4577      	cmp	r7, lr
 8008466:	f849 1b04 	str.w	r1, [r9], #4
 800846a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800846e:	d8e2      	bhi.n	8008436 <__multiply+0xb2>
 8008470:	9a01      	ldr	r2, [sp, #4]
 8008472:	f845 c002 	str.w	ip, [r5, r2]
 8008476:	9a03      	ldr	r2, [sp, #12]
 8008478:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800847c:	3304      	adds	r3, #4
 800847e:	f1b9 0f00 	cmp.w	r9, #0
 8008482:	d020      	beq.n	80084c6 <__multiply+0x142>
 8008484:	6829      	ldr	r1, [r5, #0]
 8008486:	f104 0c14 	add.w	ip, r4, #20
 800848a:	46ae      	mov	lr, r5
 800848c:	f04f 0a00 	mov.w	sl, #0
 8008490:	f8bc b000 	ldrh.w	fp, [ip]
 8008494:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008498:	fb09 220b 	mla	r2, r9, fp, r2
 800849c:	4492      	add	sl, r2
 800849e:	b289      	uxth	r1, r1
 80084a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084a4:	f84e 1b04 	str.w	r1, [lr], #4
 80084a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084ac:	f8be 1000 	ldrh.w	r1, [lr]
 80084b0:	0c12      	lsrs	r2, r2, #16
 80084b2:	fb09 1102 	mla	r1, r9, r2, r1
 80084b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80084ba:	4567      	cmp	r7, ip
 80084bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084c0:	d8e6      	bhi.n	8008490 <__multiply+0x10c>
 80084c2:	9a01      	ldr	r2, [sp, #4]
 80084c4:	50a9      	str	r1, [r5, r2]
 80084c6:	3504      	adds	r5, #4
 80084c8:	e79a      	b.n	8008400 <__multiply+0x7c>
 80084ca:	3e01      	subs	r6, #1
 80084cc:	e79c      	b.n	8008408 <__multiply+0x84>
 80084ce:	bf00      	nop
 80084d0:	08009570 	.word	0x08009570
 80084d4:	080095e4 	.word	0x080095e4

080084d8 <__pow5mult>:
 80084d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084dc:	4615      	mov	r5, r2
 80084de:	f012 0203 	ands.w	r2, r2, #3
 80084e2:	4606      	mov	r6, r0
 80084e4:	460f      	mov	r7, r1
 80084e6:	d007      	beq.n	80084f8 <__pow5mult+0x20>
 80084e8:	4c25      	ldr	r4, [pc, #148]	; (8008580 <__pow5mult+0xa8>)
 80084ea:	3a01      	subs	r2, #1
 80084ec:	2300      	movs	r3, #0
 80084ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084f2:	f7ff fe9b 	bl	800822c <__multadd>
 80084f6:	4607      	mov	r7, r0
 80084f8:	10ad      	asrs	r5, r5, #2
 80084fa:	d03d      	beq.n	8008578 <__pow5mult+0xa0>
 80084fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084fe:	b97c      	cbnz	r4, 8008520 <__pow5mult+0x48>
 8008500:	2010      	movs	r0, #16
 8008502:	f7ff fe1b 	bl	800813c <malloc>
 8008506:	4602      	mov	r2, r0
 8008508:	6270      	str	r0, [r6, #36]	; 0x24
 800850a:	b928      	cbnz	r0, 8008518 <__pow5mult+0x40>
 800850c:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <__pow5mult+0xac>)
 800850e:	481e      	ldr	r0, [pc, #120]	; (8008588 <__pow5mult+0xb0>)
 8008510:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008514:	f000 fc64 	bl	8008de0 <__assert_func>
 8008518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800851c:	6004      	str	r4, [r0, #0]
 800851e:	60c4      	str	r4, [r0, #12]
 8008520:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008528:	b94c      	cbnz	r4, 800853e <__pow5mult+0x66>
 800852a:	f240 2171 	movw	r1, #625	; 0x271
 800852e:	4630      	mov	r0, r6
 8008530:	f7ff ff12 	bl	8008358 <__i2b>
 8008534:	2300      	movs	r3, #0
 8008536:	f8c8 0008 	str.w	r0, [r8, #8]
 800853a:	4604      	mov	r4, r0
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	f04f 0900 	mov.w	r9, #0
 8008542:	07eb      	lsls	r3, r5, #31
 8008544:	d50a      	bpl.n	800855c <__pow5mult+0x84>
 8008546:	4639      	mov	r1, r7
 8008548:	4622      	mov	r2, r4
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff ff1a 	bl	8008384 <__multiply>
 8008550:	4639      	mov	r1, r7
 8008552:	4680      	mov	r8, r0
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff fe47 	bl	80081e8 <_Bfree>
 800855a:	4647      	mov	r7, r8
 800855c:	106d      	asrs	r5, r5, #1
 800855e:	d00b      	beq.n	8008578 <__pow5mult+0xa0>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	b938      	cbnz	r0, 8008574 <__pow5mult+0x9c>
 8008564:	4622      	mov	r2, r4
 8008566:	4621      	mov	r1, r4
 8008568:	4630      	mov	r0, r6
 800856a:	f7ff ff0b 	bl	8008384 <__multiply>
 800856e:	6020      	str	r0, [r4, #0]
 8008570:	f8c0 9000 	str.w	r9, [r0]
 8008574:	4604      	mov	r4, r0
 8008576:	e7e4      	b.n	8008542 <__pow5mult+0x6a>
 8008578:	4638      	mov	r0, r7
 800857a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857e:	bf00      	nop
 8008580:	08009730 	.word	0x08009730
 8008584:	080094fe 	.word	0x080094fe
 8008588:	080095e4 	.word	0x080095e4

0800858c <__lshift>:
 800858c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	460c      	mov	r4, r1
 8008592:	6849      	ldr	r1, [r1, #4]
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800859a:	68a3      	ldr	r3, [r4, #8]
 800859c:	4607      	mov	r7, r0
 800859e:	4691      	mov	r9, r2
 80085a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085a4:	f108 0601 	add.w	r6, r8, #1
 80085a8:	42b3      	cmp	r3, r6
 80085aa:	db0b      	blt.n	80085c4 <__lshift+0x38>
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff fddb 	bl	8008168 <_Balloc>
 80085b2:	4605      	mov	r5, r0
 80085b4:	b948      	cbnz	r0, 80085ca <__lshift+0x3e>
 80085b6:	4602      	mov	r2, r0
 80085b8:	4b2a      	ldr	r3, [pc, #168]	; (8008664 <__lshift+0xd8>)
 80085ba:	482b      	ldr	r0, [pc, #172]	; (8008668 <__lshift+0xdc>)
 80085bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085c0:	f000 fc0e 	bl	8008de0 <__assert_func>
 80085c4:	3101      	adds	r1, #1
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	e7ee      	b.n	80085a8 <__lshift+0x1c>
 80085ca:	2300      	movs	r3, #0
 80085cc:	f100 0114 	add.w	r1, r0, #20
 80085d0:	f100 0210 	add.w	r2, r0, #16
 80085d4:	4618      	mov	r0, r3
 80085d6:	4553      	cmp	r3, sl
 80085d8:	db37      	blt.n	800864a <__lshift+0xbe>
 80085da:	6920      	ldr	r0, [r4, #16]
 80085dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085e0:	f104 0314 	add.w	r3, r4, #20
 80085e4:	f019 091f 	ands.w	r9, r9, #31
 80085e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085f0:	d02f      	beq.n	8008652 <__lshift+0xc6>
 80085f2:	f1c9 0e20 	rsb	lr, r9, #32
 80085f6:	468a      	mov	sl, r1
 80085f8:	f04f 0c00 	mov.w	ip, #0
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	fa02 f209 	lsl.w	r2, r2, r9
 8008602:	ea42 020c 	orr.w	r2, r2, ip
 8008606:	f84a 2b04 	str.w	r2, [sl], #4
 800860a:	f853 2b04 	ldr.w	r2, [r3], #4
 800860e:	4298      	cmp	r0, r3
 8008610:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008614:	d8f2      	bhi.n	80085fc <__lshift+0x70>
 8008616:	1b03      	subs	r3, r0, r4
 8008618:	3b15      	subs	r3, #21
 800861a:	f023 0303 	bic.w	r3, r3, #3
 800861e:	3304      	adds	r3, #4
 8008620:	f104 0215 	add.w	r2, r4, #21
 8008624:	4290      	cmp	r0, r2
 8008626:	bf38      	it	cc
 8008628:	2304      	movcc	r3, #4
 800862a:	f841 c003 	str.w	ip, [r1, r3]
 800862e:	f1bc 0f00 	cmp.w	ip, #0
 8008632:	d001      	beq.n	8008638 <__lshift+0xac>
 8008634:	f108 0602 	add.w	r6, r8, #2
 8008638:	3e01      	subs	r6, #1
 800863a:	4638      	mov	r0, r7
 800863c:	612e      	str	r6, [r5, #16]
 800863e:	4621      	mov	r1, r4
 8008640:	f7ff fdd2 	bl	80081e8 <_Bfree>
 8008644:	4628      	mov	r0, r5
 8008646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864a:	f842 0f04 	str.w	r0, [r2, #4]!
 800864e:	3301      	adds	r3, #1
 8008650:	e7c1      	b.n	80085d6 <__lshift+0x4a>
 8008652:	3904      	subs	r1, #4
 8008654:	f853 2b04 	ldr.w	r2, [r3], #4
 8008658:	f841 2f04 	str.w	r2, [r1, #4]!
 800865c:	4298      	cmp	r0, r3
 800865e:	d8f9      	bhi.n	8008654 <__lshift+0xc8>
 8008660:	e7ea      	b.n	8008638 <__lshift+0xac>
 8008662:	bf00      	nop
 8008664:	08009570 	.word	0x08009570
 8008668:	080095e4 	.word	0x080095e4

0800866c <__mcmp>:
 800866c:	b530      	push	{r4, r5, lr}
 800866e:	6902      	ldr	r2, [r0, #16]
 8008670:	690c      	ldr	r4, [r1, #16]
 8008672:	1b12      	subs	r2, r2, r4
 8008674:	d10e      	bne.n	8008694 <__mcmp+0x28>
 8008676:	f100 0314 	add.w	r3, r0, #20
 800867a:	3114      	adds	r1, #20
 800867c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008680:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008684:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008688:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800868c:	42a5      	cmp	r5, r4
 800868e:	d003      	beq.n	8008698 <__mcmp+0x2c>
 8008690:	d305      	bcc.n	800869e <__mcmp+0x32>
 8008692:	2201      	movs	r2, #1
 8008694:	4610      	mov	r0, r2
 8008696:	bd30      	pop	{r4, r5, pc}
 8008698:	4283      	cmp	r3, r0
 800869a:	d3f3      	bcc.n	8008684 <__mcmp+0x18>
 800869c:	e7fa      	b.n	8008694 <__mcmp+0x28>
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	e7f7      	b.n	8008694 <__mcmp+0x28>

080086a4 <__mdiff>:
 80086a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	460c      	mov	r4, r1
 80086aa:	4606      	mov	r6, r0
 80086ac:	4611      	mov	r1, r2
 80086ae:	4620      	mov	r0, r4
 80086b0:	4690      	mov	r8, r2
 80086b2:	f7ff ffdb 	bl	800866c <__mcmp>
 80086b6:	1e05      	subs	r5, r0, #0
 80086b8:	d110      	bne.n	80086dc <__mdiff+0x38>
 80086ba:	4629      	mov	r1, r5
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff fd53 	bl	8008168 <_Balloc>
 80086c2:	b930      	cbnz	r0, 80086d2 <__mdiff+0x2e>
 80086c4:	4b3a      	ldr	r3, [pc, #232]	; (80087b0 <__mdiff+0x10c>)
 80086c6:	4602      	mov	r2, r0
 80086c8:	f240 2132 	movw	r1, #562	; 0x232
 80086cc:	4839      	ldr	r0, [pc, #228]	; (80087b4 <__mdiff+0x110>)
 80086ce:	f000 fb87 	bl	8008de0 <__assert_func>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086dc:	bfa4      	itt	ge
 80086de:	4643      	movge	r3, r8
 80086e0:	46a0      	movge	r8, r4
 80086e2:	4630      	mov	r0, r6
 80086e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086e8:	bfa6      	itte	ge
 80086ea:	461c      	movge	r4, r3
 80086ec:	2500      	movge	r5, #0
 80086ee:	2501      	movlt	r5, #1
 80086f0:	f7ff fd3a 	bl	8008168 <_Balloc>
 80086f4:	b920      	cbnz	r0, 8008700 <__mdiff+0x5c>
 80086f6:	4b2e      	ldr	r3, [pc, #184]	; (80087b0 <__mdiff+0x10c>)
 80086f8:	4602      	mov	r2, r0
 80086fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086fe:	e7e5      	b.n	80086cc <__mdiff+0x28>
 8008700:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008704:	6926      	ldr	r6, [r4, #16]
 8008706:	60c5      	str	r5, [r0, #12]
 8008708:	f104 0914 	add.w	r9, r4, #20
 800870c:	f108 0514 	add.w	r5, r8, #20
 8008710:	f100 0e14 	add.w	lr, r0, #20
 8008714:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008718:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800871c:	f108 0210 	add.w	r2, r8, #16
 8008720:	46f2      	mov	sl, lr
 8008722:	2100      	movs	r1, #0
 8008724:	f859 3b04 	ldr.w	r3, [r9], #4
 8008728:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800872c:	fa1f f883 	uxth.w	r8, r3
 8008730:	fa11 f18b 	uxtah	r1, r1, fp
 8008734:	0c1b      	lsrs	r3, r3, #16
 8008736:	eba1 0808 	sub.w	r8, r1, r8
 800873a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800873e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008742:	fa1f f888 	uxth.w	r8, r8
 8008746:	1419      	asrs	r1, r3, #16
 8008748:	454e      	cmp	r6, r9
 800874a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800874e:	f84a 3b04 	str.w	r3, [sl], #4
 8008752:	d8e7      	bhi.n	8008724 <__mdiff+0x80>
 8008754:	1b33      	subs	r3, r6, r4
 8008756:	3b15      	subs	r3, #21
 8008758:	f023 0303 	bic.w	r3, r3, #3
 800875c:	3304      	adds	r3, #4
 800875e:	3415      	adds	r4, #21
 8008760:	42a6      	cmp	r6, r4
 8008762:	bf38      	it	cc
 8008764:	2304      	movcc	r3, #4
 8008766:	441d      	add	r5, r3
 8008768:	4473      	add	r3, lr
 800876a:	469e      	mov	lr, r3
 800876c:	462e      	mov	r6, r5
 800876e:	4566      	cmp	r6, ip
 8008770:	d30e      	bcc.n	8008790 <__mdiff+0xec>
 8008772:	f10c 0203 	add.w	r2, ip, #3
 8008776:	1b52      	subs	r2, r2, r5
 8008778:	f022 0203 	bic.w	r2, r2, #3
 800877c:	3d03      	subs	r5, #3
 800877e:	45ac      	cmp	ip, r5
 8008780:	bf38      	it	cc
 8008782:	2200      	movcc	r2, #0
 8008784:	441a      	add	r2, r3
 8008786:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800878a:	b17b      	cbz	r3, 80087ac <__mdiff+0x108>
 800878c:	6107      	str	r7, [r0, #16]
 800878e:	e7a3      	b.n	80086d8 <__mdiff+0x34>
 8008790:	f856 8b04 	ldr.w	r8, [r6], #4
 8008794:	fa11 f288 	uxtah	r2, r1, r8
 8008798:	1414      	asrs	r4, r2, #16
 800879a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800879e:	b292      	uxth	r2, r2
 80087a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087a4:	f84e 2b04 	str.w	r2, [lr], #4
 80087a8:	1421      	asrs	r1, r4, #16
 80087aa:	e7e0      	b.n	800876e <__mdiff+0xca>
 80087ac:	3f01      	subs	r7, #1
 80087ae:	e7ea      	b.n	8008786 <__mdiff+0xe2>
 80087b0:	08009570 	.word	0x08009570
 80087b4:	080095e4 	.word	0x080095e4

080087b8 <__d2b>:
 80087b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087bc:	4689      	mov	r9, r1
 80087be:	2101      	movs	r1, #1
 80087c0:	ec57 6b10 	vmov	r6, r7, d0
 80087c4:	4690      	mov	r8, r2
 80087c6:	f7ff fccf 	bl	8008168 <_Balloc>
 80087ca:	4604      	mov	r4, r0
 80087cc:	b930      	cbnz	r0, 80087dc <__d2b+0x24>
 80087ce:	4602      	mov	r2, r0
 80087d0:	4b25      	ldr	r3, [pc, #148]	; (8008868 <__d2b+0xb0>)
 80087d2:	4826      	ldr	r0, [pc, #152]	; (800886c <__d2b+0xb4>)
 80087d4:	f240 310a 	movw	r1, #778	; 0x30a
 80087d8:	f000 fb02 	bl	8008de0 <__assert_func>
 80087dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087e4:	bb35      	cbnz	r5, 8008834 <__d2b+0x7c>
 80087e6:	2e00      	cmp	r6, #0
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	d028      	beq.n	800883e <__d2b+0x86>
 80087ec:	4668      	mov	r0, sp
 80087ee:	9600      	str	r6, [sp, #0]
 80087f0:	f7ff fd82 	bl	80082f8 <__lo0bits>
 80087f4:	9900      	ldr	r1, [sp, #0]
 80087f6:	b300      	cbz	r0, 800883a <__d2b+0x82>
 80087f8:	9a01      	ldr	r2, [sp, #4]
 80087fa:	f1c0 0320 	rsb	r3, r0, #32
 80087fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008802:	430b      	orrs	r3, r1
 8008804:	40c2      	lsrs	r2, r0
 8008806:	6163      	str	r3, [r4, #20]
 8008808:	9201      	str	r2, [sp, #4]
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	61a3      	str	r3, [r4, #24]
 800880e:	2b00      	cmp	r3, #0
 8008810:	bf14      	ite	ne
 8008812:	2202      	movne	r2, #2
 8008814:	2201      	moveq	r2, #1
 8008816:	6122      	str	r2, [r4, #16]
 8008818:	b1d5      	cbz	r5, 8008850 <__d2b+0x98>
 800881a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800881e:	4405      	add	r5, r0
 8008820:	f8c9 5000 	str.w	r5, [r9]
 8008824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008828:	f8c8 0000 	str.w	r0, [r8]
 800882c:	4620      	mov	r0, r4
 800882e:	b003      	add	sp, #12
 8008830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008838:	e7d5      	b.n	80087e6 <__d2b+0x2e>
 800883a:	6161      	str	r1, [r4, #20]
 800883c:	e7e5      	b.n	800880a <__d2b+0x52>
 800883e:	a801      	add	r0, sp, #4
 8008840:	f7ff fd5a 	bl	80082f8 <__lo0bits>
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	6163      	str	r3, [r4, #20]
 8008848:	2201      	movs	r2, #1
 800884a:	6122      	str	r2, [r4, #16]
 800884c:	3020      	adds	r0, #32
 800884e:	e7e3      	b.n	8008818 <__d2b+0x60>
 8008850:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008854:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008858:	f8c9 0000 	str.w	r0, [r9]
 800885c:	6918      	ldr	r0, [r3, #16]
 800885e:	f7ff fd2b 	bl	80082b8 <__hi0bits>
 8008862:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008866:	e7df      	b.n	8008828 <__d2b+0x70>
 8008868:	08009570 	.word	0x08009570
 800886c:	080095e4 	.word	0x080095e4

08008870 <_calloc_r>:
 8008870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008872:	fba1 2402 	umull	r2, r4, r1, r2
 8008876:	b94c      	cbnz	r4, 800888c <_calloc_r+0x1c>
 8008878:	4611      	mov	r1, r2
 800887a:	9201      	str	r2, [sp, #4]
 800887c:	f000 f87a 	bl	8008974 <_malloc_r>
 8008880:	9a01      	ldr	r2, [sp, #4]
 8008882:	4605      	mov	r5, r0
 8008884:	b930      	cbnz	r0, 8008894 <_calloc_r+0x24>
 8008886:	4628      	mov	r0, r5
 8008888:	b003      	add	sp, #12
 800888a:	bd30      	pop	{r4, r5, pc}
 800888c:	220c      	movs	r2, #12
 800888e:	6002      	str	r2, [r0, #0]
 8008890:	2500      	movs	r5, #0
 8008892:	e7f8      	b.n	8008886 <_calloc_r+0x16>
 8008894:	4621      	mov	r1, r4
 8008896:	f7fd fd5d 	bl	8006354 <memset>
 800889a:	e7f4      	b.n	8008886 <_calloc_r+0x16>

0800889c <_free_r>:
 800889c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800889e:	2900      	cmp	r1, #0
 80088a0:	d044      	beq.n	800892c <_free_r+0x90>
 80088a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a6:	9001      	str	r0, [sp, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f1a1 0404 	sub.w	r4, r1, #4
 80088ae:	bfb8      	it	lt
 80088b0:	18e4      	addlt	r4, r4, r3
 80088b2:	f000 fb35 	bl	8008f20 <__malloc_lock>
 80088b6:	4a1e      	ldr	r2, [pc, #120]	; (8008930 <_free_r+0x94>)
 80088b8:	9801      	ldr	r0, [sp, #4]
 80088ba:	6813      	ldr	r3, [r2, #0]
 80088bc:	b933      	cbnz	r3, 80088cc <_free_r+0x30>
 80088be:	6063      	str	r3, [r4, #4]
 80088c0:	6014      	str	r4, [r2, #0]
 80088c2:	b003      	add	sp, #12
 80088c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088c8:	f000 bb30 	b.w	8008f2c <__malloc_unlock>
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	d908      	bls.n	80088e2 <_free_r+0x46>
 80088d0:	6825      	ldr	r5, [r4, #0]
 80088d2:	1961      	adds	r1, r4, r5
 80088d4:	428b      	cmp	r3, r1
 80088d6:	bf01      	itttt	eq
 80088d8:	6819      	ldreq	r1, [r3, #0]
 80088da:	685b      	ldreq	r3, [r3, #4]
 80088dc:	1949      	addeq	r1, r1, r5
 80088de:	6021      	streq	r1, [r4, #0]
 80088e0:	e7ed      	b.n	80088be <_free_r+0x22>
 80088e2:	461a      	mov	r2, r3
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	b10b      	cbz	r3, 80088ec <_free_r+0x50>
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	d9fa      	bls.n	80088e2 <_free_r+0x46>
 80088ec:	6811      	ldr	r1, [r2, #0]
 80088ee:	1855      	adds	r5, r2, r1
 80088f0:	42a5      	cmp	r5, r4
 80088f2:	d10b      	bne.n	800890c <_free_r+0x70>
 80088f4:	6824      	ldr	r4, [r4, #0]
 80088f6:	4421      	add	r1, r4
 80088f8:	1854      	adds	r4, r2, r1
 80088fa:	42a3      	cmp	r3, r4
 80088fc:	6011      	str	r1, [r2, #0]
 80088fe:	d1e0      	bne.n	80088c2 <_free_r+0x26>
 8008900:	681c      	ldr	r4, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	6053      	str	r3, [r2, #4]
 8008906:	4421      	add	r1, r4
 8008908:	6011      	str	r1, [r2, #0]
 800890a:	e7da      	b.n	80088c2 <_free_r+0x26>
 800890c:	d902      	bls.n	8008914 <_free_r+0x78>
 800890e:	230c      	movs	r3, #12
 8008910:	6003      	str	r3, [r0, #0]
 8008912:	e7d6      	b.n	80088c2 <_free_r+0x26>
 8008914:	6825      	ldr	r5, [r4, #0]
 8008916:	1961      	adds	r1, r4, r5
 8008918:	428b      	cmp	r3, r1
 800891a:	bf04      	itt	eq
 800891c:	6819      	ldreq	r1, [r3, #0]
 800891e:	685b      	ldreq	r3, [r3, #4]
 8008920:	6063      	str	r3, [r4, #4]
 8008922:	bf04      	itt	eq
 8008924:	1949      	addeq	r1, r1, r5
 8008926:	6021      	streq	r1, [r4, #0]
 8008928:	6054      	str	r4, [r2, #4]
 800892a:	e7ca      	b.n	80088c2 <_free_r+0x26>
 800892c:	b003      	add	sp, #12
 800892e:	bd30      	pop	{r4, r5, pc}
 8008930:	200003d8 	.word	0x200003d8

08008934 <sbrk_aligned>:
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	4e0e      	ldr	r6, [pc, #56]	; (8008970 <sbrk_aligned+0x3c>)
 8008938:	460c      	mov	r4, r1
 800893a:	6831      	ldr	r1, [r6, #0]
 800893c:	4605      	mov	r5, r0
 800893e:	b911      	cbnz	r1, 8008946 <sbrk_aligned+0x12>
 8008940:	f000 f9e8 	bl	8008d14 <_sbrk_r>
 8008944:	6030      	str	r0, [r6, #0]
 8008946:	4621      	mov	r1, r4
 8008948:	4628      	mov	r0, r5
 800894a:	f000 f9e3 	bl	8008d14 <_sbrk_r>
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	d00a      	beq.n	8008968 <sbrk_aligned+0x34>
 8008952:	1cc4      	adds	r4, r0, #3
 8008954:	f024 0403 	bic.w	r4, r4, #3
 8008958:	42a0      	cmp	r0, r4
 800895a:	d007      	beq.n	800896c <sbrk_aligned+0x38>
 800895c:	1a21      	subs	r1, r4, r0
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f9d8 	bl	8008d14 <_sbrk_r>
 8008964:	3001      	adds	r0, #1
 8008966:	d101      	bne.n	800896c <sbrk_aligned+0x38>
 8008968:	f04f 34ff 	mov.w	r4, #4294967295
 800896c:	4620      	mov	r0, r4
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	200003dc 	.word	0x200003dc

08008974 <_malloc_r>:
 8008974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008978:	1ccd      	adds	r5, r1, #3
 800897a:	f025 0503 	bic.w	r5, r5, #3
 800897e:	3508      	adds	r5, #8
 8008980:	2d0c      	cmp	r5, #12
 8008982:	bf38      	it	cc
 8008984:	250c      	movcc	r5, #12
 8008986:	2d00      	cmp	r5, #0
 8008988:	4607      	mov	r7, r0
 800898a:	db01      	blt.n	8008990 <_malloc_r+0x1c>
 800898c:	42a9      	cmp	r1, r5
 800898e:	d905      	bls.n	800899c <_malloc_r+0x28>
 8008990:	230c      	movs	r3, #12
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	2600      	movs	r6, #0
 8008996:	4630      	mov	r0, r6
 8008998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899c:	4e2e      	ldr	r6, [pc, #184]	; (8008a58 <_malloc_r+0xe4>)
 800899e:	f000 fabf 	bl	8008f20 <__malloc_lock>
 80089a2:	6833      	ldr	r3, [r6, #0]
 80089a4:	461c      	mov	r4, r3
 80089a6:	bb34      	cbnz	r4, 80089f6 <_malloc_r+0x82>
 80089a8:	4629      	mov	r1, r5
 80089aa:	4638      	mov	r0, r7
 80089ac:	f7ff ffc2 	bl	8008934 <sbrk_aligned>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	4604      	mov	r4, r0
 80089b4:	d14d      	bne.n	8008a52 <_malloc_r+0xde>
 80089b6:	6834      	ldr	r4, [r6, #0]
 80089b8:	4626      	mov	r6, r4
 80089ba:	2e00      	cmp	r6, #0
 80089bc:	d140      	bne.n	8008a40 <_malloc_r+0xcc>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	4631      	mov	r1, r6
 80089c2:	4638      	mov	r0, r7
 80089c4:	eb04 0803 	add.w	r8, r4, r3
 80089c8:	f000 f9a4 	bl	8008d14 <_sbrk_r>
 80089cc:	4580      	cmp	r8, r0
 80089ce:	d13a      	bne.n	8008a46 <_malloc_r+0xd2>
 80089d0:	6821      	ldr	r1, [r4, #0]
 80089d2:	3503      	adds	r5, #3
 80089d4:	1a6d      	subs	r5, r5, r1
 80089d6:	f025 0503 	bic.w	r5, r5, #3
 80089da:	3508      	adds	r5, #8
 80089dc:	2d0c      	cmp	r5, #12
 80089de:	bf38      	it	cc
 80089e0:	250c      	movcc	r5, #12
 80089e2:	4629      	mov	r1, r5
 80089e4:	4638      	mov	r0, r7
 80089e6:	f7ff ffa5 	bl	8008934 <sbrk_aligned>
 80089ea:	3001      	adds	r0, #1
 80089ec:	d02b      	beq.n	8008a46 <_malloc_r+0xd2>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	442b      	add	r3, r5
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	e00e      	b.n	8008a14 <_malloc_r+0xa0>
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	1b52      	subs	r2, r2, r5
 80089fa:	d41e      	bmi.n	8008a3a <_malloc_r+0xc6>
 80089fc:	2a0b      	cmp	r2, #11
 80089fe:	d916      	bls.n	8008a2e <_malloc_r+0xba>
 8008a00:	1961      	adds	r1, r4, r5
 8008a02:	42a3      	cmp	r3, r4
 8008a04:	6025      	str	r5, [r4, #0]
 8008a06:	bf18      	it	ne
 8008a08:	6059      	strne	r1, [r3, #4]
 8008a0a:	6863      	ldr	r3, [r4, #4]
 8008a0c:	bf08      	it	eq
 8008a0e:	6031      	streq	r1, [r6, #0]
 8008a10:	5162      	str	r2, [r4, r5]
 8008a12:	604b      	str	r3, [r1, #4]
 8008a14:	4638      	mov	r0, r7
 8008a16:	f104 060b 	add.w	r6, r4, #11
 8008a1a:	f000 fa87 	bl	8008f2c <__malloc_unlock>
 8008a1e:	f026 0607 	bic.w	r6, r6, #7
 8008a22:	1d23      	adds	r3, r4, #4
 8008a24:	1af2      	subs	r2, r6, r3
 8008a26:	d0b6      	beq.n	8008996 <_malloc_r+0x22>
 8008a28:	1b9b      	subs	r3, r3, r6
 8008a2a:	50a3      	str	r3, [r4, r2]
 8008a2c:	e7b3      	b.n	8008996 <_malloc_r+0x22>
 8008a2e:	6862      	ldr	r2, [r4, #4]
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	bf0c      	ite	eq
 8008a34:	6032      	streq	r2, [r6, #0]
 8008a36:	605a      	strne	r2, [r3, #4]
 8008a38:	e7ec      	b.n	8008a14 <_malloc_r+0xa0>
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	6864      	ldr	r4, [r4, #4]
 8008a3e:	e7b2      	b.n	80089a6 <_malloc_r+0x32>
 8008a40:	4634      	mov	r4, r6
 8008a42:	6876      	ldr	r6, [r6, #4]
 8008a44:	e7b9      	b.n	80089ba <_malloc_r+0x46>
 8008a46:	230c      	movs	r3, #12
 8008a48:	603b      	str	r3, [r7, #0]
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	f000 fa6e 	bl	8008f2c <__malloc_unlock>
 8008a50:	e7a1      	b.n	8008996 <_malloc_r+0x22>
 8008a52:	6025      	str	r5, [r4, #0]
 8008a54:	e7de      	b.n	8008a14 <_malloc_r+0xa0>
 8008a56:	bf00      	nop
 8008a58:	200003d8 	.word	0x200003d8

08008a5c <__ssputs_r>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	688e      	ldr	r6, [r1, #8]
 8008a62:	429e      	cmp	r6, r3
 8008a64:	4682      	mov	sl, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	4690      	mov	r8, r2
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	d838      	bhi.n	8008ae0 <__ssputs_r+0x84>
 8008a6e:	898a      	ldrh	r2, [r1, #12]
 8008a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a74:	d032      	beq.n	8008adc <__ssputs_r+0x80>
 8008a76:	6825      	ldr	r5, [r4, #0]
 8008a78:	6909      	ldr	r1, [r1, #16]
 8008a7a:	eba5 0901 	sub.w	r9, r5, r1
 8008a7e:	6965      	ldr	r5, [r4, #20]
 8008a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a88:	3301      	adds	r3, #1
 8008a8a:	444b      	add	r3, r9
 8008a8c:	106d      	asrs	r5, r5, #1
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	bf38      	it	cc
 8008a92:	461d      	movcc	r5, r3
 8008a94:	0553      	lsls	r3, r2, #21
 8008a96:	d531      	bpl.n	8008afc <__ssputs_r+0xa0>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7ff ff6b 	bl	8008974 <_malloc_r>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	b950      	cbnz	r0, 8008ab8 <__ssputs_r+0x5c>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	f8ca 3000 	str.w	r3, [sl]
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	6921      	ldr	r1, [r4, #16]
 8008aba:	464a      	mov	r2, r9
 8008abc:	f7ff fb46 	bl	800814c <memcpy>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	6126      	str	r6, [r4, #16]
 8008ace:	6165      	str	r5, [r4, #20]
 8008ad0:	444e      	add	r6, r9
 8008ad2:	eba5 0509 	sub.w	r5, r5, r9
 8008ad6:	6026      	str	r6, [r4, #0]
 8008ad8:	60a5      	str	r5, [r4, #8]
 8008ada:	463e      	mov	r6, r7
 8008adc:	42be      	cmp	r6, r7
 8008ade:	d900      	bls.n	8008ae2 <__ssputs_r+0x86>
 8008ae0:	463e      	mov	r6, r7
 8008ae2:	6820      	ldr	r0, [r4, #0]
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	4641      	mov	r1, r8
 8008ae8:	f000 fa00 	bl	8008eec <memmove>
 8008aec:	68a3      	ldr	r3, [r4, #8]
 8008aee:	1b9b      	subs	r3, r3, r6
 8008af0:	60a3      	str	r3, [r4, #8]
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	4433      	add	r3, r6
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	2000      	movs	r0, #0
 8008afa:	e7db      	b.n	8008ab4 <__ssputs_r+0x58>
 8008afc:	462a      	mov	r2, r5
 8008afe:	f000 fa1b 	bl	8008f38 <_realloc_r>
 8008b02:	4606      	mov	r6, r0
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d1e1      	bne.n	8008acc <__ssputs_r+0x70>
 8008b08:	6921      	ldr	r1, [r4, #16]
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	f7ff fec6 	bl	800889c <_free_r>
 8008b10:	e7c7      	b.n	8008aa2 <__ssputs_r+0x46>
	...

08008b14 <_svfiprintf_r>:
 8008b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b18:	4698      	mov	r8, r3
 8008b1a:	898b      	ldrh	r3, [r1, #12]
 8008b1c:	061b      	lsls	r3, r3, #24
 8008b1e:	b09d      	sub	sp, #116	; 0x74
 8008b20:	4607      	mov	r7, r0
 8008b22:	460d      	mov	r5, r1
 8008b24:	4614      	mov	r4, r2
 8008b26:	d50e      	bpl.n	8008b46 <_svfiprintf_r+0x32>
 8008b28:	690b      	ldr	r3, [r1, #16]
 8008b2a:	b963      	cbnz	r3, 8008b46 <_svfiprintf_r+0x32>
 8008b2c:	2140      	movs	r1, #64	; 0x40
 8008b2e:	f7ff ff21 	bl	8008974 <_malloc_r>
 8008b32:	6028      	str	r0, [r5, #0]
 8008b34:	6128      	str	r0, [r5, #16]
 8008b36:	b920      	cbnz	r0, 8008b42 <_svfiprintf_r+0x2e>
 8008b38:	230c      	movs	r3, #12
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b40:	e0d1      	b.n	8008ce6 <_svfiprintf_r+0x1d2>
 8008b42:	2340      	movs	r3, #64	; 0x40
 8008b44:	616b      	str	r3, [r5, #20]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9309      	str	r3, [sp, #36]	; 0x24
 8008b4a:	2320      	movs	r3, #32
 8008b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b54:	2330      	movs	r3, #48	; 0x30
 8008b56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d00 <_svfiprintf_r+0x1ec>
 8008b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b5e:	f04f 0901 	mov.w	r9, #1
 8008b62:	4623      	mov	r3, r4
 8008b64:	469a      	mov	sl, r3
 8008b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b6a:	b10a      	cbz	r2, 8008b70 <_svfiprintf_r+0x5c>
 8008b6c:	2a25      	cmp	r2, #37	; 0x25
 8008b6e:	d1f9      	bne.n	8008b64 <_svfiprintf_r+0x50>
 8008b70:	ebba 0b04 	subs.w	fp, sl, r4
 8008b74:	d00b      	beq.n	8008b8e <_svfiprintf_r+0x7a>
 8008b76:	465b      	mov	r3, fp
 8008b78:	4622      	mov	r2, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f7ff ff6d 	bl	8008a5c <__ssputs_r>
 8008b82:	3001      	adds	r0, #1
 8008b84:	f000 80aa 	beq.w	8008cdc <_svfiprintf_r+0x1c8>
 8008b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b8a:	445a      	add	r2, fp
 8008b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 80a2 	beq.w	8008cdc <_svfiprintf_r+0x1c8>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ba2:	f10a 0a01 	add.w	sl, sl, #1
 8008ba6:	9304      	str	r3, [sp, #16]
 8008ba8:	9307      	str	r3, [sp, #28]
 8008baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bae:	931a      	str	r3, [sp, #104]	; 0x68
 8008bb0:	4654      	mov	r4, sl
 8008bb2:	2205      	movs	r2, #5
 8008bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb8:	4851      	ldr	r0, [pc, #324]	; (8008d00 <_svfiprintf_r+0x1ec>)
 8008bba:	f7f7 fb19 	bl	80001f0 <memchr>
 8008bbe:	9a04      	ldr	r2, [sp, #16]
 8008bc0:	b9d8      	cbnz	r0, 8008bfa <_svfiprintf_r+0xe6>
 8008bc2:	06d0      	lsls	r0, r2, #27
 8008bc4:	bf44      	itt	mi
 8008bc6:	2320      	movmi	r3, #32
 8008bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bcc:	0711      	lsls	r1, r2, #28
 8008bce:	bf44      	itt	mi
 8008bd0:	232b      	movmi	r3, #43	; 0x2b
 8008bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bda:	2b2a      	cmp	r3, #42	; 0x2a
 8008bdc:	d015      	beq.n	8008c0a <_svfiprintf_r+0xf6>
 8008bde:	9a07      	ldr	r2, [sp, #28]
 8008be0:	4654      	mov	r4, sl
 8008be2:	2000      	movs	r0, #0
 8008be4:	f04f 0c0a 	mov.w	ip, #10
 8008be8:	4621      	mov	r1, r4
 8008bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bee:	3b30      	subs	r3, #48	; 0x30
 8008bf0:	2b09      	cmp	r3, #9
 8008bf2:	d94e      	bls.n	8008c92 <_svfiprintf_r+0x17e>
 8008bf4:	b1b0      	cbz	r0, 8008c24 <_svfiprintf_r+0x110>
 8008bf6:	9207      	str	r2, [sp, #28]
 8008bf8:	e014      	b.n	8008c24 <_svfiprintf_r+0x110>
 8008bfa:	eba0 0308 	sub.w	r3, r0, r8
 8008bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8008c02:	4313      	orrs	r3, r2
 8008c04:	9304      	str	r3, [sp, #16]
 8008c06:	46a2      	mov	sl, r4
 8008c08:	e7d2      	b.n	8008bb0 <_svfiprintf_r+0x9c>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	1d19      	adds	r1, r3, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	9103      	str	r1, [sp, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bfbb      	ittet	lt
 8008c16:	425b      	neglt	r3, r3
 8008c18:	f042 0202 	orrlt.w	r2, r2, #2
 8008c1c:	9307      	strge	r3, [sp, #28]
 8008c1e:	9307      	strlt	r3, [sp, #28]
 8008c20:	bfb8      	it	lt
 8008c22:	9204      	strlt	r2, [sp, #16]
 8008c24:	7823      	ldrb	r3, [r4, #0]
 8008c26:	2b2e      	cmp	r3, #46	; 0x2e
 8008c28:	d10c      	bne.n	8008c44 <_svfiprintf_r+0x130>
 8008c2a:	7863      	ldrb	r3, [r4, #1]
 8008c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c2e:	d135      	bne.n	8008c9c <_svfiprintf_r+0x188>
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	1d1a      	adds	r2, r3, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	9203      	str	r2, [sp, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfb8      	it	lt
 8008c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c40:	3402      	adds	r4, #2
 8008c42:	9305      	str	r3, [sp, #20]
 8008c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d10 <_svfiprintf_r+0x1fc>
 8008c48:	7821      	ldrb	r1, [r4, #0]
 8008c4a:	2203      	movs	r2, #3
 8008c4c:	4650      	mov	r0, sl
 8008c4e:	f7f7 facf 	bl	80001f0 <memchr>
 8008c52:	b140      	cbz	r0, 8008c66 <_svfiprintf_r+0x152>
 8008c54:	2340      	movs	r3, #64	; 0x40
 8008c56:	eba0 000a 	sub.w	r0, r0, sl
 8008c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	4303      	orrs	r3, r0
 8008c62:	3401      	adds	r4, #1
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c6a:	4826      	ldr	r0, [pc, #152]	; (8008d04 <_svfiprintf_r+0x1f0>)
 8008c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c70:	2206      	movs	r2, #6
 8008c72:	f7f7 fabd 	bl	80001f0 <memchr>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d038      	beq.n	8008cec <_svfiprintf_r+0x1d8>
 8008c7a:	4b23      	ldr	r3, [pc, #140]	; (8008d08 <_svfiprintf_r+0x1f4>)
 8008c7c:	bb1b      	cbnz	r3, 8008cc6 <_svfiprintf_r+0x1b2>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	3307      	adds	r3, #7
 8008c82:	f023 0307 	bic.w	r3, r3, #7
 8008c86:	3308      	adds	r3, #8
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c8c:	4433      	add	r3, r6
 8008c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c90:	e767      	b.n	8008b62 <_svfiprintf_r+0x4e>
 8008c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c96:	460c      	mov	r4, r1
 8008c98:	2001      	movs	r0, #1
 8008c9a:	e7a5      	b.n	8008be8 <_svfiprintf_r+0xd4>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	3401      	adds	r4, #1
 8008ca0:	9305      	str	r3, [sp, #20]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f04f 0c0a 	mov.w	ip, #10
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cae:	3a30      	subs	r2, #48	; 0x30
 8008cb0:	2a09      	cmp	r2, #9
 8008cb2:	d903      	bls.n	8008cbc <_svfiprintf_r+0x1a8>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0c5      	beq.n	8008c44 <_svfiprintf_r+0x130>
 8008cb8:	9105      	str	r1, [sp, #20]
 8008cba:	e7c3      	b.n	8008c44 <_svfiprintf_r+0x130>
 8008cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7f0      	b.n	8008ca8 <_svfiprintf_r+0x194>
 8008cc6:	ab03      	add	r3, sp, #12
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	462a      	mov	r2, r5
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <_svfiprintf_r+0x1f8>)
 8008cce:	a904      	add	r1, sp, #16
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	f7fd fbe7 	bl	80064a4 <_printf_float>
 8008cd6:	1c42      	adds	r2, r0, #1
 8008cd8:	4606      	mov	r6, r0
 8008cda:	d1d6      	bne.n	8008c8a <_svfiprintf_r+0x176>
 8008cdc:	89ab      	ldrh	r3, [r5, #12]
 8008cde:	065b      	lsls	r3, r3, #25
 8008ce0:	f53f af2c 	bmi.w	8008b3c <_svfiprintf_r+0x28>
 8008ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce6:	b01d      	add	sp, #116	; 0x74
 8008ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cec:	ab03      	add	r3, sp, #12
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	462a      	mov	r2, r5
 8008cf2:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <_svfiprintf_r+0x1f8>)
 8008cf4:	a904      	add	r1, sp, #16
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	f7fd fe78 	bl	80069ec <_printf_i>
 8008cfc:	e7eb      	b.n	8008cd6 <_svfiprintf_r+0x1c2>
 8008cfe:	bf00      	nop
 8008d00:	0800973c 	.word	0x0800973c
 8008d04:	08009746 	.word	0x08009746
 8008d08:	080064a5 	.word	0x080064a5
 8008d0c:	08008a5d 	.word	0x08008a5d
 8008d10:	08009742 	.word	0x08009742

08008d14 <_sbrk_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4d06      	ldr	r5, [pc, #24]	; (8008d30 <_sbrk_r+0x1c>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	602b      	str	r3, [r5, #0]
 8008d20:	f7f8 ff2e 	bl	8001b80 <_sbrk>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_sbrk_r+0x1a>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_sbrk_r+0x1a>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	200003e0 	.word	0x200003e0

08008d34 <__sread>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	460c      	mov	r4, r1
 8008d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3c:	f000 fa84 	bl	8009248 <_read_r>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	bfab      	itete	ge
 8008d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d46:	89a3      	ldrhlt	r3, [r4, #12]
 8008d48:	181b      	addge	r3, r3, r0
 8008d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d4e:	bfac      	ite	ge
 8008d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d52:	81a3      	strhlt	r3, [r4, #12]
 8008d54:	bd10      	pop	{r4, pc}

08008d56 <__swrite>:
 8008d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5a:	461f      	mov	r7, r3
 8008d5c:	898b      	ldrh	r3, [r1, #12]
 8008d5e:	05db      	lsls	r3, r3, #23
 8008d60:	4605      	mov	r5, r0
 8008d62:	460c      	mov	r4, r1
 8008d64:	4616      	mov	r6, r2
 8008d66:	d505      	bpl.n	8008d74 <__swrite+0x1e>
 8008d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f000 f898 	bl	8008ea4 <_lseek_r>
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	4632      	mov	r2, r6
 8008d82:	463b      	mov	r3, r7
 8008d84:	4628      	mov	r0, r5
 8008d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	f000 b817 	b.w	8008dbc <_write_r>

08008d8e <__sseek>:
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	460c      	mov	r4, r1
 8008d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d96:	f000 f885 	bl	8008ea4 <_lseek_r>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	bf15      	itete	ne
 8008da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008daa:	81a3      	strheq	r3, [r4, #12]
 8008dac:	bf18      	it	ne
 8008dae:	81a3      	strhne	r3, [r4, #12]
 8008db0:	bd10      	pop	{r4, pc}

08008db2 <__sclose>:
 8008db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db6:	f000 b831 	b.w	8008e1c <_close_r>
	...

08008dbc <_write_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d07      	ldr	r5, [pc, #28]	; (8008ddc <_write_r+0x20>)
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	602a      	str	r2, [r5, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f7f8 fe87 	bl	8001ade <_write>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_write_r+0x1e>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_write_r+0x1e>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	200003e0 	.word	0x200003e0

08008de0 <__assert_func>:
 8008de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008de2:	4614      	mov	r4, r2
 8008de4:	461a      	mov	r2, r3
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <__assert_func+0x2c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4605      	mov	r5, r0
 8008dec:	68d8      	ldr	r0, [r3, #12]
 8008dee:	b14c      	cbz	r4, 8008e04 <__assert_func+0x24>
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <__assert_func+0x30>)
 8008df2:	9100      	str	r1, [sp, #0]
 8008df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008df8:	4906      	ldr	r1, [pc, #24]	; (8008e14 <__assert_func+0x34>)
 8008dfa:	462b      	mov	r3, r5
 8008dfc:	f000 f81e 	bl	8008e3c <fiprintf>
 8008e00:	f000 fa41 	bl	8009286 <abort>
 8008e04:	4b04      	ldr	r3, [pc, #16]	; (8008e18 <__assert_func+0x38>)
 8008e06:	461c      	mov	r4, r3
 8008e08:	e7f3      	b.n	8008df2 <__assert_func+0x12>
 8008e0a:	bf00      	nop
 8008e0c:	2000000c 	.word	0x2000000c
 8008e10:	0800974d 	.word	0x0800974d
 8008e14:	0800975a 	.word	0x0800975a
 8008e18:	08009788 	.word	0x08009788

08008e1c <_close_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d06      	ldr	r5, [pc, #24]	; (8008e38 <_close_r+0x1c>)
 8008e20:	2300      	movs	r3, #0
 8008e22:	4604      	mov	r4, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	602b      	str	r3, [r5, #0]
 8008e28:	f7f8 fe75 	bl	8001b16 <_close>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_close_r+0x1a>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_close_r+0x1a>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	200003e0 	.word	0x200003e0

08008e3c <fiprintf>:
 8008e3c:	b40e      	push	{r1, r2, r3}
 8008e3e:	b503      	push	{r0, r1, lr}
 8008e40:	4601      	mov	r1, r0
 8008e42:	ab03      	add	r3, sp, #12
 8008e44:	4805      	ldr	r0, [pc, #20]	; (8008e5c <fiprintf+0x20>)
 8008e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4a:	6800      	ldr	r0, [r0, #0]
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	f000 f8cb 	bl	8008fe8 <_vfiprintf_r>
 8008e52:	b002      	add	sp, #8
 8008e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e58:	b003      	add	sp, #12
 8008e5a:	4770      	bx	lr
 8008e5c:	2000000c 	.word	0x2000000c

08008e60 <_fstat_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	; (8008e80 <_fstat_r+0x20>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	f7f8 fe5e 	bl	8001b2e <_fstat>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d102      	bne.n	8008e7c <_fstat_r+0x1c>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	b103      	cbz	r3, 8008e7c <_fstat_r+0x1c>
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	bf00      	nop
 8008e80:	200003e0 	.word	0x200003e0

08008e84 <_isatty_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	; (8008ea0 <_isatty_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f8 fe5d 	bl	8001b4e <_isatty>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_isatty_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_isatty_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	200003e0 	.word	0x200003e0

08008ea4 <_lseek_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	; (8008ec4 <_lseek_r+0x20>)
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	602a      	str	r2, [r5, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f7f8 fe56 	bl	8001b64 <_lseek>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_lseek_r+0x1e>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_lseek_r+0x1e>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	200003e0 	.word	0x200003e0

08008ec8 <__ascii_mbtowc>:
 8008ec8:	b082      	sub	sp, #8
 8008eca:	b901      	cbnz	r1, 8008ece <__ascii_mbtowc+0x6>
 8008ecc:	a901      	add	r1, sp, #4
 8008ece:	b142      	cbz	r2, 8008ee2 <__ascii_mbtowc+0x1a>
 8008ed0:	b14b      	cbz	r3, 8008ee6 <__ascii_mbtowc+0x1e>
 8008ed2:	7813      	ldrb	r3, [r2, #0]
 8008ed4:	600b      	str	r3, [r1, #0]
 8008ed6:	7812      	ldrb	r2, [r2, #0]
 8008ed8:	1e10      	subs	r0, r2, #0
 8008eda:	bf18      	it	ne
 8008edc:	2001      	movne	r0, #1
 8008ede:	b002      	add	sp, #8
 8008ee0:	4770      	bx	lr
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	e7fb      	b.n	8008ede <__ascii_mbtowc+0x16>
 8008ee6:	f06f 0001 	mvn.w	r0, #1
 8008eea:	e7f8      	b.n	8008ede <__ascii_mbtowc+0x16>

08008eec <memmove>:
 8008eec:	4288      	cmp	r0, r1
 8008eee:	b510      	push	{r4, lr}
 8008ef0:	eb01 0402 	add.w	r4, r1, r2
 8008ef4:	d902      	bls.n	8008efc <memmove+0x10>
 8008ef6:	4284      	cmp	r4, r0
 8008ef8:	4623      	mov	r3, r4
 8008efa:	d807      	bhi.n	8008f0c <memmove+0x20>
 8008efc:	1e43      	subs	r3, r0, #1
 8008efe:	42a1      	cmp	r1, r4
 8008f00:	d008      	beq.n	8008f14 <memmove+0x28>
 8008f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f0a:	e7f8      	b.n	8008efe <memmove+0x12>
 8008f0c:	4402      	add	r2, r0
 8008f0e:	4601      	mov	r1, r0
 8008f10:	428a      	cmp	r2, r1
 8008f12:	d100      	bne.n	8008f16 <memmove+0x2a>
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f1e:	e7f7      	b.n	8008f10 <memmove+0x24>

08008f20 <__malloc_lock>:
 8008f20:	4801      	ldr	r0, [pc, #4]	; (8008f28 <__malloc_lock+0x8>)
 8008f22:	f7ff b8a4 	b.w	800806e <__retarget_lock_acquire_recursive>
 8008f26:	bf00      	nop
 8008f28:	200003d4 	.word	0x200003d4

08008f2c <__malloc_unlock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	; (8008f34 <__malloc_unlock+0x8>)
 8008f2e:	f7ff b89f 	b.w	8008070 <__retarget_lock_release_recursive>
 8008f32:	bf00      	nop
 8008f34:	200003d4 	.word	0x200003d4

08008f38 <_realloc_r>:
 8008f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3c:	4680      	mov	r8, r0
 8008f3e:	4614      	mov	r4, r2
 8008f40:	460e      	mov	r6, r1
 8008f42:	b921      	cbnz	r1, 8008f4e <_realloc_r+0x16>
 8008f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	4611      	mov	r1, r2
 8008f4a:	f7ff bd13 	b.w	8008974 <_malloc_r>
 8008f4e:	b92a      	cbnz	r2, 8008f5c <_realloc_r+0x24>
 8008f50:	f7ff fca4 	bl	800889c <_free_r>
 8008f54:	4625      	mov	r5, r4
 8008f56:	4628      	mov	r0, r5
 8008f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5c:	f000 f99a 	bl	8009294 <_malloc_usable_size_r>
 8008f60:	4284      	cmp	r4, r0
 8008f62:	4607      	mov	r7, r0
 8008f64:	d802      	bhi.n	8008f6c <_realloc_r+0x34>
 8008f66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f6a:	d812      	bhi.n	8008f92 <_realloc_r+0x5a>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4640      	mov	r0, r8
 8008f70:	f7ff fd00 	bl	8008974 <_malloc_r>
 8008f74:	4605      	mov	r5, r0
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0ed      	beq.n	8008f56 <_realloc_r+0x1e>
 8008f7a:	42bc      	cmp	r4, r7
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	4631      	mov	r1, r6
 8008f80:	bf28      	it	cs
 8008f82:	463a      	movcs	r2, r7
 8008f84:	f7ff f8e2 	bl	800814c <memcpy>
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4640      	mov	r0, r8
 8008f8c:	f7ff fc86 	bl	800889c <_free_r>
 8008f90:	e7e1      	b.n	8008f56 <_realloc_r+0x1e>
 8008f92:	4635      	mov	r5, r6
 8008f94:	e7df      	b.n	8008f56 <_realloc_r+0x1e>

08008f96 <__sfputc_r>:
 8008f96:	6893      	ldr	r3, [r2, #8]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	b410      	push	{r4}
 8008f9e:	6093      	str	r3, [r2, #8]
 8008fa0:	da08      	bge.n	8008fb4 <__sfputc_r+0x1e>
 8008fa2:	6994      	ldr	r4, [r2, #24]
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	db01      	blt.n	8008fac <__sfputc_r+0x16>
 8008fa8:	290a      	cmp	r1, #10
 8008faa:	d103      	bne.n	8008fb4 <__sfputc_r+0x1e>
 8008fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb0:	f7fd bf64 	b.w	8006e7c <__swbuf_r>
 8008fb4:	6813      	ldr	r3, [r2, #0]
 8008fb6:	1c58      	adds	r0, r3, #1
 8008fb8:	6010      	str	r0, [r2, #0]
 8008fba:	7019      	strb	r1, [r3, #0]
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <__sfputs_r>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	460f      	mov	r7, r1
 8008fca:	4614      	mov	r4, r2
 8008fcc:	18d5      	adds	r5, r2, r3
 8008fce:	42ac      	cmp	r4, r5
 8008fd0:	d101      	bne.n	8008fd6 <__sfputs_r+0x12>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	e007      	b.n	8008fe6 <__sfputs_r+0x22>
 8008fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fda:	463a      	mov	r2, r7
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f7ff ffda 	bl	8008f96 <__sfputc_r>
 8008fe2:	1c43      	adds	r3, r0, #1
 8008fe4:	d1f3      	bne.n	8008fce <__sfputs_r+0xa>
 8008fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fe8 <_vfiprintf_r>:
 8008fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	460d      	mov	r5, r1
 8008fee:	b09d      	sub	sp, #116	; 0x74
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	4698      	mov	r8, r3
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	b118      	cbz	r0, 8009000 <_vfiprintf_r+0x18>
 8008ff8:	6983      	ldr	r3, [r0, #24]
 8008ffa:	b90b      	cbnz	r3, 8009000 <_vfiprintf_r+0x18>
 8008ffc:	f7fe ff94 	bl	8007f28 <__sinit>
 8009000:	4b89      	ldr	r3, [pc, #548]	; (8009228 <_vfiprintf_r+0x240>)
 8009002:	429d      	cmp	r5, r3
 8009004:	d11b      	bne.n	800903e <_vfiprintf_r+0x56>
 8009006:	6875      	ldr	r5, [r6, #4]
 8009008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800900a:	07d9      	lsls	r1, r3, #31
 800900c:	d405      	bmi.n	800901a <_vfiprintf_r+0x32>
 800900e:	89ab      	ldrh	r3, [r5, #12]
 8009010:	059a      	lsls	r2, r3, #22
 8009012:	d402      	bmi.n	800901a <_vfiprintf_r+0x32>
 8009014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009016:	f7ff f82a 	bl	800806e <__retarget_lock_acquire_recursive>
 800901a:	89ab      	ldrh	r3, [r5, #12]
 800901c:	071b      	lsls	r3, r3, #28
 800901e:	d501      	bpl.n	8009024 <_vfiprintf_r+0x3c>
 8009020:	692b      	ldr	r3, [r5, #16]
 8009022:	b9eb      	cbnz	r3, 8009060 <_vfiprintf_r+0x78>
 8009024:	4629      	mov	r1, r5
 8009026:	4630      	mov	r0, r6
 8009028:	f7fd ff7a 	bl	8006f20 <__swsetup_r>
 800902c:	b1c0      	cbz	r0, 8009060 <_vfiprintf_r+0x78>
 800902e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009030:	07dc      	lsls	r4, r3, #31
 8009032:	d50e      	bpl.n	8009052 <_vfiprintf_r+0x6a>
 8009034:	f04f 30ff 	mov.w	r0, #4294967295
 8009038:	b01d      	add	sp, #116	; 0x74
 800903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903e:	4b7b      	ldr	r3, [pc, #492]	; (800922c <_vfiprintf_r+0x244>)
 8009040:	429d      	cmp	r5, r3
 8009042:	d101      	bne.n	8009048 <_vfiprintf_r+0x60>
 8009044:	68b5      	ldr	r5, [r6, #8]
 8009046:	e7df      	b.n	8009008 <_vfiprintf_r+0x20>
 8009048:	4b79      	ldr	r3, [pc, #484]	; (8009230 <_vfiprintf_r+0x248>)
 800904a:	429d      	cmp	r5, r3
 800904c:	bf08      	it	eq
 800904e:	68f5      	ldreq	r5, [r6, #12]
 8009050:	e7da      	b.n	8009008 <_vfiprintf_r+0x20>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	0598      	lsls	r0, r3, #22
 8009056:	d4ed      	bmi.n	8009034 <_vfiprintf_r+0x4c>
 8009058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800905a:	f7ff f809 	bl	8008070 <__retarget_lock_release_recursive>
 800905e:	e7e9      	b.n	8009034 <_vfiprintf_r+0x4c>
 8009060:	2300      	movs	r3, #0
 8009062:	9309      	str	r3, [sp, #36]	; 0x24
 8009064:	2320      	movs	r3, #32
 8009066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800906a:	f8cd 800c 	str.w	r8, [sp, #12]
 800906e:	2330      	movs	r3, #48	; 0x30
 8009070:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009234 <_vfiprintf_r+0x24c>
 8009074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009078:	f04f 0901 	mov.w	r9, #1
 800907c:	4623      	mov	r3, r4
 800907e:	469a      	mov	sl, r3
 8009080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009084:	b10a      	cbz	r2, 800908a <_vfiprintf_r+0xa2>
 8009086:	2a25      	cmp	r2, #37	; 0x25
 8009088:	d1f9      	bne.n	800907e <_vfiprintf_r+0x96>
 800908a:	ebba 0b04 	subs.w	fp, sl, r4
 800908e:	d00b      	beq.n	80090a8 <_vfiprintf_r+0xc0>
 8009090:	465b      	mov	r3, fp
 8009092:	4622      	mov	r2, r4
 8009094:	4629      	mov	r1, r5
 8009096:	4630      	mov	r0, r6
 8009098:	f7ff ff94 	bl	8008fc4 <__sfputs_r>
 800909c:	3001      	adds	r0, #1
 800909e:	f000 80aa 	beq.w	80091f6 <_vfiprintf_r+0x20e>
 80090a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a4:	445a      	add	r2, fp
 80090a6:	9209      	str	r2, [sp, #36]	; 0x24
 80090a8:	f89a 3000 	ldrb.w	r3, [sl]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 80a2 	beq.w	80091f6 <_vfiprintf_r+0x20e>
 80090b2:	2300      	movs	r3, #0
 80090b4:	f04f 32ff 	mov.w	r2, #4294967295
 80090b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090bc:	f10a 0a01 	add.w	sl, sl, #1
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	9307      	str	r3, [sp, #28]
 80090c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c8:	931a      	str	r3, [sp, #104]	; 0x68
 80090ca:	4654      	mov	r4, sl
 80090cc:	2205      	movs	r2, #5
 80090ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d2:	4858      	ldr	r0, [pc, #352]	; (8009234 <_vfiprintf_r+0x24c>)
 80090d4:	f7f7 f88c 	bl	80001f0 <memchr>
 80090d8:	9a04      	ldr	r2, [sp, #16]
 80090da:	b9d8      	cbnz	r0, 8009114 <_vfiprintf_r+0x12c>
 80090dc:	06d1      	lsls	r1, r2, #27
 80090de:	bf44      	itt	mi
 80090e0:	2320      	movmi	r3, #32
 80090e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090e6:	0713      	lsls	r3, r2, #28
 80090e8:	bf44      	itt	mi
 80090ea:	232b      	movmi	r3, #43	; 0x2b
 80090ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f0:	f89a 3000 	ldrb.w	r3, [sl]
 80090f4:	2b2a      	cmp	r3, #42	; 0x2a
 80090f6:	d015      	beq.n	8009124 <_vfiprintf_r+0x13c>
 80090f8:	9a07      	ldr	r2, [sp, #28]
 80090fa:	4654      	mov	r4, sl
 80090fc:	2000      	movs	r0, #0
 80090fe:	f04f 0c0a 	mov.w	ip, #10
 8009102:	4621      	mov	r1, r4
 8009104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009108:	3b30      	subs	r3, #48	; 0x30
 800910a:	2b09      	cmp	r3, #9
 800910c:	d94e      	bls.n	80091ac <_vfiprintf_r+0x1c4>
 800910e:	b1b0      	cbz	r0, 800913e <_vfiprintf_r+0x156>
 8009110:	9207      	str	r2, [sp, #28]
 8009112:	e014      	b.n	800913e <_vfiprintf_r+0x156>
 8009114:	eba0 0308 	sub.w	r3, r0, r8
 8009118:	fa09 f303 	lsl.w	r3, r9, r3
 800911c:	4313      	orrs	r3, r2
 800911e:	9304      	str	r3, [sp, #16]
 8009120:	46a2      	mov	sl, r4
 8009122:	e7d2      	b.n	80090ca <_vfiprintf_r+0xe2>
 8009124:	9b03      	ldr	r3, [sp, #12]
 8009126:	1d19      	adds	r1, r3, #4
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	9103      	str	r1, [sp, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	bfbb      	ittet	lt
 8009130:	425b      	neglt	r3, r3
 8009132:	f042 0202 	orrlt.w	r2, r2, #2
 8009136:	9307      	strge	r3, [sp, #28]
 8009138:	9307      	strlt	r3, [sp, #28]
 800913a:	bfb8      	it	lt
 800913c:	9204      	strlt	r2, [sp, #16]
 800913e:	7823      	ldrb	r3, [r4, #0]
 8009140:	2b2e      	cmp	r3, #46	; 0x2e
 8009142:	d10c      	bne.n	800915e <_vfiprintf_r+0x176>
 8009144:	7863      	ldrb	r3, [r4, #1]
 8009146:	2b2a      	cmp	r3, #42	; 0x2a
 8009148:	d135      	bne.n	80091b6 <_vfiprintf_r+0x1ce>
 800914a:	9b03      	ldr	r3, [sp, #12]
 800914c:	1d1a      	adds	r2, r3, #4
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	9203      	str	r2, [sp, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfb8      	it	lt
 8009156:	f04f 33ff 	movlt.w	r3, #4294967295
 800915a:	3402      	adds	r4, #2
 800915c:	9305      	str	r3, [sp, #20]
 800915e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009244 <_vfiprintf_r+0x25c>
 8009162:	7821      	ldrb	r1, [r4, #0]
 8009164:	2203      	movs	r2, #3
 8009166:	4650      	mov	r0, sl
 8009168:	f7f7 f842 	bl	80001f0 <memchr>
 800916c:	b140      	cbz	r0, 8009180 <_vfiprintf_r+0x198>
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	eba0 000a 	sub.w	r0, r0, sl
 8009174:	fa03 f000 	lsl.w	r0, r3, r0
 8009178:	9b04      	ldr	r3, [sp, #16]
 800917a:	4303      	orrs	r3, r0
 800917c:	3401      	adds	r4, #1
 800917e:	9304      	str	r3, [sp, #16]
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	482c      	ldr	r0, [pc, #176]	; (8009238 <_vfiprintf_r+0x250>)
 8009186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800918a:	2206      	movs	r2, #6
 800918c:	f7f7 f830 	bl	80001f0 <memchr>
 8009190:	2800      	cmp	r0, #0
 8009192:	d03f      	beq.n	8009214 <_vfiprintf_r+0x22c>
 8009194:	4b29      	ldr	r3, [pc, #164]	; (800923c <_vfiprintf_r+0x254>)
 8009196:	bb1b      	cbnz	r3, 80091e0 <_vfiprintf_r+0x1f8>
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	3307      	adds	r3, #7
 800919c:	f023 0307 	bic.w	r3, r3, #7
 80091a0:	3308      	adds	r3, #8
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a6:	443b      	add	r3, r7
 80091a8:	9309      	str	r3, [sp, #36]	; 0x24
 80091aa:	e767      	b.n	800907c <_vfiprintf_r+0x94>
 80091ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80091b0:	460c      	mov	r4, r1
 80091b2:	2001      	movs	r0, #1
 80091b4:	e7a5      	b.n	8009102 <_vfiprintf_r+0x11a>
 80091b6:	2300      	movs	r3, #0
 80091b8:	3401      	adds	r4, #1
 80091ba:	9305      	str	r3, [sp, #20]
 80091bc:	4619      	mov	r1, r3
 80091be:	f04f 0c0a 	mov.w	ip, #10
 80091c2:	4620      	mov	r0, r4
 80091c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c8:	3a30      	subs	r2, #48	; 0x30
 80091ca:	2a09      	cmp	r2, #9
 80091cc:	d903      	bls.n	80091d6 <_vfiprintf_r+0x1ee>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0c5      	beq.n	800915e <_vfiprintf_r+0x176>
 80091d2:	9105      	str	r1, [sp, #20]
 80091d4:	e7c3      	b.n	800915e <_vfiprintf_r+0x176>
 80091d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091da:	4604      	mov	r4, r0
 80091dc:	2301      	movs	r3, #1
 80091de:	e7f0      	b.n	80091c2 <_vfiprintf_r+0x1da>
 80091e0:	ab03      	add	r3, sp, #12
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	462a      	mov	r2, r5
 80091e6:	4b16      	ldr	r3, [pc, #88]	; (8009240 <_vfiprintf_r+0x258>)
 80091e8:	a904      	add	r1, sp, #16
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7fd f95a 	bl	80064a4 <_printf_float>
 80091f0:	4607      	mov	r7, r0
 80091f2:	1c78      	adds	r0, r7, #1
 80091f4:	d1d6      	bne.n	80091a4 <_vfiprintf_r+0x1bc>
 80091f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f8:	07d9      	lsls	r1, r3, #31
 80091fa:	d405      	bmi.n	8009208 <_vfiprintf_r+0x220>
 80091fc:	89ab      	ldrh	r3, [r5, #12]
 80091fe:	059a      	lsls	r2, r3, #22
 8009200:	d402      	bmi.n	8009208 <_vfiprintf_r+0x220>
 8009202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009204:	f7fe ff34 	bl	8008070 <__retarget_lock_release_recursive>
 8009208:	89ab      	ldrh	r3, [r5, #12]
 800920a:	065b      	lsls	r3, r3, #25
 800920c:	f53f af12 	bmi.w	8009034 <_vfiprintf_r+0x4c>
 8009210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009212:	e711      	b.n	8009038 <_vfiprintf_r+0x50>
 8009214:	ab03      	add	r3, sp, #12
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	462a      	mov	r2, r5
 800921a:	4b09      	ldr	r3, [pc, #36]	; (8009240 <_vfiprintf_r+0x258>)
 800921c:	a904      	add	r1, sp, #16
 800921e:	4630      	mov	r0, r6
 8009220:	f7fd fbe4 	bl	80069ec <_printf_i>
 8009224:	e7e4      	b.n	80091f0 <_vfiprintf_r+0x208>
 8009226:	bf00      	nop
 8009228:	080095a4 	.word	0x080095a4
 800922c:	080095c4 	.word	0x080095c4
 8009230:	08009584 	.word	0x08009584
 8009234:	0800973c 	.word	0x0800973c
 8009238:	08009746 	.word	0x08009746
 800923c:	080064a5 	.word	0x080064a5
 8009240:	08008fc5 	.word	0x08008fc5
 8009244:	08009742 	.word	0x08009742

08009248 <_read_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d07      	ldr	r5, [pc, #28]	; (8009268 <_read_r+0x20>)
 800924c:	4604      	mov	r4, r0
 800924e:	4608      	mov	r0, r1
 8009250:	4611      	mov	r1, r2
 8009252:	2200      	movs	r2, #0
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	f7f8 fc24 	bl	8001aa4 <_read>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_read_r+0x1e>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_read_r+0x1e>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	200003e0 	.word	0x200003e0

0800926c <__ascii_wctomb>:
 800926c:	b149      	cbz	r1, 8009282 <__ascii_wctomb+0x16>
 800926e:	2aff      	cmp	r2, #255	; 0xff
 8009270:	bf85      	ittet	hi
 8009272:	238a      	movhi	r3, #138	; 0x8a
 8009274:	6003      	strhi	r3, [r0, #0]
 8009276:	700a      	strbls	r2, [r1, #0]
 8009278:	f04f 30ff 	movhi.w	r0, #4294967295
 800927c:	bf98      	it	ls
 800927e:	2001      	movls	r0, #1
 8009280:	4770      	bx	lr
 8009282:	4608      	mov	r0, r1
 8009284:	4770      	bx	lr

08009286 <abort>:
 8009286:	b508      	push	{r3, lr}
 8009288:	2006      	movs	r0, #6
 800928a:	f000 f833 	bl	80092f4 <raise>
 800928e:	2001      	movs	r0, #1
 8009290:	f7f8 fbfe 	bl	8001a90 <_exit>

08009294 <_malloc_usable_size_r>:
 8009294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009298:	1f18      	subs	r0, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	bfbc      	itt	lt
 800929e:	580b      	ldrlt	r3, [r1, r0]
 80092a0:	18c0      	addlt	r0, r0, r3
 80092a2:	4770      	bx	lr

080092a4 <_raise_r>:
 80092a4:	291f      	cmp	r1, #31
 80092a6:	b538      	push	{r3, r4, r5, lr}
 80092a8:	4604      	mov	r4, r0
 80092aa:	460d      	mov	r5, r1
 80092ac:	d904      	bls.n	80092b8 <_raise_r+0x14>
 80092ae:	2316      	movs	r3, #22
 80092b0:	6003      	str	r3, [r0, #0]
 80092b2:	f04f 30ff 	mov.w	r0, #4294967295
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092ba:	b112      	cbz	r2, 80092c2 <_raise_r+0x1e>
 80092bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092c0:	b94b      	cbnz	r3, 80092d6 <_raise_r+0x32>
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 f830 	bl	8009328 <_getpid_r>
 80092c8:	462a      	mov	r2, r5
 80092ca:	4601      	mov	r1, r0
 80092cc:	4620      	mov	r0, r4
 80092ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092d2:	f000 b817 	b.w	8009304 <_kill_r>
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d00a      	beq.n	80092f0 <_raise_r+0x4c>
 80092da:	1c59      	adds	r1, r3, #1
 80092dc:	d103      	bne.n	80092e6 <_raise_r+0x42>
 80092de:	2316      	movs	r3, #22
 80092e0:	6003      	str	r3, [r0, #0]
 80092e2:	2001      	movs	r0, #1
 80092e4:	e7e7      	b.n	80092b6 <_raise_r+0x12>
 80092e6:	2400      	movs	r4, #0
 80092e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092ec:	4628      	mov	r0, r5
 80092ee:	4798      	blx	r3
 80092f0:	2000      	movs	r0, #0
 80092f2:	e7e0      	b.n	80092b6 <_raise_r+0x12>

080092f4 <raise>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <raise+0xc>)
 80092f6:	4601      	mov	r1, r0
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f7ff bfd3 	b.w	80092a4 <_raise_r>
 80092fe:	bf00      	nop
 8009300:	2000000c 	.word	0x2000000c

08009304 <_kill_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d07      	ldr	r5, [pc, #28]	; (8009324 <_kill_r+0x20>)
 8009308:	2300      	movs	r3, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	4611      	mov	r1, r2
 8009310:	602b      	str	r3, [r5, #0]
 8009312:	f7f8 fbad 	bl	8001a70 <_kill>
 8009316:	1c43      	adds	r3, r0, #1
 8009318:	d102      	bne.n	8009320 <_kill_r+0x1c>
 800931a:	682b      	ldr	r3, [r5, #0]
 800931c:	b103      	cbz	r3, 8009320 <_kill_r+0x1c>
 800931e:	6023      	str	r3, [r4, #0]
 8009320:	bd38      	pop	{r3, r4, r5, pc}
 8009322:	bf00      	nop
 8009324:	200003e0 	.word	0x200003e0

08009328 <_getpid_r>:
 8009328:	f7f8 bb9a 	b.w	8001a60 <_getpid>

0800932c <_init>:
 800932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932e:	bf00      	nop
 8009330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009332:	bc08      	pop	{r3}
 8009334:	469e      	mov	lr, r3
 8009336:	4770      	bx	lr

08009338 <_fini>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	bf00      	nop
 800933c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933e:	bc08      	pop	{r3}
 8009340:	469e      	mov	lr, r3
 8009342:	4770      	bx	lr
