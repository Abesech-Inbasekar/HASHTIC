
speed_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800c0c0  0800c0c0  0001c0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5cc  0800c5cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5cc  0800c5cc  0001c5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5d4  0800c5d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5d4  0800c5d4  0001c5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200001e0  0800c7bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  0800c7bc  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac6f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346f  00000000  00000000  0003ae7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  0003f910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002699c  00000000  00000000  00040db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b67f  00000000  00000000  00067754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed13b  00000000  00000000  00082dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ff0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e84  00000000  00000000  0016ff60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c0a8 	.word	0x0800c0a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800c0a8 	.word	0x0800c0a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000f74:	4a31      	ldr	r2, [pc, #196]	; (800103c <MX_ADC1_Init+0xe0>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd8:	4817      	ldr	r0, [pc, #92]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000fda:	f001 ff03 	bl	8002de4 <HAL_ADC_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000fe4:	f000 fed2 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_ADC1_Init+0xe4>)
 8000fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fec:	2306      	movs	r3, #6
 8000fee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ff4:	237f      	movs	r3, #127	; 0x7f
 8000ff6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_ADC1_Init+0xdc>)
 8001006:	f002 f933 	bl	8003270 <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001010:	f000 febc 	bl	8001d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_ADC1_Init+0xe8>)
 8001016:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001018:	230c      	movs	r3, #12
 800101a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_ADC1_Init+0xdc>)
 8001022:	f002 f925 	bl	8003270 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800102c:	f000 feae 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200001fc 	.word	0x200001fc
 800103c:	50040000 	.word	0x50040000
 8001040:	04300002 	.word	0x04300002
 8001044:	08600004 	.word	0x08600004

08001048 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0a4      	sub	sp, #144	; 0x90
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2268      	movs	r2, #104	; 0x68
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f008 fa59 	bl	8009520 <memset>
  if(adcHandle->Instance==ADC1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a3b      	ldr	r2, [pc, #236]	; (8001160 <HAL_ADC_MspInit+0x118>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d16f      	bne.n	8001158 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800107c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800107e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001082:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001084:	2302      	movs	r3, #2
 8001086:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800108c:	2308      	movs	r3, #8
 800108e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001090:	2307      	movs	r3, #7
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800109c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 f8de 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80010b2:	f000 fe6b 	bl	8001d8c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <HAL_ADC_MspInit+0x11c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a2a      	ldr	r2, [pc, #168]	; (8001164 <HAL_ADC_MspInit+0x11c>)
 80010bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_ADC_MspInit+0x11c>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_ADC_MspInit+0x11c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a24      	ldr	r2, [pc, #144]	; (8001164 <HAL_ADC_MspInit+0x11c>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_ADC_MspInit+0x11c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e6:	2303      	movs	r3, #3
 80010e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ea:	230b      	movs	r3, #11
 80010ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010fa:	4619      	mov	r1, r3
 80010fc:	481a      	ldr	r0, [pc, #104]	; (8001168 <HAL_ADC_MspInit+0x120>)
 80010fe:	f003 fa71 	bl	80045e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_ADC_MspInit+0x124>)
 8001104:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <HAL_ADC_MspInit+0x128>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_ADC_MspInit+0x124>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_ADC_MspInit+0x124>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_ADC_MspInit+0x124>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_ADC_MspInit+0x124>)
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_ADC_MspInit+0x124>)
 8001122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001126:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_ADC_MspInit+0x124>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_ADC_MspInit+0x124>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_ADC_MspInit+0x124>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <HAL_ADC_MspInit+0x124>)
 800113e:	f002 ffdb 	bl	80040f8 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8001148:	f000 fe20 	bl	8001d8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_ADC_MspInit+0x124>)
 8001150:	651a      	str	r2, [r3, #80]	; 0x50
 8001152:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_ADC_MspInit+0x124>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001158:	bf00      	nop
 800115a:	3790      	adds	r7, #144	; 0x90
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	50040000 	.word	0x50040000
 8001164:	40021000 	.word	0x40021000
 8001168:	48000800 	.word	0x48000800
 800116c:	20000264 	.word	0x20000264
 8001170:	40020008 	.word	0x40020008

08001174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_DMA_Init+0x38>)
 800117c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <MX_DMA_Init+0x38>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6493      	str	r3, [r2, #72]	; 0x48
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_DMA_Init+0x38>)
 8001188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	200b      	movs	r0, #11
 8001198:	f002 ff77 	bl	800408a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800119c:	200b      	movs	r0, #11
 800119e:	f002 ff90 	bl	80040c2 <HAL_NVIC_EnableIRQ>

}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <MX_GPIO_Init+0xc8>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a2b      	ldr	r2, [pc, #172]	; (8001278 <MX_GPIO_Init+0xc8>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <MX_GPIO_Init+0xc8>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_GPIO_Init+0xc8>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a25      	ldr	r2, [pc, #148]	; (8001278 <MX_GPIO_Init+0xc8>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_GPIO_Init+0xc8>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_GPIO_Init+0xc8>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <MX_GPIO_Init+0xc8>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_GPIO_Init+0xc8>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_GPIO_Init+0xc8>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a19      	ldr	r2, [pc, #100]	; (8001278 <MX_GPIO_Init+0xc8>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_GPIO_Init+0xc8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001230:	2302      	movs	r3, #2
 8001232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f003 f9d1 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001246:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800124c:	2302      	movs	r3, #2
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f003 f9c3 	bl	80045e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2017      	movs	r0, #23
 8001264:	f002 ff11 	bl	800408a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001268:	2017      	movs	r0, #23
 800126a:	f002 ff2a 	bl	80040c2 <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_I2C1_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <MX_I2C1_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109099E5;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_I2C1_Init+0x74>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <MX_I2C1_Init+0x7c>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_I2C1_Init+0x74>)
 8001294:	2201      	movs	r2, #1
 8001296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012b8:	f003 fb3e 	bl	8004938 <HAL_I2C_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012c2:	f000 fd63 	bl	8001d8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012ca:	f004 f899 	bl	8005400 <HAL_I2CEx_ConfigAnalogFilter>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012d4:	f000 fd5a 	bl	8001d8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_I2C1_Init+0x74>)
 80012dc:	f004 f8db 	bl	8005496 <HAL_I2CEx_ConfigDigitalFilter>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 fd51 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002ac 	.word	0x200002ac
 80012f4:	40005400 	.word	0x40005400
 80012f8:	109099e5 	.word	0x109099e5

080012fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0a4      	sub	sp, #144	; 0x90
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2268      	movs	r2, #104	; 0x68
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f008 f8ff 	bl	8009520 <memset>
  if(i2cHandle->Instance==I2C1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <HAL_I2C_MspInit+0xac>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d139      	bne.n	80013a0 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800132c:	2340      	movs	r3, #64	; 0x40
 800132e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001330:	2300      	movs	r3, #0
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4618      	mov	r0, r3
 800133a:	f004 ff95 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001344:	f000 fd22 	bl	8001d8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_I2C_MspInit+0xb0>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_I2C_MspInit+0xb0>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_I2C_MspInit+0xb0>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001360:	23c0      	movs	r3, #192	; 0xc0
 8001362:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001364:	2312      	movs	r3, #18
 8001366:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001376:	2304      	movs	r3, #4
 8001378:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001380:	4619      	mov	r1, r3
 8001382:	480b      	ldr	r0, [pc, #44]	; (80013b0 <HAL_I2C_MspInit+0xb4>)
 8001384:	f003 f92e 	bl	80045e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_I2C_MspInit+0xb0>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_I2C_MspInit+0xb0>)
 800138e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001392:	6593      	str	r3, [r2, #88]	; 0x58
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_I2C_MspInit+0xb0>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013a0:	bf00      	nop
 80013a2:	3790      	adds	r7, #144	; 0x90
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40005400 	.word	0x40005400
 80013ac:	40021000 	.word	0x40021000
 80013b0:	48000400 	.word	0x48000400

080013b4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80013bc:	1d39      	adds	r1, r7, #4
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	2201      	movs	r2, #1
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <__io_putchar+0x20>)
 80013c6:	f006 fd83 	bl	8007ed0 <HAL_UART_Transmit>
  return ch;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000052c 	.word	0x2000052c

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013dc:	b099      	sub	sp, #100	; 0x64
 80013de:	af10      	add	r7, sp, #64	; 0x40
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */




	HAL_Init();
 80013e0:	f001 fa63 	bl	80028aa <HAL_Init>




  /* Configure the system clock */
  SystemClock_Config();
 80013e4:	f000 fa5a 	bl	800189c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e8:	f7ff fee2 	bl	80011b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ec:	f7ff fec2 	bl	8001174 <MX_DMA_Init>
  MX_TIM1_Init();
 80013f0:	f000 fe3c 	bl	800206c <MX_TIM1_Init>
  MX_TIM2_Init();
 80013f4:	f000 fef2 	bl	80021dc <MX_TIM2_Init>
  MX_UART4_Init();
 80013f8:	f001 f99a 	bl	8002730 <MX_UART4_Init>
  MX_TIM3_Init();
 80013fc:	f000 ff3c 	bl	8002278 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001400:	f000 ffea 	bl	80023d8 <MX_TIM15_Init>
  MX_ADC1_Init();
 8001404:	f7ff fdaa 	bl	8000f5c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001408:	f7ff ff38 	bl	800127c <MX_I2C1_Init>
  MX_TIM6_Init();
 800140c:	f000 ffac 	bl	8002368 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001410:	2100      	movs	r1, #0
 8001412:	489f      	ldr	r0, [pc, #636]	; (8001690 <main+0x2b8>)
 8001414:	f005 fbca 	bl	8006bac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001418:	2104      	movs	r1, #4
 800141a:	489d      	ldr	r0, [pc, #628]	; (8001690 <main+0x2b8>)
 800141c:	f005 fbc6 	bl	8006bac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001420:	2108      	movs	r1, #8
 8001422:	489c      	ldr	r0, [pc, #624]	; (8001694 <main+0x2bc>)
 8001424:	f005 fbc2 	bl	8006bac <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001428:	489b      	ldr	r0, [pc, #620]	; (8001698 <main+0x2c0>)
 800142a:	f005 fad3 	bl	80069d4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart4, Receive, 11);
 800142e:	220b      	movs	r2, #11
 8001430:	499a      	ldr	r1, [pc, #616]	; (800169c <main+0x2c4>)
 8001432:	489b      	ldr	r0, [pc, #620]	; (80016a0 <main+0x2c8>)
 8001434:	f006 fde0 	bl	8007ff8 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 8001438:	2100      	movs	r1, #0
 800143a:	489a      	ldr	r0, [pc, #616]	; (80016a4 <main+0x2cc>)
 800143c:	f005 fbb6 	bl	8006bac <HAL_TIM_PWM_Start>
  HAL_I2C_Mem_Read(&hi2c1, FRAM_ADDRESS,ENERGY_ADDRESS,I2C_MEMADD_SIZE_16BIT, (uint8_t *) &Energy, sizeof(Energy), 10);
 8001440:	230a      	movs	r3, #10
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2304      	movs	r3, #4
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	4b97      	ldr	r3, [pc, #604]	; (80016a8 <main+0x2d0>)
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2302      	movs	r3, #2
 800144e:	2200      	movs	r2, #0
 8001450:	21a0      	movs	r1, #160	; 0xa0
 8001452:	4896      	ldr	r0, [pc, #600]	; (80016ac <main+0x2d4>)
 8001454:	f003 fc14 	bl	8004c80 <HAL_I2C_Mem_Read>
		 }
		}
	 }*/


	TIM15->CCR1 = s;  //reverse
 8001458:	4b95      	ldr	r3, [pc, #596]	; (80016b0 <main+0x2d8>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b95      	ldr	r3, [pc, #596]	; (80016b4 <main+0x2dc>)
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
 TIM1->CCR1 = q;  //forward
 8001460:	4b95      	ldr	r3, [pc, #596]	; (80016b8 <main+0x2e0>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b95      	ldr	r3, [pc, #596]	; (80016bc <main+0x2e4>)
 8001466:	635a      	str	r2, [r3, #52]	; 0x34
   // TIM1->CCR2 = v;  // not using
TIM3->CCR3 = p; // solenoid 0.68 max current*/
 8001468:	4b95      	ldr	r3, [pc, #596]	; (80016c0 <main+0x2e8>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b95      	ldr	r3, [pc, #596]	; (80016c4 <main+0x2ec>)
 800146e:	63da      	str	r2, [r3, #60]	; 0x3c
	   HAL_ADC_Start_DMA(&hadc1, (uint32_t *)value, 2);
 8001470:	2202      	movs	r2, #2
 8001472:	4995      	ldr	r1, [pc, #596]	; (80016c8 <main+0x2f0>)
 8001474:	4895      	ldr	r0, [pc, #596]	; (80016cc <main+0x2f4>)
 8001476:	f001 fe01 	bl	800307c <HAL_ADC_Start_DMA>
	   Engery_Calulation();
 800147a:	f000 fbd1 	bl	8001c20 <Engery_Calulation>
	   	 }*/


 // Motor_ControlLoop(targetSpeed);

if(flag == 1)
 800147e:	4b94      	ldr	r3, [pc, #592]	; (80016d0 <main+0x2f8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d15e      	bne.n	8001544 <main+0x16c>
{
	//cnt[j] = counter;
			       countSum+=counter;
 8001486:	4b93      	ldr	r3, [pc, #588]	; (80016d4 <main+0x2fc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a93      	ldr	r2, [pc, #588]	; (80016d8 <main+0x300>)
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a90      	ldr	r2, [pc, #576]	; (80016d4 <main+0x2fc>)
 8001492:	6013      	str	r3, [r2, #0]
			       //ditanceCovered=((float)(countSum*10/20.0)*0.0754)/10.0;
			      distanceCovered=((float)(countSum/20.0)*0.0754); //m/sec
 8001494:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <main+0x2fc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f83b 	bl	8000514 <__aeabi_ui2d>
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b8e      	ldr	r3, [pc, #568]	; (80016dc <main+0x304>)
 80014a4:	f7ff f9da 	bl	800085c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb82 	bl	8000bb8 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f84e 	bl	8000558 <__aeabi_f2d>
 80014bc:	a370      	add	r3, pc, #448	; (adr r3, 8001680 <main+0x2a8>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f8a1 	bl	8000608 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb73 	bl	8000bb8 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a82      	ldr	r2, [pc, #520]	; (80016e0 <main+0x308>)
 80014d6:	6013      	str	r3, [r2, #0]
			      //distravelled = distanceCovered*100;
			       // distanceCovered=((float)(countSum/20.0)*0.103);
			   	 //  distance=(int)(distanceCovered * 100);
			   	  //  dis=sum_count*0.0754/20.0;
			   	    j++;
 80014d8:	4b82      	ldr	r3, [pc, #520]	; (80016e4 <main+0x30c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	4a81      	ldr	r2, [pc, #516]	; (80016e4 <main+0x30c>)
 80014e0:	6013      	str	r3, [r2, #0]
			   	    if(j>20){
 80014e2:	4b80      	ldr	r3, [pc, #512]	; (80016e4 <main+0x30c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b14      	cmp	r3, #20
 80014e8:	dd02      	ble.n	80014f0 <main+0x118>
			   	    	j=0;
 80014ea:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <main+0x30c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
			   	    }
			   	 rps = (float)counter*10/20.0;  //diameter is 27mm
 80014f0:	4b79      	ldr	r3, [pc, #484]	; (80016d8 <main+0x300>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001500:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001504:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150c:	4b76      	ldr	r3, [pc, #472]	; (80016e8 <main+0x310>)
 800150e:	edc3 7a00 	vstr	s15, [r3]
			   //	distanceCovered=(rps*0.0754); //m/sec
			   	    counter = 0;
 8001512:	4b71      	ldr	r3, [pc, #452]	; (80016d8 <main+0x300>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
			   	    // speed = rps*0.0942; //diameter is 29mm
			   	    speed_enc = rps*0.075398;
 8001518:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <main+0x310>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f81b 	bl	8000558 <__aeabi_f2d>
 8001522:	a359      	add	r3, pc, #356	; (adr r3, 8001688 <main+0x2b0>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f86e 	bl	8000608 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fb40 	bl	8000bb8 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	4a6c      	ldr	r2, [pc, #432]	; (80016ec <main+0x314>)
 800153c:	6013      	str	r3, [r2, #0]
			   	    //distance = speed_enc * 1000;
	    flag = 0;
 800153e:	4b64      	ldr	r3, [pc, #400]	; (80016d0 <main+0x2f8>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
}
if( Rx == 1)
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <main+0x318>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d185      	bne.n	8001458 <main+0x80>
 {
	 if((LocalTime - PrintTime ) >= 1000)
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <main+0x31c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <main+0x320>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800155a:	d359      	bcc.n	8001610 <main+0x238>
		   	 {
			   PrintTime  = LocalTime;
 800155c:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <main+0x31c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <main+0x320>)
 8001562:	6013      	str	r3, [r2, #0]
			   increment++;
 8001564:	4b65      	ldr	r3, [pc, #404]	; (80016fc <main+0x324>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a64      	ldr	r2, [pc, #400]	; (80016fc <main+0x324>)
 800156c:	6013      	str	r3, [r2, #0]

			   printf("{\"POD_ID\": \"%03d\",\"speed_enc\": \"%01.3f\",\"distanceCovered\": \"%06.3f\",\"Idc\": \"%02.3f\",\"Vdc\": \"%02.3f\",\"Power\": \"%02.3f\",\"Energy\": \"%06.3f\",\"ACK\": \"%d\",\"increment\": \"%d\",\"counterir\": \"%d\",\"spd\": \"04%d\",\"TrackingSwitching\": \"%d\"}\r\n", POD_ID, speed_enc, distanceCovered,Idc,Vdc,Power,Energy,ACK,increment,counterir,spd,TrackingSwitching);
 800156e:	4b64      	ldr	r3, [pc, #400]	; (8001700 <main+0x328>)
 8001570:	681e      	ldr	r6, [r3, #0]
 8001572:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <main+0x314>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ffee 	bl	8000558 <__aeabi_f2d>
 800157c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <main+0x308>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffe7 	bl	8000558 <__aeabi_f2d>
 800158a:	4680      	mov	r8, r0
 800158c:	4689      	mov	r9, r1
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <main+0x32c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffe0 	bl	8000558 <__aeabi_f2d>
 8001598:	4682      	mov	sl, r0
 800159a:	468b      	mov	fp, r1
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <main+0x330>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffd9 	bl	8000558 <__aeabi_f2d>
 80015a6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80015aa:	4b58      	ldr	r3, [pc, #352]	; (800170c <main+0x334>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffd2 	bl	8000558 <__aeabi_f2d>
 80015b4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80015b8:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <main+0x2d0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffcb 	bl	8000558 <__aeabi_f2d>
 80015c2:	4604      	mov	r4, r0
 80015c4:	460d      	mov	r5, r1
 80015c6:	4b52      	ldr	r3, [pc, #328]	; (8001710 <main+0x338>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <main+0x324>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <main+0x33c>)
 80015d2:	6819      	ldr	r1, [r3, #0]
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <main+0x340>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <main+0x344>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	930e      	str	r3, [sp, #56]	; 0x38
 80015de:	920d      	str	r2, [sp, #52]	; 0x34
 80015e0:	910c      	str	r1, [sp, #48]	; 0x30
 80015e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	930a      	str	r3, [sp, #40]	; 0x28
 80015e8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80015ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80015f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015f4:	ed97 7b04 	vldr	d7, [r7, #16]
 80015f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80015fc:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001600:	e9cd 8900 	strd	r8, r9, [sp]
 8001604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001608:	4631      	mov	r1, r6
 800160a:	4845      	ldr	r0, [pc, #276]	; (8001720 <main+0x348>)
 800160c:	f008 fbfa 	bl	8009e04 <iprintf>
 }

	 if(Receive[10]=='1')
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <main+0x2c4>)
 8001612:	7a9b      	ldrb	r3, [r3, #10]
 8001614:	2b31      	cmp	r3, #49	; 0x31
 8001616:	d104      	bne.n	8001622 <main+0x24a>
	 {
		 TIM3->CCR3 = 8000;
 8001618:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <main+0x2ec>)
 800161a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001620:	e002      	b.n	8001628 <main+0x250>

	 }
	 else
	 {
			 TIM3->CCR3 = 0;
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <main+0x2ec>)
 8001624:	2200      	movs	r2, #0
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
	 }
	 if(Receive[3]=='1') // For forward direction
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <main+0x2c4>)
 800162a:	78db      	ldrb	r3, [r3, #3]
 800162c:	2b31      	cmp	r3, #49	; 0x31
 800162e:	f040 8097 	bne.w	8001760 <main+0x388>
	  {
	     HAL_TIM_PWM_Stop(&htim15,TIM_CHANNEL_1);
 8001632:	2100      	movs	r1, #0
 8001634:	481b      	ldr	r0, [pc, #108]	; (80016a4 <main+0x2cc>)
 8001636:	f005 fb9f 	bl	8006d78 <HAL_TIM_PWM_Stop>
	     TIM15->CCR1 = 0;
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <main+0x2dc>)
 800163c:	2200      	movs	r2, #0
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
	     HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001640:	2100      	movs	r1, #0
 8001642:	4813      	ldr	r0, [pc, #76]	; (8001690 <main+0x2b8>)
 8001644:	f005 fab2 	bl	8006bac <HAL_TIM_PWM_Start>
   // if(i<=ServerSpeed)
	 	 if(i<=spd)
 8001648:	4b36      	ldr	r3, [pc, #216]	; (8001724 <main+0x34c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <main+0x340>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	dc6b      	bgt.n	800172c <main+0x354>
	 	 {
	 	  if((LocalTime - SpeedTime) >= 10)
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <main+0x31c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <main+0x350>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b09      	cmp	r3, #9
 8001660:	d97e      	bls.n	8001760 <main+0x388>
	 		{
			 TIM1->CCR1 = i;
 8001662:	4b30      	ldr	r3, [pc, #192]	; (8001724 <main+0x34c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <main+0x2e4>)
 8001668:	635a      	str	r2, [r3, #52]	; 0x34
			 i+=10;
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <main+0x34c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	330a      	adds	r3, #10
 8001670:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <main+0x34c>)
 8001672:	6013      	str	r3, [r2, #0]
			 SpeedTime=LocalTime;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <main+0x31c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a2b      	ldr	r2, [pc, #172]	; (8001728 <main+0x350>)
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e070      	b.n	8001760 <main+0x388>
 800167e:	bf00      	nop
 8001680:	161e4f76 	.word	0x161e4f76
 8001684:	3fb34d6a 	.word	0x3fb34d6a
 8001688:	882f0e0b 	.word	0x882f0e0b
 800168c:	3fb34d48 	.word	0x3fb34d48
 8001690:	200003b0 	.word	0x200003b0
 8001694:	20000448 	.word	0x20000448
 8001698:	200003fc 	.word	0x200003fc
 800169c:	2000031c 	.word	0x2000031c
 80016a0:	2000052c 	.word	0x2000052c
 80016a4:	200004e0 	.word	0x200004e0
 80016a8:	20000368 	.word	0x20000368
 80016ac:	200002ac 	.word	0x200002ac
 80016b0:	2000035c 	.word	0x2000035c
 80016b4:	40014000 	.word	0x40014000
 80016b8:	20000360 	.word	0x20000360
 80016bc:	40012c00 	.word	0x40012c00
 80016c0:	20000364 	.word	0x20000364
 80016c4:	40000400 	.word	0x40000400
 80016c8:	20000378 	.word	0x20000378
 80016cc:	200001fc 	.word	0x200001fc
 80016d0:	20000350 	.word	0x20000350
 80016d4:	20000374 	.word	0x20000374
 80016d8:	20000300 	.word	0x20000300
 80016dc:	40340000 	.word	0x40340000
 80016e0:	20000370 	.word	0x20000370
 80016e4:	20000358 	.word	0x20000358
 80016e8:	20000310 	.word	0x20000310
 80016ec:	20000318 	.word	0x20000318
 80016f0:	2000034c 	.word	0x2000034c
 80016f4:	200003a8 	.word	0x200003a8
 80016f8:	20000344 	.word	0x20000344
 80016fc:	200003a0 	.word	0x200003a0
 8001700:	20000314 	.word	0x20000314
 8001704:	2000038c 	.word	0x2000038c
 8001708:	20000388 	.word	0x20000388
 800170c:	20000390 	.word	0x20000390
 8001710:	2000039c 	.word	0x2000039c
 8001714:	20000304 	.word	0x20000304
 8001718:	20000328 	.word	0x20000328
 800171c:	2000036c 	.word	0x2000036c
 8001720:	0800c0c0 	.word	0x0800c0c0
 8001724:	20000354 	.word	0x20000354
 8001728:	20000308 	.word	0x20000308
	 		}
	 	 }
	 //else if(i>=ServerSpeed)
	 	  else if(i>=spd)
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <main+0x488>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <main+0x48c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	db13      	blt.n	8001760 <main+0x388>
	 	   {
	 		if((LocalTime - SpeedTime1) >= 10)
 8001738:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <main+0x490>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b4b      	ldr	r3, [pc, #300]	; (800186c <main+0x494>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b09      	cmp	r3, #9
 8001744:	d90c      	bls.n	8001760 <main+0x388>
	 		{
	 	     TIM1->CCR1 = i;
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <main+0x488>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b49      	ldr	r3, [pc, #292]	; (8001870 <main+0x498>)
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
			 i-=10;
 800174e:	4b44      	ldr	r3, [pc, #272]	; (8001860 <main+0x488>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3b0a      	subs	r3, #10
 8001754:	4a42      	ldr	r2, [pc, #264]	; (8001860 <main+0x488>)
 8001756:	6013      	str	r3, [r2, #0]
			 SpeedTime1=LocalTime;
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <main+0x490>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a43      	ldr	r2, [pc, #268]	; (800186c <main+0x494>)
 800175e:	6013      	str	r3, [r2, #0]
	 		 }
	 	   }
	 	}
	   if((LocalTime - MotorTimeFed) >= FinalTime)
 8001760:	4b41      	ldr	r3, [pc, #260]	; (8001868 <main+0x490>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b43      	ldr	r3, [pc, #268]	; (8001874 <main+0x49c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	4a43      	ldr	r2, [pc, #268]	; (8001878 <main+0x4a0>)
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	4293      	cmp	r3, r2
 8001770:	d313      	bcc.n	800179a <main+0x3c2>
	 	 {
	 		     HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8001772:	2100      	movs	r1, #0
 8001774:	4841      	ldr	r0, [pc, #260]	; (800187c <main+0x4a4>)
 8001776:	f005 faff 	bl	8006d78 <HAL_TIM_PWM_Stop>
	 		     TIM1->CCR1 = 0;
 800177a:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <main+0x498>)
 800177c:	2200      	movs	r2, #0
 800177e:	635a      	str	r2, [r3, #52]	; 0x34
	 		     MotorTimeFed = LocalTime;
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <main+0x490>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a3b      	ldr	r2, [pc, #236]	; (8001874 <main+0x49c>)
 8001786:	6013      	str	r3, [r2, #0]
	 		        Rx=0;
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <main+0x4a8>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
	 		        i=0;
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <main+0x488>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
	 		       ACK = 1;
 8001794:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <main+0x4ac>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
	 	  }

	 	 if(Receive[3]=='0') // For forward direction
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <main+0x4b0>)
 800179c:	78db      	ldrb	r3, [r3, #3]
 800179e:	2b30      	cmp	r3, #48	; 0x30
 80017a0:	d13f      	bne.n	8001822 <main+0x44a>
	 		 	   {
	 		 		  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 80017a2:	2100      	movs	r1, #0
 80017a4:	4835      	ldr	r0, [pc, #212]	; (800187c <main+0x4a4>)
 80017a6:	f005 fae7 	bl	8006d78 <HAL_TIM_PWM_Stop>
	 	 	 	 	  TIM1->CCR1 = 0;
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <main+0x498>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
	 	 	 	 	 HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 80017b0:	2100      	movs	r1, #0
 80017b2:	4836      	ldr	r0, [pc, #216]	; (800188c <main+0x4b4>)
 80017b4:	f005 f9fa 	bl	8006bac <HAL_TIM_PWM_Start>


	 		 		 if(i<=spd){
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <main+0x488>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <main+0x48c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dc14      	bgt.n	80017ee <main+0x416>
	 		 			// while(i<=spd){
	 		 				if((LocalTime - SpeedTime) >= 10)
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <main+0x490>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <main+0x4b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b09      	cmp	r3, #9
 80017d0:	d927      	bls.n	8001822 <main+0x44a>
	 		 				{
	 		 					TIM15->CCR1 = i;
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <main+0x488>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <main+0x4bc>)
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
	 							 i+=10;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <main+0x488>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	330a      	adds	r3, #10
 80017e0:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <main+0x488>)
 80017e2:	6013      	str	r3, [r2, #0]
	 							 SpeedTime=LocalTime;
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <main+0x490>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a29      	ldr	r2, [pc, #164]	; (8001890 <main+0x4b8>)
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e019      	b.n	8001822 <main+0x44a>
	 		 				}


	 		 		 }
	 		 		 else if(i>=spd)
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <main+0x488>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <main+0x48c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	db13      	blt.n	8001822 <main+0x44a>
	 		 		 {
	 		 			// while(i>=spd){
	 		 				if((LocalTime - SpeedTime1) >= 10)
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <main+0x490>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <main+0x494>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b09      	cmp	r3, #9
 8001806:	d90c      	bls.n	8001822 <main+0x44a>
	 		 				{
	 		 					TIM15->CCR1 = i;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <main+0x488>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <main+0x4bc>)
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
	 							 i-=10;
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <main+0x488>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3b0a      	subs	r3, #10
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <main+0x488>)
 8001818:	6013      	str	r3, [r2, #0]
	 							 SpeedTime1=LocalTime;
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <main+0x490>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <main+0x494>)
 8001820:	6013      	str	r3, [r2, #0]
	 		 			    }

	 		 		 }
	 		 		 }
	 	 if((LocalTime - MotorTimeBack) >= FinalTime)
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <main+0x490>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <main+0x4c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a12      	ldr	r2, [pc, #72]	; (8001878 <main+0x4a0>)
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	4293      	cmp	r3, r2
 8001832:	f4ff ae11 	bcc.w	8001458 <main+0x80>
	 		 	  {
	 		 		     HAL_TIM_PWM_Stop(&htim15,TIM_CHANNEL_1);
 8001836:	2100      	movs	r1, #0
 8001838:	4814      	ldr	r0, [pc, #80]	; (800188c <main+0x4b4>)
 800183a:	f005 fa9d 	bl	8006d78 <HAL_TIM_PWM_Stop>
	 		 		   TIM15->CCR1 = 0;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <main+0x4bc>)
 8001840:	2200      	movs	r2, #0
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
	 		 		   MotorTimeBack = LocalTime;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <main+0x490>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a13      	ldr	r2, [pc, #76]	; (8001898 <main+0x4c0>)
 800184a:	6013      	str	r3, [r2, #0]
	 		 		        Rx=0;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <main+0x4a8>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
	 		 		        i=0;
 8001852:	4b03      	ldr	r3, [pc, #12]	; (8001860 <main+0x488>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
	 		 		       ACK = 1;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <main+0x4ac>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
	TIM15->CCR1 = s;  //reverse
 800185e:	e5fb      	b.n	8001458 <main+0x80>
 8001860:	20000354 	.word	0x20000354
 8001864:	20000328 	.word	0x20000328
 8001868:	200003a8 	.word	0x200003a8
 800186c:	2000030c 	.word	0x2000030c
 8001870:	40012c00 	.word	0x40012c00
 8001874:	2000033c 	.word	0x2000033c
 8001878:	20000330 	.word	0x20000330
 800187c:	200003b0 	.word	0x200003b0
 8001880:	2000034c 	.word	0x2000034c
 8001884:	2000039c 	.word	0x2000039c
 8001888:	2000031c 	.word	0x2000031c
 800188c:	200004e0 	.word	0x200004e0
 8001890:	20000308 	.word	0x20000308
 8001894:	40014000 	.word	0x40014000
 8001898:	20000340 	.word	0x20000340

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b096      	sub	sp, #88	; 0x58
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	2244      	movs	r2, #68	; 0x44
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 fe38 	bl	8009520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018c2:	f003 fe43 	bl	800554c <HAL_PWREx_ControlVoltageScaling>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018cc:	f000 fa5e 	bl	8001d8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d0:	2302      	movs	r3, #2
 80018d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018da:	2340      	movs	r3, #64	; 0x40
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018de:	2302      	movs	r3, #2
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e2:	2302      	movs	r3, #2
 80018e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80018e6:	2302      	movs	r3, #2
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 39;
 80018ea:	2327      	movs	r3, #39	; 0x27
 80018ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018ee:	2307      	movs	r3, #7
 80018f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80018f6:	2304      	movs	r3, #4
 80018f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fe7a 	bl	80055f8 <HAL_RCC_OscConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800190a:	f000 fa3f 	bl	8001d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190e:	230f      	movs	r3, #15
 8001910:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001912:	2303      	movs	r3, #3
 8001914:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001922:	463b      	mov	r3, r7
 8001924:	2104      	movs	r1, #4
 8001926:	4618      	mov	r0, r3
 8001928:	f004 fa7a 	bl	8005e20 <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001932:	f000 fa2b 	bl	8001d8c <Error_Handler>
  }
}
 8001936:	bf00      	nop
 8001938:	3758      	adds	r7, #88	; 0x58
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	if(adc_conv_cplt == 0)
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <HAL_ADC_ConvCpltCallback+0x1c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConvCpltCallback+0x14>
	{
		Read_Adc();
 8001950:	f000 f8da 	bl	8001b08 <Read_Adc>
	}
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000037c 	.word	0x2000037c

08001960 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
if(GPIO_Pin == GPIO_PIN_6)
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	2b40      	cmp	r3, #64	; 0x40
 800196e:	d10c      	bne.n	800198a <HAL_GPIO_EXTI_Callback+0x2a>
{
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)== GPIO_PIN_SET)
 8001970:	2140      	movs	r1, #64	; 0x40
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001976:	f002 ffaf 	bl	80048d8 <HAL_GPIO_ReadPin>
 800197a:	4603      	mov	r3, r0
 800197c:	2b01      	cmp	r3, #1
 800197e:	d104      	bne.n	800198a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		counter++;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_GPIO_EXTI_Callback+0x4c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_GPIO_EXTI_Callback+0x4c>)
 8001988:	6013      	str	r3, [r2, #0]

	}
	//__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
}

  if(GPIO_Pin == GPIO_PIN_7 && (debounce_state == 1))
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	2b80      	cmp	r3, #128	; 0x80
 800198e:	d109      	bne.n	80019a4 <HAL_GPIO_EXTI_Callback+0x44>
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_GPIO_EXTI_Callback+0x44>
  {

    	 HAL_TIM_Base_Start_IT(&htim6);
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x54>)
 800199a:	f005 f81b 	bl	80069d4 <HAL_TIM_Base_Start_IT>
    	 debounce_state = 0;
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
			//counterir++;


	}
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000300 	.word	0x20000300
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000494 	.word	0x20000494

080019b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    flag=1;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

    if(htim == &htim6)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d112      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
    	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7)== GPIO_PIN_RESET)
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d4:	f002 ff80 	bl	80048d8 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10a      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
    	{
    		debounce_state = 1;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
    		counterir++;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019ec:	6013      	str	r3, [r2, #0]
    		HAL_TIM_Base_Stop_IT(&htim6);
 80019ee:	4804      	ldr	r0, [pc, #16]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80019f0:	f005 f84c 	bl	8006a8c <HAL_TIM_Base_Stop_IT>
    	}

    }
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000350 	.word	0x20000350
 8001a00:	20000494 	.word	0x20000494
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000304 	.word	0x20000304

08001a0c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

	Rx = 1;
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_UART_RxCpltCallback+0xcc>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart4, Receive, 11);
 8001a1a:	220b      	movs	r2, #11
 8001a1c:	492f      	ldr	r1, [pc, #188]	; (8001adc <HAL_UART_RxCpltCallback+0xd0>)
 8001a1e:	4830      	ldr	r0, [pc, #192]	; (8001ae0 <HAL_UART_RxCpltCallback+0xd4>)
 8001a20:	f006 faea 	bl	8007ff8 <HAL_UART_Receive_IT>

         for(int k=0; k<3; k++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e00b      	b.n	8001a42 <HAL_UART_RxCpltCallback+0x36>
         {
        	 Pod[k] = Receive[k];
 8001a2a:	4a2c      	ldr	r2, [pc, #176]	; (8001adc <HAL_UART_RxCpltCallback+0xd0>)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	4413      	add	r3, r2
 8001a30:	7819      	ldrb	r1, [r3, #0]
 8001a32:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	4413      	add	r3, r2
 8001a38:	460a      	mov	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]
         for(int k=0; k<3; k++)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	ddf0      	ble.n	8001a2a <HAL_UART_RxCpltCallback+0x1e>
         }
          POD_ID = atoi(Pod);
 8001a48:	4826      	ldr	r0, [pc, #152]	; (8001ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8001a4a:	f007 fd3a 	bl	80094c2 <atoi>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4a25      	ldr	r2, [pc, #148]	; (8001ae8 <HAL_UART_RxCpltCallback+0xdc>)
 8001a52:	6013      	str	r3, [r2, #0]
	     for(int i=3;i<7;i++)
 8001a54:	2303      	movs	r3, #3
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	e00a      	b.n	8001a70 <HAL_UART_RxCpltCallback+0x64>
		 {
		   sed[i-3] = Receive[i+1];
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	491e      	ldr	r1, [pc, #120]	; (8001adc <HAL_UART_RxCpltCallback+0xd0>)
 8001a64:	5c89      	ldrb	r1, [r1, r2]
 8001a66:	4a21      	ldr	r2, [pc, #132]	; (8001aec <HAL_UART_RxCpltCallback+0xe0>)
 8001a68:	54d1      	strb	r1, [r2, r3]
	     for(int i=3;i<7;i++)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	ddf1      	ble.n	8001a5a <HAL_UART_RxCpltCallback+0x4e>

		  }
		  spd = atoi(sed);
 8001a76:	481d      	ldr	r0, [pc, #116]	; (8001aec <HAL_UART_RxCpltCallback+0xe0>)
 8001a78:	f007 fd23 	bl	80094c2 <atoi>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_UART_RxCpltCallback+0xe4>)
 8001a80:	6013      	str	r3, [r2, #0]
		  //spd/=100;
		  //ServerSpeed = 31504*spd + 1055.2;

		  for(int j=7;j<9;j++)
 8001a82:	2307      	movs	r3, #7
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e00a      	b.n	8001a9e <HAL_UART_RxCpltCallback+0x92>
		  {
		     Time[j-7] = Receive[j+1];
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3b07      	subs	r3, #7
 8001a90:	4912      	ldr	r1, [pc, #72]	; (8001adc <HAL_UART_RxCpltCallback+0xd0>)
 8001a92:	5c89      	ldrb	r1, [r1, r2]
 8001a94:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <HAL_UART_RxCpltCallback+0xe8>)
 8001a96:	54d1      	strb	r1, [r2, r3]
		  for(int j=7;j<9;j++)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	ddf1      	ble.n	8001a88 <HAL_UART_RxCpltCallback+0x7c>
		  }
		   FinalTime = atoi(Time);
 8001aa4:	4813      	ldr	r0, [pc, #76]	; (8001af4 <HAL_UART_RxCpltCallback+0xe8>)
 8001aa6:	f007 fd0c 	bl	80094c2 <atoi>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <HAL_UART_RxCpltCallback+0xec>)
 8001aae:	6013      	str	r3, [r2, #0]
		   FinalTime*=1000;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_UART_RxCpltCallback+0xec>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_UART_RxCpltCallback+0xec>)
 8001abe:	6013      	str	r3, [r2, #0]
		   MotorTimeFed = LocalTime;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_UART_RxCpltCallback+0xf0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_UART_RxCpltCallback+0xf4>)
 8001ac6:	6013      	str	r3, [r2, #0]
		   MotorTimeBack = LocalTime;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_UART_RxCpltCallback+0xf0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_UART_RxCpltCallback+0xf8>)
 8001ace:	6013      	str	r3, [r2, #0]
		 // memset(Receive,'\0',11);
}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2000034c 	.word	0x2000034c
 8001adc:	2000031c 	.word	0x2000031c
 8001ae0:	2000052c 	.word	0x2000052c
 8001ae4:	20000338 	.word	0x20000338
 8001ae8:	20000314 	.word	0x20000314
 8001aec:	2000032c 	.word	0x2000032c
 8001af0:	20000328 	.word	0x20000328
 8001af4:	20000334 	.word	0x20000334
 8001af8:	20000330 	.word	0x20000330
 8001afc:	200003a8 	.word	0x200003a8
 8001b00:	2000033c 	.word	0x2000033c
 8001b04:	20000340 	.word	0x20000340

08001b08 <Read_Adc>:
void Read_Adc()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	 // HAL_ADC_Start_DMA(&hadc1, (uint32_t *)value, 2);

		      //if(adc_conv_cplt == 1)
		    //  {
		    	  static uint16_t sample_count = 0;
	              sample_count++;
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <Read_Adc+0xf0>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <Read_Adc+0xf0>)
 8001b16:	801a      	strh	r2, [r3, #0]
		     	  HAL_ADC_Stop_DMA(&hadc1);
 8001b18:	4838      	ldr	r0, [pc, #224]	; (8001bfc <Read_Adc+0xf4>)
 8001b1a:	f001 fb33 	bl	8003184 <HAL_ADC_Stop_DMA>
		     	  voltagePC0=((float)value[0])/4095*3.3;
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <Read_Adc+0xf8>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b2a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c04 <Read_Adc+0xfc>
 8001b2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b32:	ee16 0a90 	vmov	r0, s13
 8001b36:	f7fe fd0f 	bl	8000558 <__aeabi_f2d>
 8001b3a:	a329      	add	r3, pc, #164	; (adr r3, 8001be0 <Read_Adc+0xd8>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fd62 	bl	8000608 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f834 	bl	8000bb8 <__aeabi_d2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <Read_Adc+0x100>)
 8001b54:	6013      	str	r3, [r2, #0]
		     	  Vdc = value[0]*gain1 + offset1;//
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <Read_Adc+0xf8>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fcea 	bl	8000534 <__aeabi_i2d>
 8001b60:	a321      	add	r3, pc, #132	; (adr r3, 8001be8 <Read_Adc+0xe0>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fd4f 	bl	8000608 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	a31f      	add	r3, pc, #124	; (adr r3, 8001bf0 <Read_Adc+0xe8>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	f7fe fb90 	bl	800029c <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff f818 	bl	8000bb8 <__aeabi_d2f>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <Read_Adc+0x104>)
 8001b8c:	6013      	str	r3, [r2, #0]
		     	 //TrackVoltage = (int)Vdc;
		     	  currentPC1=((float)value[1])/4095*3300;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <Read_Adc+0xf8>)
 8001b90:	885b      	ldrh	r3, [r3, #2]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b9a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001c04 <Read_Adc+0xfc>
 8001b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001c10 <Read_Adc+0x108>
 8001ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <Read_Adc+0x10c>)
 8001bac:	edc3 7a00 	vstr	s15, [r3]
		     	  rawCurrent+=currentPC1;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <Read_Adc+0x110>)
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <Read_Adc+0x10c>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <Read_Adc+0x110>)
 8001bc2:	edc3 7a00 	vstr	s15, [r3]
		     	  if(sample_count == 1000)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <Read_Adc+0xf0>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bce:	d105      	bne.n	8001bdc <Read_Adc+0xd4>
		     	  {
		     		  sample_count = 0;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <Read_Adc+0xf0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
		     		 adc_conv_cplt = 1;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <Read_Adc+0x114>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
		     	   // sampleCurrent = 0;
		     	  }
		     	 // I = currentPC1/1.67;
		     	 // voltage and current calibration

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	66666666 	.word	0x66666666
 8001be4:	400a6666 	.word	0x400a6666
 8001be8:	8d4fdf3b 	.word	0x8d4fdf3b
 8001bec:	3f926e97 	.word	0x3f926e97
 8001bf0:	4fdf3b64 	.word	0x4fdf3b64
 8001bf4:	3ff1978d 	.word	0x3ff1978d
 8001bf8:	200003a4 	.word	0x200003a4
 8001bfc:	200001fc 	.word	0x200001fc
 8001c00:	20000378 	.word	0x20000378
 8001c04:	457ff000 	.word	0x457ff000
 8001c08:	20000380 	.word	0x20000380
 8001c0c:	20000388 	.word	0x20000388
 8001c10:	454e4000 	.word	0x454e4000
 8001c14:	20000384 	.word	0x20000384
 8001c18:	20000394 	.word	0x20000394
 8001c1c:	2000037c 	.word	0x2000037c

08001c20 <Engery_Calulation>:
void Engery_Calulation()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af04      	add	r7, sp, #16
	                  if(adc_conv_cplt == 1)
 8001c26:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <Engery_Calulation+0x138>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d12c      	bne.n	8001c88 <Engery_Calulation+0x68>
		   		     	  {
		   		     		 Current=(rawCurrent/1000);
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <Engery_Calulation+0x13c>)
 8001c30:	ed93 7a00 	vldr	s14, [r3]
 8001c34:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001d60 <Engery_Calulation+0x140>
 8001c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c3c:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <Engery_Calulation+0x144>)
 8001c3e:	edc3 7a00 	vstr	s15, [r3]
		   		     		 Idc = (Current*gain2) + offset2;
 8001c42:	4b48      	ldr	r3, [pc, #288]	; (8001d64 <Engery_Calulation+0x144>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc86 	bl	8000558 <__aeabi_f2d>
 8001c4c:	a33e      	add	r3, pc, #248	; (adr r3, 8001d48 <Engery_Calulation+0x128>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fcd9 	bl	8000608 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	a33c      	add	r3, pc, #240	; (adr r3, 8001d50 <Engery_Calulation+0x130>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	f7fe fb1a 	bl	800029c <__adddf3>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7fe ffa2 	bl	8000bb8 <__aeabi_d2f>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4a3c      	ldr	r2, [pc, #240]	; (8001d68 <Engery_Calulation+0x148>)
 8001c78:	6013      	str	r3, [r2, #0]
		   		     		rawCurrent = 0;
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <Engery_Calulation+0x13c>)
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
		   		     	     adc_conv_cplt = 0;
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <Engery_Calulation+0x138>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

		   		     	  }
	                  if(Idc < 0)
 8001c88:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <Engery_Calulation+0x148>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	d503      	bpl.n	8001ca0 <Engery_Calulation+0x80>
			     	  {
			     		  Idc = 0;
 8001c98:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <Engery_Calulation+0x148>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
			     	 }
			     	  if(Idc > 0)
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <Engery_Calulation+0x148>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	dd2c      	ble.n	8001d0a <Engery_Calulation+0xea>
			     	  {
			     		 Power =  Vdc*Idc;
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <Engery_Calulation+0x14c>)
 8001cb2:	ed93 7a00 	vldr	s14, [r3]
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <Engery_Calulation+0x148>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <Engery_Calulation+0x150>)
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
			     		 Energy = Energy + ((Power/1000)*((LocalTime - EnergyTime)/1000))/3600;
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <Engery_Calulation+0x150>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001d60 <Engery_Calulation+0x140>
 8001cd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <Engery_Calulation+0x154>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <Engery_Calulation+0x158>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <Engery_Calulation+0x15c>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf2:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001d80 <Engery_Calulation+0x160>
 8001cf6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <Engery_Calulation+0x164>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <Engery_Calulation+0x164>)
 8001d06:	edc3 7a00 	vstr	s15, [r3]

			     	  }
			     	 if((LocalTime - EnergyTime ) >= 60000)
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <Engery_Calulation+0x154>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <Engery_Calulation+0x158>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d90f      	bls.n	8001d3c <Engery_Calulation+0x11c>
			     	  {
			     		EnergyTime  = LocalTime;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <Engery_Calulation+0x154>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <Engery_Calulation+0x158>)
 8001d22:	6013      	str	r3, [r2, #0]
			     	    HAL_I2C_Mem_Write(&hi2c1, FRAM_ADDRESS,ENERGY_ADDRESS,I2C_MEMADD_SIZE_16BIT, (uint8_t *) &Energy, sizeof(Energy), 10);
 8001d24:	230a      	movs	r3, #10
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	2304      	movs	r3, #4
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <Engery_Calulation+0x164>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2302      	movs	r3, #2
 8001d32:	2200      	movs	r2, #0
 8001d34:	21a0      	movs	r1, #160	; 0xa0
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <Engery_Calulation+0x168>)
 8001d38:	f002 fe8e 	bl	8004a58 <HAL_I2C_Mem_Write>

			     	  }
			     	 //  voltage_input=voltagePC0*(R1+R2)/R2;
			     	 //Energy = Power*t
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	30553261 	.word	0x30553261
 8001d4c:	3f43a92a 	.word	0x3f43a92a
 8001d50:	d916872b 	.word	0xd916872b
 8001d54:	3f93f7ce 	.word	0x3f93f7ce
 8001d58:	2000037c 	.word	0x2000037c
 8001d5c:	20000394 	.word	0x20000394
 8001d60:	447a0000 	.word	0x447a0000
 8001d64:	20000398 	.word	0x20000398
 8001d68:	2000038c 	.word	0x2000038c
 8001d6c:	20000388 	.word	0x20000388
 8001d70:	20000390 	.word	0x20000390
 8001d74:	200003a8 	.word	0x200003a8
 8001d78:	20000348 	.word	0x20000348
 8001d7c:	10624dd3 	.word	0x10624dd3
 8001d80:	45610000 	.word	0x45610000
 8001d84:	20000368 	.word	0x20000368
 8001d88:	200002ac 	.word	0x200002ac

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
}
 8001d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <Error_Handler+0x8>
	...

08001d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_MspInit+0x44>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_MspInit+0x44>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6613      	str	r3, [r2, #96]	; 0x60
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_MspInit+0x44>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_MspInit+0x44>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_MspInit+0x44>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_MspInit+0x44>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <NMI_Handler+0x4>

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2c:	f000 fd92 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  LocalTime++;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <SysTick_Handler+0x18>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	4a02      	ldr	r2, [pc, #8]	; (8001e40 <SysTick_Handler+0x18>)
 8001e38:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200003a8 	.word	0x200003a8

08001e44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <DMA1_Channel1_IRQHandler+0x10>)
 8001e4a:	f002 faec 	bl	8004426 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000264 	.word	0x20000264

08001e58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e5c:	2040      	movs	r0, #64	; 0x40
 8001e5e:	f002 fd53 	bl	8004908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001e62:	2080      	movs	r0, #128	; 0x80
 8001e64:	f002 fd50 	bl	8004908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e72:	f005 f809 	bl	8006e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200003b0 	.word	0x200003b0

08001e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <TIM2_IRQHandler+0x10>)
 8001e86:	f004 ffff 	bl	8006e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200003fc 	.word	0x200003fc

08001e94 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <UART4_IRQHandler+0x10>)
 8001e9a:	f006 f903 	bl	80080a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000052c 	.word	0x2000052c

08001ea8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <TIM6_DAC_IRQHandler+0x10>)
 8001eae:	f004 ffeb 	bl	8006e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000494 	.word	0x20000494

08001ebc <_getpid>:
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_kill>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	f007 faf9 	bl	80094cc <__errno>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2216      	movs	r2, #22
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_exit>:
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ffe7 	bl	8001ecc <_kill>
 8001efe:	e7fe      	b.n	8001efe <_exit+0x12>

08001f00 <_read>:
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e00a      	b.n	8001f28 <_read+0x28>
 8001f12:	f3af 8000 	nop.w
 8001f16:	4601      	mov	r1, r0
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	60ba      	str	r2, [r7, #8]
 8001f1e:	b2ca      	uxtb	r2, r1
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbf0      	blt.n	8001f12 <_read+0x12>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_write>:
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e009      	b.n	8001f60 <_write+0x26>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60ba      	str	r2, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fa2d 	bl	80013b4 <__io_putchar>
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf1      	blt.n	8001f4c <_write+0x12>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_close>:
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_fstat>:
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <_isatty>:
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_lseek>:
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <_sbrk>:
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <_sbrk+0x5c>)
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <_sbrk+0x60>)
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <_sbrk+0x22>
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <_sbrk+0x64>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <_sbrk+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d207      	bcs.n	800201c <_sbrk+0x40>
 800200c:	f007 fa5e 	bl	80094cc <__errno>
 8002010:	4603      	mov	r3, r0
 8002012:	220c      	movs	r2, #12
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e009      	b.n	8002030 <_sbrk+0x54>
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <_sbrk+0x64>)
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20028000 	.word	0x20028000
 800203c:	00000400 	.word	0x00000400
 8002040:	200003ac 	.word	0x200003ac
 8002044:	200005c8 	.word	0x200005c8

08002048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <SystemInit+0x20>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <SystemInit+0x20>)
 8002054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b09a      	sub	sp, #104	; 0x68
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002072:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002080:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	615a      	str	r2, [r3, #20]
 800209e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	222c      	movs	r2, #44	; 0x2c
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f007 fa3a 	bl	8009520 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ac:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <MX_TIM1_Init+0x168>)
 80020ae:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <MX_TIM1_Init+0x16c>)
 80020b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 156-1;
 80020b2:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <MX_TIM1_Init+0x168>)
 80020b4:	229b      	movs	r2, #155	; 0x9b
 80020b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b8:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <MX_TIM1_Init+0x168>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80020be:	4b45      	ldr	r3, [pc, #276]	; (80021d4 <MX_TIM1_Init+0x168>)
 80020c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80020c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <MX_TIM1_Init+0x168>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020cc:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <MX_TIM1_Init+0x168>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <MX_TIM1_Init+0x168>)
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020d8:	483e      	ldr	r0, [pc, #248]	; (80021d4 <MX_TIM1_Init+0x168>)
 80020da:	f004 fc23 	bl	8006924 <HAL_TIM_Base_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80020e4:	f7ff fe52 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020f2:	4619      	mov	r1, r3
 80020f4:	4837      	ldr	r0, [pc, #220]	; (80021d4 <MX_TIM1_Init+0x168>)
 80020f6:	f005 f8fb 	bl	80072f0 <HAL_TIM_ConfigClockSource>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002100:	f7ff fe44 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002104:	4833      	ldr	r0, [pc, #204]	; (80021d4 <MX_TIM1_Init+0x168>)
 8002106:	f004 fcf0 	bl	8006aea <HAL_TIM_PWM_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002110:	f7ff fe3c 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002120:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002124:	4619      	mov	r1, r3
 8002126:	482b      	ldr	r0, [pc, #172]	; (80021d4 <MX_TIM1_Init+0x168>)
 8002128:	f005 fd80 	bl	8007c2c <HAL_TIMEx_MasterConfigSynchronization>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002132:	f7ff fe2b 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002136:	2360      	movs	r3, #96	; 0x60
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213e:	2300      	movs	r3, #0
 8002140:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002142:	2300      	movs	r3, #0
 8002144:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002152:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002156:	2200      	movs	r2, #0
 8002158:	4619      	mov	r1, r3
 800215a:	481e      	ldr	r0, [pc, #120]	; (80021d4 <MX_TIM1_Init+0x168>)
 800215c:	f004 ffb4 	bl	80070c8 <HAL_TIM_PWM_ConfigChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002166:	f7ff fe11 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800216a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800216e:	2204      	movs	r2, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4818      	ldr	r0, [pc, #96]	; (80021d4 <MX_TIM1_Init+0x168>)
 8002174:	f004 ffa8 	bl	80070c8 <HAL_TIM_PWM_ConfigChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800217e:	f7ff fe05 	bl	8001d8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <MX_TIM1_Init+0x168>)
 80021b8:	f005 fda6 	bl	8007d08 <HAL_TIMEx_ConfigBreakDeadTime>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80021c2:	f7ff fde3 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021c6:	4803      	ldr	r0, [pc, #12]	; (80021d4 <MX_TIM1_Init+0x168>)
 80021c8:	f000 fa2c 	bl	8002624 <HAL_TIM_MspPostInit>

}
 80021cc:	bf00      	nop
 80021ce:	3768      	adds	r7, #104	; 0x68
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	200003b0 	.word	0x200003b0
 80021d8:	40012c00 	.word	0x40012c00

080021dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e2:	f107 0310 	add.w	r3, r7, #16
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <MX_TIM2_Init+0x98>)
 80021fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002200:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <MX_TIM2_Init+0x98>)
 8002204:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002208:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <MX_TIM2_Init+0x98>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <MX_TIM2_Init+0x98>)
 8002212:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002216:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <MX_TIM2_Init+0x98>)
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <MX_TIM2_Init+0x98>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002224:	4813      	ldr	r0, [pc, #76]	; (8002274 <MX_TIM2_Init+0x98>)
 8002226:	f004 fb7d 	bl	8006924 <HAL_TIM_Base_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002230:	f7ff fdac 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002238:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800223a:	f107 0310 	add.w	r3, r7, #16
 800223e:	4619      	mov	r1, r3
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <MX_TIM2_Init+0x98>)
 8002242:	f005 f855 	bl	80072f0 <HAL_TIM_ConfigClockSource>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800224c:	f7ff fd9e 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002250:	2320      	movs	r3, #32
 8002252:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	4619      	mov	r1, r3
 800225c:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_TIM2_Init+0x98>)
 800225e:	f005 fce5 	bl	8007c2c <HAL_TIMEx_MasterConfigSynchronization>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002268:	f7ff fd90 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200003fc 	.word	0x200003fc

08002278 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08e      	sub	sp, #56	; 0x38
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	615a      	str	r2, [r3, #20]
 80022a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022ac:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <MX_TIM3_Init+0xec>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022b2:	2209      	movs	r2, #9
 80022b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022be:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022d0:	4823      	ldr	r0, [pc, #140]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022d2:	f004 fb27 	bl	8006924 <HAL_TIM_Base_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80022dc:	f7ff fd56 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ea:	4619      	mov	r1, r3
 80022ec:	481c      	ldr	r0, [pc, #112]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022ee:	f004 ffff 	bl	80072f0 <HAL_TIM_ConfigClockSource>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80022f8:	f7ff fd48 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022fc:	4818      	ldr	r0, [pc, #96]	; (8002360 <MX_TIM3_Init+0xe8>)
 80022fe:	f004 fbf4 	bl	8006aea <HAL_TIM_PWM_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002308:	f7ff fd40 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4811      	ldr	r0, [pc, #68]	; (8002360 <MX_TIM3_Init+0xe8>)
 800231c:	f005 fc86 	bl	8007c2c <HAL_TIMEx_MasterConfigSynchronization>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002326:	f7ff fd31 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232a:	2360      	movs	r3, #96	; 0x60
 800232c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800233a:	463b      	mov	r3, r7
 800233c:	2208      	movs	r2, #8
 800233e:	4619      	mov	r1, r3
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <MX_TIM3_Init+0xe8>)
 8002342:	f004 fec1 	bl	80070c8 <HAL_TIM_PWM_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800234c:	f7ff fd1e 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <MX_TIM3_Init+0xe8>)
 8002352:	f000 f967 	bl	8002624 <HAL_TIM_MspPostInit>

}
 8002356:	bf00      	nop
 8002358:	3738      	adds	r7, #56	; 0x38
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000448 	.word	0x20000448
 8002364:	40000400 	.word	0x40000400

08002368 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <MX_TIM6_Init+0x68>)
 800237a:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <MX_TIM6_Init+0x6c>)
 800237c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <MX_TIM6_Init+0x68>)
 8002380:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002384:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <MX_TIM6_Init+0x68>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1560-1;
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <MX_TIM6_Init+0x68>)
 800238e:	f240 6217 	movw	r2, #1559	; 0x617
 8002392:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <MX_TIM6_Init+0x68>)
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800239a:	480d      	ldr	r0, [pc, #52]	; (80023d0 <MX_TIM6_Init+0x68>)
 800239c:	f004 fac2 	bl	8006924 <HAL_TIM_Base_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80023a6:	f7ff fcf1 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	4806      	ldr	r0, [pc, #24]	; (80023d0 <MX_TIM6_Init+0x68>)
 80023b8:	f005 fc38 	bl	8007c2c <HAL_TIMEx_MasterConfigSynchronization>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80023c2:	f7ff fce3 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000494 	.word	0x20000494
 80023d4:	40001000 	.word	0x40001000

080023d8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b09a      	sub	sp, #104	; 0x68
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	615a      	str	r2, [r3, #20]
 800240a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	222c      	movs	r2, #44	; 0x2c
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f007 f884 	bl	8009520 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002418:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <MX_TIM15_Init+0x13c>)
 800241a:	4a3f      	ldr	r2, [pc, #252]	; (8002518 <MX_TIM15_Init+0x140>)
 800241c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 156-1;
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <MX_TIM15_Init+0x13c>)
 8002420:	229b      	movs	r2, #155	; 0x9b
 8002422:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002424:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <MX_TIM15_Init+0x13c>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000-1;
 800242a:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <MX_TIM15_Init+0x13c>)
 800242c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002430:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <MX_TIM15_Init+0x13c>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002438:	4b36      	ldr	r3, [pc, #216]	; (8002514 <MX_TIM15_Init+0x13c>)
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800243e:	4b35      	ldr	r3, [pc, #212]	; (8002514 <MX_TIM15_Init+0x13c>)
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002444:	4833      	ldr	r0, [pc, #204]	; (8002514 <MX_TIM15_Init+0x13c>)
 8002446:	f004 fa6d 	bl	8006924 <HAL_TIM_Base_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002450:	f7ff fc9c 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002458:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800245a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800245e:	4619      	mov	r1, r3
 8002460:	482c      	ldr	r0, [pc, #176]	; (8002514 <MX_TIM15_Init+0x13c>)
 8002462:	f004 ff45 	bl	80072f0 <HAL_TIM_ConfigClockSource>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800246c:	f7ff fc8e 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002470:	4828      	ldr	r0, [pc, #160]	; (8002514 <MX_TIM15_Init+0x13c>)
 8002472:	f004 fb3a 	bl	8006aea <HAL_TIM_PWM_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800247c:	f7ff fc86 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002488:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800248c:	4619      	mov	r1, r3
 800248e:	4821      	ldr	r0, [pc, #132]	; (8002514 <MX_TIM15_Init+0x13c>)
 8002490:	f005 fbcc 	bl	8007c2c <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800249a:	f7ff fc77 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249e:	2360      	movs	r3, #96	; 0x60
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a6:	2300      	movs	r3, #0
 80024a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024aa:	2300      	movs	r3, #0
 80024ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024be:	2200      	movs	r2, #0
 80024c0:	4619      	mov	r1, r3
 80024c2:	4814      	ldr	r0, [pc, #80]	; (8002514 <MX_TIM15_Init+0x13c>)
 80024c4:	f004 fe00 	bl	80070c8 <HAL_TIM_PWM_ConfigChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80024ce:	f7ff fc5d 	bl	8001d8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4807      	ldr	r0, [pc, #28]	; (8002514 <MX_TIM15_Init+0x13c>)
 80024f6:	f005 fc07 	bl	8007d08 <HAL_TIMEx_ConfigBreakDeadTime>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8002500:	f7ff fc44 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002504:	4803      	ldr	r0, [pc, #12]	; (8002514 <MX_TIM15_Init+0x13c>)
 8002506:	f000 f88d 	bl	8002624 <HAL_TIM_MspPostInit>

}
 800250a:	bf00      	nop
 800250c:	3768      	adds	r7, #104	; 0x68
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200004e0 	.word	0x200004e0
 8002518:	40014000 	.word	0x40014000

0800251c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a39      	ldr	r2, [pc, #228]	; (8002610 <HAL_TIM_Base_MspInit+0xf4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d114      	bne.n	8002558 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800252e:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	4a38      	ldr	r2, [pc, #224]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 8002534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002538:	6613      	str	r3, [r2, #96]	; 0x60
 800253a:	4b36      	ldr	r3, [pc, #216]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2019      	movs	r0, #25
 800254c:	f001 fd9d 	bl	800408a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002550:	2019      	movs	r0, #25
 8002552:	f001 fdb6 	bl	80040c2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002556:	e056      	b.n	8002606 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002560:	d114      	bne.n	800258c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002562:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6593      	str	r3, [r2, #88]	; 0x58
 800256e:	4b29      	ldr	r3, [pc, #164]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201c      	movs	r0, #28
 8002580:	f001 fd83 	bl	800408a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002584:	201c      	movs	r0, #28
 8002586:	f001 fd9c 	bl	80040c2 <HAL_NVIC_EnableIRQ>
}
 800258a:	e03c      	b.n	8002606 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM3)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a21      	ldr	r2, [pc, #132]	; (8002618 <HAL_TIM_Base_MspInit+0xfc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10c      	bne.n	80025b0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	6593      	str	r3, [r2, #88]	; 0x58
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
}
 80025ae:	e02a      	b.n	8002606 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM6)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a19      	ldr	r2, [pc, #100]	; (800261c <HAL_TIM_Base_MspInit+0x100>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d114      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4a15      	ldr	r2, [pc, #84]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6593      	str	r3, [r2, #88]	; 0x58
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2036      	movs	r0, #54	; 0x36
 80025d8:	f001 fd57 	bl	800408a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025dc:	2036      	movs	r0, #54	; 0x36
 80025de:	f001 fd70 	bl	80040c2 <HAL_NVIC_EnableIRQ>
}
 80025e2:	e010      	b.n	8002606 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM15)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_TIM_Base_MspInit+0x104>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10b      	bne.n	8002606 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	6613      	str	r3, [r2, #96]	; 0x60
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_TIM_Base_MspInit+0xf8>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
}
 8002606:	bf00      	nop
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40012c00 	.word	0x40012c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40000400 	.word	0x40000400
 800261c:	40001000 	.word	0x40001000
 8002620:	40014000 	.word	0x40014000

08002624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a35      	ldr	r2, [pc, #212]	; (8002718 <HAL_TIM_MspPostInit+0xf4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11e      	bne.n	8002684 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	4a34      	ldr	r2, [pc, #208]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800265e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002670:	2301      	movs	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267e:	f001 ffb1 	bl	80045e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002682:	e044      	b.n	800270e <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <HAL_TIM_MspPostInit+0xfc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d11d      	bne.n	80026ca <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	4a22      	ldr	r2, [pc, #136]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026b8:	2302      	movs	r3, #2
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4619      	mov	r1, r3
 80026c2:	4818      	ldr	r0, [pc, #96]	; (8002724 <HAL_TIM_MspPostInit+0x100>)
 80026c4:	f001 ff8e 	bl	80045e4 <HAL_GPIO_Init>
}
 80026c8:	e021      	b.n	800270e <HAL_TIM_MspPostInit+0xea>
  else if(timHandle->Instance==TIM15)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_TIM_MspPostInit+0x104>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d11c      	bne.n	800270e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_TIM_MspPostInit+0xf8>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80026ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80026fe:	230e      	movs	r3, #14
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	4808      	ldr	r0, [pc, #32]	; (800272c <HAL_TIM_MspPostInit+0x108>)
 800270a:	f001 ff6b 	bl	80045e4 <HAL_GPIO_Init>
}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	; 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40012c00 	.word	0x40012c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40000400 	.word	0x40000400
 8002724:	48000800 	.word	0x48000800
 8002728:	40014000 	.word	0x40014000
 800272c:	48000400 	.word	0x48000400

08002730 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <MX_UART4_Init+0x58>)
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <MX_UART4_Init+0x5c>)
 8002738:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <MX_UART4_Init+0x58>)
 800273c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002740:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_UART4_Init+0x58>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <MX_UART4_Init+0x58>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_UART4_Init+0x58>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_UART4_Init+0x58>)
 8002756:	220c      	movs	r2, #12
 8002758:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <MX_UART4_Init+0x58>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_UART4_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <MX_UART4_Init+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_UART4_Init+0x58>)
 800276e:	2200      	movs	r2, #0
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_UART4_Init+0x58>)
 8002774:	f005 fb5e 	bl	8007e34 <HAL_UART_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800277e:	f7ff fb05 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2000052c 	.word	0x2000052c
 800278c:	40004c00 	.word	0x40004c00

08002790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0a4      	sub	sp, #144	; 0x90
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2268      	movs	r2, #104	; 0x68
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f006 feb5 	bl	8009520 <memset>
  if(uartHandle->Instance==UART4)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a25      	ldr	r2, [pc, #148]	; (8002850 <HAL_UART_MspInit+0xc0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d142      	bne.n	8002846 <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027c0:	2308      	movs	r3, #8
 80027c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fd4b 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027d8:	f7ff fad8 	bl	8001d8c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_UART_MspInit+0xc4>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <HAL_UART_MspInit+0xc4>)
 80027e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027e6:	6593      	str	r3, [r2, #88]	; 0x58
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <HAL_UART_MspInit+0xc4>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_UART_MspInit+0xc4>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	4a16      	ldr	r2, [pc, #88]	; (8002854 <HAL_UART_MspInit+0xc4>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_UART_MspInit+0xc4>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800280c:	2303      	movs	r3, #3
 800280e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002822:	2308      	movs	r3, #8
 8002824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800282c:	4619      	mov	r1, r3
 800282e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002832:	f001 fed7 	bl	80045e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2034      	movs	r0, #52	; 0x34
 800283c:	f001 fc25 	bl	800408a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002840:	2034      	movs	r0, #52	; 0x34
 8002842:	f001 fc3e 	bl	80040c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002846:	bf00      	nop
 8002848:	3790      	adds	r7, #144	; 0x90
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40004c00 	.word	0x40004c00
 8002854:	40021000 	.word	0x40021000

08002858 <Reset_Handler>:
 8002858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002890 <LoopForever+0x2>
 800285c:	f7ff fbf4 	bl	8002048 <SystemInit>
 8002860:	480c      	ldr	r0, [pc, #48]	; (8002894 <LoopForever+0x6>)
 8002862:	490d      	ldr	r1, [pc, #52]	; (8002898 <LoopForever+0xa>)
 8002864:	4a0d      	ldr	r2, [pc, #52]	; (800289c <LoopForever+0xe>)
 8002866:	2300      	movs	r3, #0
 8002868:	e002      	b.n	8002870 <LoopCopyDataInit>

0800286a <CopyDataInit>:
 800286a:	58d4      	ldr	r4, [r2, r3]
 800286c:	50c4      	str	r4, [r0, r3]
 800286e:	3304      	adds	r3, #4

08002870 <LoopCopyDataInit>:
 8002870:	18c4      	adds	r4, r0, r3
 8002872:	428c      	cmp	r4, r1
 8002874:	d3f9      	bcc.n	800286a <CopyDataInit>
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <LoopForever+0x12>)
 8002878:	4c0a      	ldr	r4, [pc, #40]	; (80028a4 <LoopForever+0x16>)
 800287a:	2300      	movs	r3, #0
 800287c:	e001      	b.n	8002882 <LoopFillZerobss>

0800287e <FillZerobss>:
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	3204      	adds	r2, #4

08002882 <LoopFillZerobss>:
 8002882:	42a2      	cmp	r2, r4
 8002884:	d3fb      	bcc.n	800287e <FillZerobss>
 8002886:	f006 fe27 	bl	80094d8 <__libc_init_array>
 800288a:	f7fe fda5 	bl	80013d8 <main>

0800288e <LoopForever>:
 800288e:	e7fe      	b.n	800288e <LoopForever>
 8002890:	20028000 	.word	0x20028000
 8002894:	20000000 	.word	0x20000000
 8002898:	200001e0 	.word	0x200001e0
 800289c:	0800c5dc 	.word	0x0800c5dc
 80028a0:	200001e0 	.word	0x200001e0
 80028a4:	200005c4 	.word	0x200005c4

080028a8 <ADC1_IRQHandler>:
 80028a8:	e7fe      	b.n	80028a8 <ADC1_IRQHandler>

080028aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f001 fbdd 	bl	8004074 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ba:	200f      	movs	r0, #15
 80028bc:	f000 f80e 	bl	80028dc <HAL_InitTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	71fb      	strb	r3, [r7, #7]
 80028ca:	e001      	b.n	80028d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028cc:	f7ff fa64 	bl	8001d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028d0:	79fb      	ldrb	r3, [r7, #7]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_InitTick+0x6c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d023      	beq.n	8002938 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_InitTick+0x70>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_InitTick+0x6c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	4618      	mov	r0, r3
 8002908:	f001 fbe9 	bl	80040de <HAL_SYSTICK_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d809      	bhi.n	800292c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f001 fbb3 	bl	800408a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002924:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_InitTick+0x74>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e007      	b.n	800293c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e004      	b.n	800293c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	e001      	b.n	800293c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000000c 	.word	0x2000000c
 800294c:	20000004 	.word	0x20000004
 8002950:	20000008 	.word	0x20000008

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	2000000c 	.word	0x2000000c
 8002978:	200005b0 	.word	0x200005b0

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	200005b0 	.word	0x200005b0

08002994 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	609a      	str	r2, [r3, #8]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3360      	adds	r3, #96	; 0x60
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <LL_ADC_SetOffset+0x44>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	03fff000 	.word	0x03fff000

08002a44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3360      	adds	r3, #96	; 0x60
 8002a52:	461a      	mov	r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3360      	adds	r3, #96	; 0x60
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	615a      	str	r2, [r3, #20]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3330      	adds	r3, #48	; 0x30
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	4413      	add	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	211f      	movs	r1, #31
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	401a      	ands	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	f003 011f 	and.w	r1, r3, #31
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3314      	adds	r3, #20
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	0e5b      	lsrs	r3, r3, #25
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	4413      	add	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	0d1b      	lsrs	r3, r3, #20
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	2107      	movs	r1, #7
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	401a      	ands	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	0d1b      	lsrs	r3, r3, #20
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0318 	and.w	r3, r3, #24
 8002bc2:	4908      	ldr	r1, [pc, #32]	; (8002be4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bc4:	40d9      	lsrs	r1, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	400b      	ands	r3, r1
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	0007ffff 	.word	0x0007ffff

08002be8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002bf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6093      	str	r3, [r2, #8]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c20:	d101      	bne.n	8002c26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c70:	d101      	bne.n	8002c76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc0:	f043 0202 	orr.w	r2, r3, #2
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <LL_ADC_IsEnabled+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_ADC_IsEnabled+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d101      	bne.n	8002d12 <LL_ADC_IsDisableOngoing+0x18>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_ADC_IsDisableOngoing+0x1a>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d5c:	f043 0210 	orr.w	r2, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d101      	bne.n	8002d88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e12f      	b.n	800305e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fe f91b 	bl	8001048 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fef1 	bl	8002c0c <LL_ADC_IsDeepPowerDownEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fed7 	bl	8002be8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff0c 	bl	8002c5c <LL_ADC_IsInternalRegulatorEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d115      	bne.n	8002e76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fef0 	bl	8002c34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e54:	4b84      	ldr	r3, [pc, #528]	; (8003068 <HAL_ADC_Init+0x284>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	4a84      	ldr	r2, [pc, #528]	; (800306c <HAL_ADC_Init+0x288>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	3301      	adds	r3, #1
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e68:	e002      	b.n	8002e70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f9      	bne.n	8002e6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff feee 	bl	8002c5c <LL_ADC_IsInternalRegulatorEnabled>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	f043 0210 	orr.w	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ff62 	bl	8002d70 <LL_ADC_REG_IsConversionOngoing>
 8002eac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 80c8 	bne.w	800304c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 80c4 	bne.w	800304c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ecc:	f043 0202 	orr.w	r2, r3, #2
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fefb 	bl	8002cd4 <LL_ADC_IsEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee4:	4862      	ldr	r0, [pc, #392]	; (8003070 <HAL_ADC_Init+0x28c>)
 8002ee6:	f7ff fef5 	bl	8002cd4 <LL_ADC_IsEnabled>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	485f      	ldr	r0, [pc, #380]	; (8003074 <HAL_ADC_Init+0x290>)
 8002ef8:	f7ff fd4c 	bl	8002994 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7e5b      	ldrb	r3, [r3, #25]
 8002f00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f06:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f1a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d106      	bne.n	8002f38 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	045b      	lsls	r3, r3, #17
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_ADC_Init+0x294>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff feff 	bl	8002d70 <LL_ADC_REG_IsConversionOngoing>
 8002f72:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff20 	bl	8002dbe <LL_ADC_INJ_IsConversionOngoing>
 8002f7e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d140      	bne.n	8003008 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d13d      	bne.n	8003008 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7e1b      	ldrb	r3, [r3, #24]
 8002f94:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f96:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f9e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fae:	f023 0306 	bic.w	r3, r3, #6
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	69b9      	ldr	r1, [r7, #24]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d118      	bne.n	8002ff8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fdc:	4311      	orrs	r1, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	611a      	str	r2, [r3, #16]
 8002ff6:	e007      	b.n	8003008 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10c      	bne.n	800302a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f023 010f 	bic.w	r1, r3, #15
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	1e5a      	subs	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
 8003028:	e007      	b.n	800303a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 020f 	bic.w	r2, r2, #15
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	659a      	str	r2, [r3, #88]	; 0x58
 800304a:	e007      	b.n	800305c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800305c:	7ffb      	ldrb	r3, [r7, #31]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000004 	.word	0x20000004
 800306c:	053e2d63 	.word	0x053e2d63
 8003070:	50040000 	.word	0x50040000
 8003074:	50040300 	.word	0x50040300
 8003078:	fff0c007 	.word	0xfff0c007

0800307c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fe6f 	bl	8002d70 <LL_ADC_REG_IsConversionOngoing>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d167      	bne.n	8003168 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_Start_DMA+0x2a>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e063      	b.n	800316e <HAL_ADC_Start_DMA+0xf2>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fd96 	bl	8003be0 <ADC_Enable>
 80030b4:	4603      	mov	r3, r0
 80030b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d14f      	bne.n	800315e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030c6:	f023 0301 	bic.w	r3, r3, #1
 80030ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d006      	beq.n	80030ec <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f023 0206 	bic.w	r2, r3, #6
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80030ea:	e002      	b.n	80030f2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	4a20      	ldr	r2, [pc, #128]	; (8003178 <HAL_ADC_Start_DMA+0xfc>)
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_ADC_Start_DMA+0x100>)
 8003100:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003106:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <HAL_ADC_Start_DMA+0x104>)
 8003108:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	221c      	movs	r2, #28
 8003110:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0210 	orr.w	r2, r2, #16
 8003128:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3340      	adds	r3, #64	; 0x40
 8003144:	4619      	mov	r1, r3
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f001 f88d 	bl	8004268 <HAL_DMA_Start_IT>
 800314e:	4603      	mov	r3, r0
 8003150:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fde2 	bl	8002d20 <LL_ADC_REG_StartConversion>
 800315c:	e006      	b.n	800316c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003166:	e001      	b.n	800316c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003168:	2302      	movs	r3, #2
 800316a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800316c:	7dfb      	ldrb	r3, [r7, #23]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	08003dab 	.word	0x08003dab
 800317c:	08003e83 	.word	0x08003e83
 8003180:	08003e9f 	.word	0x08003e9f

08003184 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_ADC_Stop_DMA+0x16>
 8003196:	2302      	movs	r3, #2
 8003198:	e051      	b.n	800323e <HAL_ADC_Stop_DMA+0xba>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80031a2:	2103      	movs	r1, #3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fc5f 	bl	8003a68 <ADC_ConversionStop>
 80031aa:	4603      	mov	r3, r0
 80031ac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d13f      	bne.n	8003234 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d10f      	bne.n	80031f2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f8a6 	bl	8004328 <HAL_DMA_Abort>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0210 	bic.w	r2, r2, #16
 8003200:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fd6f 	bl	8003cec <ADC_Disable>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	e002      	b.n	800321a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fd69 	bl	8003cec <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b0b6      	sub	sp, #216	; 0xd8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x22>
 800328e:	2302      	movs	r3, #2
 8003290:	e3d5      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x7ce>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fd66 	bl	8002d70 <LL_ADC_REG_IsConversionOngoing>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 83ba 	bne.w	8003a20 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d824      	bhi.n	80032fe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	3b02      	subs	r3, #2
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d81b      	bhi.n	80032f6 <HAL_ADC_ConfigChannel+0x86>
 80032be:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <HAL_ADC_ConfigChannel+0x54>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032dd 	.word	0x080032dd
 80032cc:	080032e5 	.word	0x080032e5
 80032d0:	080032ed 	.word	0x080032ed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	220c      	movs	r2, #12
 80032d8:	605a      	str	r2, [r3, #4]
          break;
 80032da:	e011      	b.n	8003300 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2212      	movs	r2, #18
 80032e0:	605a      	str	r2, [r3, #4]
          break;
 80032e2:	e00d      	b.n	8003300 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2218      	movs	r2, #24
 80032e8:	605a      	str	r2, [r3, #4]
          break;
 80032ea:	e009      	b.n	8003300 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f2:	605a      	str	r2, [r3, #4]
          break;
 80032f4:	e004      	b.n	8003300 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2206      	movs	r2, #6
 80032fa:	605a      	str	r2, [r3, #4]
          break;
 80032fc:	e000      	b.n	8003300 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80032fe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	f7ff fbf0 	bl	8002af2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fd2a 	bl	8002d70 <LL_ADC_REG_IsConversionOngoing>
 800331c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fd4a 	bl	8002dbe <LL_ADC_INJ_IsConversionOngoing>
 800332a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800332e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 81c1 	bne.w	80036ba <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 81bc 	bne.w	80036ba <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800334a:	d10f      	bne.n	800336c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2200      	movs	r2, #0
 8003356:	4619      	mov	r1, r3
 8003358:	f7ff fbf7 	bl	8002b4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fb9e 	bl	8002aa6 <LL_ADC_SetSamplingTimeCommonConfig>
 800336a:	e00e      	b.n	800338a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	461a      	mov	r2, r3
 800337a:	f7ff fbe6 	bl	8002b4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fb8e 	bl	8002aa6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d00a      	beq.n	80033c2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6919      	ldr	r1, [r3, #16]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033bc:	f7ff fb1e 	bl	80029fc <LL_ADC_SetOffset>
 80033c0:	e17b      	b.n	80036ba <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fb3b 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x17e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fb30 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	0e9b      	lsrs	r3, r3, #26
 80033e8:	f003 021f 	and.w	r2, r3, #31
 80033ec:	e01e      	b.n	800342c <HAL_ADC_ConfigChannel+0x1bc>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fb25 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800340c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e004      	b.n	800342a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x1d4>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0e9b      	lsrs	r3, r3, #26
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	e018      	b.n	8003476 <HAL_ADC_ConfigChannel+0x206>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800345c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003468:	2320      	movs	r3, #32
 800346a:	e004      	b.n	8003476 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800346c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003476:	429a      	cmp	r2, r3
 8003478:	d106      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff faf4 	bl	8002a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fad8 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003494:	4603      	mov	r3, r0
 8003496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x244>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2101      	movs	r1, #1
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff facd 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80034aa:	4603      	mov	r3, r0
 80034ac:	0e9b      	lsrs	r3, r3, #26
 80034ae:	f003 021f 	and.w	r2, r3, #31
 80034b2:	e01e      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x282>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2101      	movs	r1, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fac2 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80034d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80034da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80034e2:	2320      	movs	r3, #32
 80034e4:	e004      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80034e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_ADC_ConfigChannel+0x29a>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	0e9b      	lsrs	r3, r3, #26
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	e018      	b.n	800353c <HAL_ADC_ConfigChannel+0x2cc>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800351e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003526:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e004      	b.n	800353c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800353c:	429a      	cmp	r2, r3
 800353e:	d106      	bne.n	800354e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2200      	movs	r2, #0
 8003546:	2101      	movs	r1, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fa91 	bl	8002a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2102      	movs	r1, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fa75 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 800355a:	4603      	mov	r3, r0
 800355c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_ADC_ConfigChannel+0x30a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2102      	movs	r1, #2
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fa6a 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003570:	4603      	mov	r3, r0
 8003572:	0e9b      	lsrs	r3, r3, #26
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	e01e      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x348>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2102      	movs	r1, #2
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fa5f 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003586:	4603      	mov	r3, r0
 8003588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800359c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e004      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80035ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x360>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0e9b      	lsrs	r3, r3, #26
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	e016      	b.n	80035fe <HAL_ADC_ConfigChannel+0x38e>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80035e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80035e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e004      	b.n	80035fe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80035f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035fe:	429a      	cmp	r2, r3
 8003600:	d106      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2200      	movs	r2, #0
 8003608:	2102      	movs	r1, #2
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fa30 	bl	8002a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2103      	movs	r1, #3
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fa14 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_ADC_ConfigChannel+0x3cc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2103      	movs	r1, #3
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fa09 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003632:	4603      	mov	r3, r0
 8003634:	0e9b      	lsrs	r3, r3, #26
 8003636:	f003 021f 	and.w	r2, r3, #31
 800363a:	e017      	b.n	800366c <HAL_ADC_ConfigChannel+0x3fc>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2103      	movs	r1, #3
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff f9fe 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364e:	fa93 f3a3 	rbit	r3, r3
 8003652:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003656:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800365e:	2320      	movs	r3, #32
 8003660:	e003      	b.n	800366a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x414>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0e9b      	lsrs	r3, r3, #26
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	e011      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x438>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003694:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800369c:	2320      	movs	r3, #32
 800369e:	e003      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d106      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2103      	movs	r1, #3
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f9db 	bl	8002a70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fb08 	bl	8002cd4 <LL_ADC_IsEnabled>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 8140 	bne.w	800394c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	461a      	mov	r2, r3
 80036da:	f7ff fa61 	bl	8002ba0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	4a8f      	ldr	r2, [pc, #572]	; (8003920 <HAL_ADC_ConfigChannel+0x6b0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	f040 8131 	bne.w	800394c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x4a2>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	0e9b      	lsrs	r3, r3, #26
 8003700:	3301      	adds	r3, #1
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	2b09      	cmp	r3, #9
 8003708:	bf94      	ite	ls
 800370a:	2301      	movls	r3, #1
 800370c:	2300      	movhi	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e019      	b.n	8003746 <HAL_ADC_ConfigChannel+0x4d6>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003722:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e003      	b.n	8003736 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800372e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2b09      	cmp	r3, #9
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003746:	2b00      	cmp	r3, #0
 8003748:	d079      	beq.n	800383e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x4f6>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	3301      	adds	r3, #1
 800375e:	069b      	lsls	r3, r3, #26
 8003760:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003764:	e015      	b.n	8003792 <HAL_ADC_ConfigChannel+0x522>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003776:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800377e:	2320      	movs	r3, #32
 8003780:	e003      	b.n	800378a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	3301      	adds	r3, #1
 800378c:	069b      	lsls	r3, r3, #26
 800378e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x542>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	0e9b      	lsrs	r3, r3, #26
 80037a4:	3301      	adds	r3, #1
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	e017      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x572>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80037ca:	2320      	movs	r3, #32
 80037cc:	e003      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80037ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	ea42 0103 	orr.w	r1, r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x598>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	0e9b      	lsrs	r3, r3, #26
 80037f8:	3301      	adds	r3, #1
 80037fa:	f003 021f 	and.w	r2, r3, #31
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	051b      	lsls	r3, r3, #20
 8003806:	e018      	b.n	800383a <HAL_ADC_ConfigChannel+0x5ca>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003818:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800381a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003820:	2320      	movs	r3, #32
 8003822:	e003      	b.n	800382c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f003 021f 	and.w	r2, r3, #31
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800383a:	430b      	orrs	r3, r1
 800383c:	e081      	b.n	8003942 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <HAL_ADC_ConfigChannel+0x5ea>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	0e9b      	lsrs	r3, r3, #26
 8003850:	3301      	adds	r3, #1
 8003852:	069b      	lsls	r3, r3, #26
 8003854:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003858:	e015      	b.n	8003886 <HAL_ADC_ConfigChannel+0x616>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003872:	2320      	movs	r3, #32
 8003874:	e003      	b.n	800387e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	3301      	adds	r3, #1
 8003880:	069b      	lsls	r3, r3, #26
 8003882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x636>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0e9b      	lsrs	r3, r3, #26
 8003898:	3301      	adds	r3, #1
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	2101      	movs	r1, #1
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	e017      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x666>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	61fb      	str	r3, [r7, #28]
  return result;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80038be:	2320      	movs	r3, #32
 80038c0:	e003      	b.n	80038ca <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	fab3 f383 	clz	r3, r3
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2101      	movs	r1, #1
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	ea42 0103 	orr.w	r1, r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x692>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	0e9b      	lsrs	r3, r3, #26
 80038ec:	3301      	adds	r3, #1
 80038ee:	f003 021f 	and.w	r2, r3, #31
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	3b1e      	subs	r3, #30
 80038fa:	051b      	lsls	r3, r3, #20
 80038fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003900:	e01e      	b.n	8003940 <HAL_ADC_ConfigChannel+0x6d0>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	613b      	str	r3, [r7, #16]
  return result;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800391a:	2320      	movs	r3, #32
 800391c:	e006      	b.n	800392c <HAL_ADC_ConfigChannel+0x6bc>
 800391e:	bf00      	nop
 8003920:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	3301      	adds	r3, #1
 800392e:	f003 021f 	and.w	r2, r3, #31
 8003932:	4613      	mov	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	3b1e      	subs	r3, #30
 800393a:	051b      	lsls	r3, r3, #20
 800393c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003940:	430b      	orrs	r3, r1
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	4619      	mov	r1, r3
 8003948:	f7ff f8ff 	bl	8002b4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <HAL_ADC_ConfigChannel+0x7d8>)
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d06c      	beq.n	8003a32 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003958:	483c      	ldr	r0, [pc, #240]	; (8003a4c <HAL_ADC_ConfigChannel+0x7dc>)
 800395a:	f7ff f841 	bl	80029e0 <LL_ADC_GetCommonPathInternalCh>
 800395e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a3a      	ldr	r2, [pc, #232]	; (8003a50 <HAL_ADC_ConfigChannel+0x7e0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d127      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800396c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d121      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a35      	ldr	r2, [pc, #212]	; (8003a54 <HAL_ADC_ConfigChannel+0x7e4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d157      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003986:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800398a:	4619      	mov	r1, r3
 800398c:	482f      	ldr	r0, [pc, #188]	; (8003a4c <HAL_ADC_ConfigChannel+0x7dc>)
 800398e:	f7ff f814 	bl	80029ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003992:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_ADC_ConfigChannel+0x7e8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	4a30      	ldr	r2, [pc, #192]	; (8003a5c <HAL_ADC_ConfigChannel+0x7ec>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	099b      	lsrs	r3, r3, #6
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039ac:	e002      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f9      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039ba:	e03a      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <HAL_ADC_ConfigChannel+0x7f0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d113      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x77e>
 80039c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <HAL_ADC_ConfigChannel+0x7e4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d12a      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e4:	4619      	mov	r1, r3
 80039e6:	4819      	ldr	r0, [pc, #100]	; (8003a4c <HAL_ADC_ConfigChannel+0x7dc>)
 80039e8:	f7fe ffe7 	bl	80029ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039ec:	e021      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <HAL_ADC_ConfigChannel+0x7f4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d11c      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d116      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <HAL_ADC_ConfigChannel+0x7e4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d111      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a16:	4619      	mov	r1, r3
 8003a18:	480c      	ldr	r0, [pc, #48]	; (8003a4c <HAL_ADC_ConfigChannel+0x7dc>)
 8003a1a:	f7fe ffce 	bl	80029ba <LL_ADC_SetCommonPathInternalCh>
 8003a1e:	e008      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003a3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	37d8      	adds	r7, #216	; 0xd8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	80080000 	.word	0x80080000
 8003a4c:	50040300 	.word	0x50040300
 8003a50:	c7520000 	.word	0xc7520000
 8003a54:	50040000 	.word	0x50040000
 8003a58:	20000004 	.word	0x20000004
 8003a5c:	053e2d63 	.word	0x053e2d63
 8003a60:	cb840000 	.word	0xcb840000
 8003a64:	80000001 	.word	0x80000001

08003a68 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff f976 	bl	8002d70 <LL_ADC_REG_IsConversionOngoing>
 8003a84:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f997 	bl	8002dbe <LL_ADC_INJ_IsConversionOngoing>
 8003a90:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8098 	beq.w	8003bd0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02a      	beq.n	8003b04 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7e5b      	ldrb	r3, [r3, #25]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d126      	bne.n	8003b04 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7e1b      	ldrb	r3, [r3, #24]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d122      	bne.n	8003b04 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ac2:	e014      	b.n	8003aee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4a45      	ldr	r2, [pc, #276]	; (8003bdc <ADC_ConversionStop+0x174>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d90d      	bls.n	8003ae8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f043 0210 	orr.w	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e074      	b.n	8003bd2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3301      	adds	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d1e3      	bne.n	8003ac4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2240      	movs	r2, #64	; 0x40
 8003b02:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d014      	beq.n	8003b34 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff f92e 	bl	8002d70 <LL_ADC_REG_IsConversionOngoing>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff f8eb 	bl	8002cfa <LL_ADC_IsDisableOngoing>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff f90a 	bl	8002d48 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d014      	beq.n	8003b64 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff f93d 	bl	8002dbe <LL_ADC_INJ_IsConversionOngoing>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff f8d3 	bl	8002cfa <LL_ADC_IsDisableOngoing>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff f919 	bl	8002d96 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d005      	beq.n	8003b76 <ADC_ConversionStop+0x10e>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d105      	bne.n	8003b7c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003b70:	230c      	movs	r3, #12
 8003b72:	617b      	str	r3, [r7, #20]
        break;
 8003b74:	e005      	b.n	8003b82 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003b76:	2308      	movs	r3, #8
 8003b78:	617b      	str	r3, [r7, #20]
        break;
 8003b7a:	e002      	b.n	8003b82 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	617b      	str	r3, [r7, #20]
        break;
 8003b80:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b82:	f7fe fefb 	bl	800297c <HAL_GetTick>
 8003b86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b88:	e01b      	b.n	8003bc2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b8a:	f7fe fef7 	bl	800297c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d914      	bls.n	8003bc2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00d      	beq.n	8003bc2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003baa:	f043 0210 	orr.w	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e007      	b.n	8003bd2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1dc      	bne.n	8003b8a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	a33fffff 	.word	0xa33fffff

08003be0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff f86f 	bl	8002cd4 <LL_ADC_IsEnabled>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d169      	bne.n	8003cd0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	4b36      	ldr	r3, [pc, #216]	; (8003cdc <ADC_Enable+0xfc>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00d      	beq.n	8003c26 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	f043 0210 	orr.w	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1a:	f043 0201 	orr.w	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e055      	b.n	8003cd2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff f82a 	bl	8002c84 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c30:	482b      	ldr	r0, [pc, #172]	; (8003ce0 <ADC_Enable+0x100>)
 8003c32:	f7fe fed5 	bl	80029e0 <LL_ADC_GetCommonPathInternalCh>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <ADC_Enable+0x104>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <ADC_Enable+0x108>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	099b      	lsrs	r3, r3, #6
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	4613      	mov	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003c5a:	e002      	b.n	8003c62 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f9      	bne.n	8003c5c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c68:	f7fe fe88 	bl	800297c <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c6e:	e028      	b.n	8003cc2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff f82d 	bl	8002cd4 <LL_ADC_IsEnabled>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fffd 	bl	8002c84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c8a:	f7fe fe77 	bl	800297c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d914      	bls.n	8003cc2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d00d      	beq.n	8003cc2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	f043 0210 	orr.w	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e007      	b.n	8003cd2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d1cf      	bne.n	8003c70 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	8000003f 	.word	0x8000003f
 8003ce0:	50040300 	.word	0x50040300
 8003ce4:	20000004 	.word	0x20000004
 8003ce8:	053e2d63 	.word	0x053e2d63

08003cec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fffe 	bl	8002cfa <LL_ADC_IsDisableOngoing>
 8003cfe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe ffe5 	bl	8002cd4 <LL_ADC_IsEnabled>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d047      	beq.n	8003da0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d144      	bne.n	8003da0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030d 	and.w	r3, r3, #13
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10c      	bne.n	8003d3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe ffbf 	bl	8002cac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2203      	movs	r2, #3
 8003d34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d36:	f7fe fe21 	bl	800297c <HAL_GetTick>
 8003d3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d3c:	e029      	b.n	8003d92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f043 0210 	orr.w	r2, r3, #16
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	f043 0201 	orr.w	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e023      	b.n	8003da2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d5a:	f7fe fe0f 	bl	800297c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d914      	bls.n	8003d92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	f043 0210 	orr.w	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e007      	b.n	8003da2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1dc      	bne.n	8003d5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d14b      	bne.n	8003e5c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d021      	beq.n	8003e22 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fe72 	bl	8002acc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d032      	beq.n	8003e54 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d12b      	bne.n	8003e54 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11f      	bne.n	8003e54 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f043 0201 	orr.w	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e20:	e018      	b.n	8003e54 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d111      	bne.n	8003e54 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7fd fd73 	bl	8001940 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e5a:	e00e      	b.n	8003e7a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff f9f6 	bl	800325a <HAL_ADC_ErrorCallback>
}
 8003e6e:	e004      	b.n	8003e7a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff f9d8 	bl	8003246 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff f9c8 	bl	800325a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f06:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <__NVIC_SetPriorityGrouping+0x44>)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	60d3      	str	r3, [r2, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000ed00 	.word	0xe000ed00

08003f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <__NVIC_GetPriorityGrouping+0x18>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	0a1b      	lsrs	r3, r3, #8
 8003f26:	f003 0307 	and.w	r3, r3, #7
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	db0b      	blt.n	8003f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	f003 021f 	and.w	r2, r3, #31
 8003f50:	4907      	ldr	r1, [pc, #28]	; (8003f70 <__NVIC_EnableIRQ+0x38>)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	2001      	movs	r0, #1
 8003f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000e100 	.word	0xe000e100

08003f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	db0a      	blt.n	8003f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	490c      	ldr	r1, [pc, #48]	; (8003fc0 <__NVIC_SetPriority+0x4c>)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	0112      	lsls	r2, r2, #4
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	440b      	add	r3, r1
 8003f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f9c:	e00a      	b.n	8003fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4908      	ldr	r1, [pc, #32]	; (8003fc4 <__NVIC_SetPriority+0x50>)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	3b04      	subs	r3, #4
 8003fac:	0112      	lsls	r2, r2, #4
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	761a      	strb	r2, [r3, #24]
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	e000e100 	.word	0xe000e100
 8003fc4:	e000ed00 	.word	0xe000ed00

08003fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f1c3 0307 	rsb	r3, r3, #7
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	bf28      	it	cs
 8003fe6:	2304      	movcs	r3, #4
 8003fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	3304      	adds	r3, #4
 8003fee:	2b06      	cmp	r3, #6
 8003ff0:	d902      	bls.n	8003ff8 <NVIC_EncodePriority+0x30>
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3b03      	subs	r3, #3
 8003ff6:	e000      	b.n	8003ffa <NVIC_EncodePriority+0x32>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43da      	mvns	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	401a      	ands	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004010:	f04f 31ff 	mov.w	r1, #4294967295
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	fa01 f303 	lsl.w	r3, r1, r3
 800401a:	43d9      	mvns	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004020:	4313      	orrs	r3, r2
         );
}
 8004022:	4618      	mov	r0, r3
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3b01      	subs	r3, #1
 800403c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004040:	d301      	bcc.n	8004046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004042:	2301      	movs	r3, #1
 8004044:	e00f      	b.n	8004066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <SysTick_Config+0x40>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3b01      	subs	r3, #1
 800404c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800404e:	210f      	movs	r1, #15
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	f7ff ff8e 	bl	8003f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <SysTick_Config+0x40>)
 800405a:	2200      	movs	r2, #0
 800405c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800405e:	4b04      	ldr	r3, [pc, #16]	; (8004070 <SysTick_Config+0x40>)
 8004060:	2207      	movs	r2, #7
 8004062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	e000e010 	.word	0xe000e010

08004074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff ff29 	bl	8003ed4 <__NVIC_SetPriorityGrouping>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b086      	sub	sp, #24
 800408e:	af00      	add	r7, sp, #0
 8004090:	4603      	mov	r3, r0
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800409c:	f7ff ff3e 	bl	8003f1c <__NVIC_GetPriorityGrouping>
 80040a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	6978      	ldr	r0, [r7, #20]
 80040a8:	f7ff ff8e 	bl	8003fc8 <NVIC_EncodePriority>
 80040ac:	4602      	mov	r2, r0
 80040ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ff5d 	bl	8003f74 <__NVIC_SetPriority>
}
 80040ba:	bf00      	nop
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	4603      	mov	r3, r0
 80040ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ff31 	bl	8003f38 <__NVIC_EnableIRQ>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ffa2 	bl	8004030 <SysTick_Config>
 80040ec:	4603      	mov	r3, r0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e098      	b.n	800423c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	4b4d      	ldr	r3, [pc, #308]	; (8004248 <HAL_DMA_Init+0x150>)
 8004112:	429a      	cmp	r2, r3
 8004114:	d80f      	bhi.n	8004136 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	4b4b      	ldr	r3, [pc, #300]	; (800424c <HAL_DMA_Init+0x154>)
 800411e:	4413      	add	r3, r2
 8004120:	4a4b      	ldr	r2, [pc, #300]	; (8004250 <HAL_DMA_Init+0x158>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	009a      	lsls	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a48      	ldr	r2, [pc, #288]	; (8004254 <HAL_DMA_Init+0x15c>)
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
 8004134:	e00e      	b.n	8004154 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	4b46      	ldr	r3, [pc, #280]	; (8004258 <HAL_DMA_Init+0x160>)
 800413e:	4413      	add	r3, r2
 8004140:	4a43      	ldr	r2, [pc, #268]	; (8004250 <HAL_DMA_Init+0x158>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	009a      	lsls	r2, r3, #2
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a42      	ldr	r2, [pc, #264]	; (800425c <HAL_DMA_Init+0x164>)
 8004152:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004178:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004184:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004190:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ae:	d039      	beq.n	8004224 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	4a27      	ldr	r2, [pc, #156]	; (8004254 <HAL_DMA_Init+0x15c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d11a      	bne.n	80041f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041ba:	4b29      	ldr	r3, [pc, #164]	; (8004260 <HAL_DMA_Init+0x168>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f003 031c 	and.w	r3, r3, #28
 80041c6:	210f      	movs	r1, #15
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	4924      	ldr	r1, [pc, #144]	; (8004260 <HAL_DMA_Init+0x168>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041d4:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_DMA_Init+0x168>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	f003 031c 	and.w	r3, r3, #28
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	491d      	ldr	r1, [pc, #116]	; (8004260 <HAL_DMA_Init+0x168>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
 80041ee:	e019      	b.n	8004224 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <HAL_DMA_Init+0x16c>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	f003 031c 	and.w	r3, r3, #28
 80041fc:	210f      	movs	r1, #15
 80041fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	4917      	ldr	r1, [pc, #92]	; (8004264 <HAL_DMA_Init+0x16c>)
 8004206:	4013      	ands	r3, r2
 8004208:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800420a:	4b16      	ldr	r3, [pc, #88]	; (8004264 <HAL_DMA_Init+0x16c>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6859      	ldr	r1, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f003 031c 	and.w	r3, r3, #28
 800421a:	fa01 f303 	lsl.w	r3, r1, r3
 800421e:	4911      	ldr	r1, [pc, #68]	; (8004264 <HAL_DMA_Init+0x16c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40020407 	.word	0x40020407
 800424c:	bffdfff8 	.word	0xbffdfff8
 8004250:	cccccccd 	.word	0xcccccccd
 8004254:	40020000 	.word	0x40020000
 8004258:	bffdfbf8 	.word	0xbffdfbf8
 800425c:	40020400 	.word	0x40020400
 8004260:	400200a8 	.word	0x400200a8
 8004264:	400204a8 	.word	0x400204a8

08004268 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_DMA_Start_IT+0x20>
 8004284:	2302      	movs	r3, #2
 8004286:	e04b      	b.n	8004320 <HAL_DMA_Start_IT+0xb8>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d13a      	bne.n	8004312 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f95f 	bl	8004584 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 020e 	orr.w	r2, r2, #14
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e00f      	b.n	8004300 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0204 	bic.w	r2, r2, #4
 80042ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 020a 	orr.w	r2, r2, #10
 80042fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e005      	b.n	800431e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800431a:	2302      	movs	r3, #2
 800431c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d008      	beq.n	8004352 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2204      	movs	r2, #4
 8004344:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e022      	b.n	8004398 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 020e 	bic.w	r2, r2, #14
 8004360:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f003 021c 	and.w	r2, r3, #28
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2101      	movs	r1, #1
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d005      	beq.n	80043c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2204      	movs	r2, #4
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	e029      	b.n	800441c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 020e 	bic.w	r2, r2, #14
 80043d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0201 	bic.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	f003 021c 	and.w	r2, r3, #28
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f202 	lsl.w	r2, r1, r2
 80043fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
    }
  }
  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f003 031c 	and.w	r3, r3, #28
 8004446:	2204      	movs	r2, #4
 8004448:	409a      	lsls	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d026      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x7a>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d021      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0204 	bic.w	r2, r2, #4
 8004478:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	f003 021c 	and.w	r2, r3, #28
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2104      	movs	r1, #4
 8004488:	fa01 f202 	lsl.w	r2, r1, r2
 800448c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	2b00      	cmp	r3, #0
 8004494:	d071      	beq.n	800457a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800449e:	e06c      	b.n	800457a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	f003 031c 	and.w	r3, r3, #28
 80044a8:	2202      	movs	r2, #2
 80044aa:	409a      	lsls	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d02e      	beq.n	8004512 <HAL_DMA_IRQHandler+0xec>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d029      	beq.n	8004512 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10b      	bne.n	80044e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 020a 	bic.w	r2, r2, #10
 80044da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	f003 021c 	and.w	r2, r3, #28
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2102      	movs	r1, #2
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d038      	beq.n	800457a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004510:	e033      	b.n	800457a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f003 031c 	and.w	r3, r3, #28
 800451a:	2208      	movs	r2, #8
 800451c:	409a      	lsls	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d02a      	beq.n	800457c <HAL_DMA_IRQHandler+0x156>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d025      	beq.n	800457c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020e 	bic.w	r2, r2, #14
 800453e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	f003 021c 	and.w	r2, r3, #28
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	2101      	movs	r1, #1
 800454e:	fa01 f202 	lsl.w	r2, r1, r2
 8004552:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800457a:	bf00      	nop
 800457c:	bf00      	nop
}
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f003 021c 	and.w	r2, r3, #28
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2101      	movs	r1, #1
 80045a0:	fa01 f202 	lsl.w	r2, r1, r2
 80045a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b10      	cmp	r3, #16
 80045b4:	d108      	bne.n	80045c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045c6:	e007      	b.n	80045d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045f2:	e154      	b.n	800489e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2101      	movs	r1, #1
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	4013      	ands	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8146 	beq.w	8004898 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d005      	beq.n	8004624 <HAL_GPIO_Init+0x40>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d130      	bne.n	8004686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	2203      	movs	r2, #3
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800465a:	2201      	movs	r2, #1
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0201 	and.w	r2, r3, #1
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b03      	cmp	r3, #3
 8004690:	d017      	beq.n	80046c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	2203      	movs	r2, #3
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4013      	ands	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d123      	bne.n	8004716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	08da      	lsrs	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	220f      	movs	r2, #15
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	08da      	lsrs	r2, r3, #3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3208      	adds	r2, #8
 8004710:	6939      	ldr	r1, [r7, #16]
 8004712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	2203      	movs	r2, #3
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 0203 	and.w	r2, r3, #3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a0 	beq.w	8004898 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004758:	4b58      	ldr	r3, [pc, #352]	; (80048bc <HAL_GPIO_Init+0x2d8>)
 800475a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475c:	4a57      	ldr	r2, [pc, #348]	; (80048bc <HAL_GPIO_Init+0x2d8>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6613      	str	r3, [r2, #96]	; 0x60
 8004764:	4b55      	ldr	r3, [pc, #340]	; (80048bc <HAL_GPIO_Init+0x2d8>)
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004770:	4a53      	ldr	r2, [pc, #332]	; (80048c0 <HAL_GPIO_Init+0x2dc>)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	089b      	lsrs	r3, r3, #2
 8004776:	3302      	adds	r3, #2
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	220f      	movs	r2, #15
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800479a:	d019      	beq.n	80047d0 <HAL_GPIO_Init+0x1ec>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a49      	ldr	r2, [pc, #292]	; (80048c4 <HAL_GPIO_Init+0x2e0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_GPIO_Init+0x1e8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a48      	ldr	r2, [pc, #288]	; (80048c8 <HAL_GPIO_Init+0x2e4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00d      	beq.n	80047c8 <HAL_GPIO_Init+0x1e4>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a47      	ldr	r2, [pc, #284]	; (80048cc <HAL_GPIO_Init+0x2e8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d007      	beq.n	80047c4 <HAL_GPIO_Init+0x1e0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a46      	ldr	r2, [pc, #280]	; (80048d0 <HAL_GPIO_Init+0x2ec>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_GPIO_Init+0x1dc>
 80047bc:	2304      	movs	r3, #4
 80047be:	e008      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047c0:	2307      	movs	r3, #7
 80047c2:	e006      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047c4:	2303      	movs	r3, #3
 80047c6:	e004      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e002      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_GPIO_Init+0x1ee>
 80047d0:	2300      	movs	r3, #0
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	f002 0203 	and.w	r2, r2, #3
 80047d8:	0092      	lsls	r2, r2, #2
 80047da:	4093      	lsls	r3, r2
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047e2:	4937      	ldr	r1, [pc, #220]	; (80048c0 <HAL_GPIO_Init+0x2dc>)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	3302      	adds	r3, #2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047f0:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004814:	4a2f      	ldr	r2, [pc, #188]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800481a:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	43db      	mvns	r3, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800483e:	4a25      	ldr	r2, [pc, #148]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004844:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	43db      	mvns	r3, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4013      	ands	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004868:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800486e:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	43db      	mvns	r3, r3
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004892:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3301      	adds	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f47f aea3 	bne.w	80045f4 <HAL_GPIO_Init+0x10>
  }
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40010000 	.word	0x40010000
 80048c4:	48000400 	.word	0x48000400
 80048c8:	48000800 	.word	0x48000800
 80048cc:	48000c00 	.word	0x48000c00
 80048d0:	48001000 	.word	0x48001000
 80048d4:	40010400 	.word	0x40010400

080048d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	887b      	ldrh	r3, [r7, #2]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e001      	b.n	80048fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800491e:	4a05      	ldr	r2, [pc, #20]	; (8004934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd f81a 	bl	8001960 <HAL_GPIO_EXTI_Callback>
  }
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40010400 	.word	0x40010400

08004938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e081      	b.n	8004a4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc fccc 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2224      	movs	r2, #36	; 0x24
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004988:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004998:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d107      	bne.n	80049b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	e006      	b.n	80049c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d104      	bne.n	80049d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69d9      	ldr	r1, [r3, #28]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	f040 80f9 	bne.w	8004c72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x34>
 8004a86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0ed      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2C_Mem_Write+0x4e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e0e6      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aae:	f7fd ff65 	bl	800297c <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2319      	movs	r3, #25
 8004aba:	2201      	movs	r2, #1
 8004abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fac3 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0d1      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2221      	movs	r2, #33	; 0x21
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004af8:	88f8      	ldrh	r0, [r7, #6]
 8004afa:	893a      	ldrh	r2, [r7, #8]
 8004afc:	8979      	ldrh	r1, [r7, #10]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4603      	mov	r3, r0
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f9d3 	bl	8004eb4 <I2C_RequestMemoryWrite>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0a9      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2bff      	cmp	r3, #255	; 0xff
 8004b28:	d90e      	bls.n	8004b48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	22ff      	movs	r2, #255	; 0xff
 8004b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	8979      	ldrh	r1, [r7, #10]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fc2b 	bl	800539c <I2C_TransferConfig>
 8004b46:	e00f      	b.n	8004b68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	8979      	ldrh	r1, [r7, #10]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fc1a 	bl	800539c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 faad 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e07b      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d034      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x1c8>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d130      	bne.n	8004c20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2180      	movs	r1, #128	; 0x80
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa3f 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e04d      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2bff      	cmp	r3, #255	; 0xff
 8004be0:	d90e      	bls.n	8004c00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	8979      	ldrh	r1, [r7, #10]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fbcf 	bl	800539c <I2C_TransferConfig>
 8004bfe:	e00f      	b.n	8004c20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	8979      	ldrh	r1, [r7, #10]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fbbe 	bl	800539c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d19e      	bne.n	8004b68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fa8c 	bl	800514c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e01a      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2220      	movs	r2, #32
 8004c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6859      	ldr	r1, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_I2C_Mem_Write+0x224>)
 8004c52:	400b      	ands	r3, r1
 8004c54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c72:	2302      	movs	r3, #2
  }
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	fe00e800 	.word	0xfe00e800

08004c80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	817b      	strh	r3, [r7, #10]
 8004c92:	460b      	mov	r3, r1
 8004c94:	813b      	strh	r3, [r7, #8]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	f040 80fd 	bne.w	8004ea2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_I2C_Mem_Read+0x34>
 8004cae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0f1      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_I2C_Mem_Read+0x4e>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e0ea      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cd6:	f7fd fe51 	bl	800297c <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2319      	movs	r3, #25
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f9af 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0d5      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2222      	movs	r2, #34	; 0x22
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2240      	movs	r2, #64	; 0x40
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d20:	88f8      	ldrh	r0, [r7, #6]
 8004d22:	893a      	ldrh	r2, [r7, #8]
 8004d24:	8979      	ldrh	r1, [r7, #10]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4603      	mov	r3, r0
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f913 	bl	8004f5c <I2C_RequestMemoryRead>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0ad      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2bff      	cmp	r3, #255	; 0xff
 8004d50:	d90e      	bls.n	8004d70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	22ff      	movs	r2, #255	; 0xff
 8004d56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	8979      	ldrh	r1, [r7, #10]
 8004d60:	4b52      	ldr	r3, [pc, #328]	; (8004eac <HAL_I2C_Mem_Read+0x22c>)
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fb17 	bl	800539c <I2C_TransferConfig>
 8004d6e:	e00f      	b.n	8004d90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	8979      	ldrh	r1, [r7, #10]
 8004d82:	4b4a      	ldr	r3, [pc, #296]	; (8004eac <HAL_I2C_Mem_Read+0x22c>)
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fb06 	bl	800539c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2200      	movs	r2, #0
 8004d98:	2104      	movs	r1, #4
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f956 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07c      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d034      	beq.n	8004e50 <HAL_I2C_Mem_Read+0x1d0>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d130      	bne.n	8004e50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f927 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e04d      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2bff      	cmp	r3, #255	; 0xff
 8004e10:	d90e      	bls.n	8004e30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	8979      	ldrh	r1, [r7, #10]
 8004e20:	2300      	movs	r3, #0
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fab7 	bl	800539c <I2C_TransferConfig>
 8004e2e:	e00f      	b.n	8004e50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	8979      	ldrh	r1, [r7, #10]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 faa6 	bl	800539c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d19a      	bne.n	8004d90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f974 	bl	800514c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e01a      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2220      	movs	r2, #32
 8004e74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6859      	ldr	r1, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_I2C_Mem_Read+0x230>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	80002400 	.word	0x80002400
 8004eb0:	fe00e800 	.word	0xfe00e800

08004eb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	817b      	strh	r3, [r7, #10]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	813b      	strh	r3, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	8979      	ldrh	r1, [r7, #10]
 8004ed4:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <I2C_RequestMemoryWrite+0xa4>)
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fa5d 	bl	800539c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	69b9      	ldr	r1, [r7, #24]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8f0 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e02c      	b.n	8004f50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	629a      	str	r2, [r3, #40]	; 0x28
 8004f06:	e015      	b.n	8004f34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f08:	893b      	ldrh	r3, [r7, #8]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	69b9      	ldr	r1, [r7, #24]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f8d6 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e012      	b.n	8004f50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f884 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	80002000 	.word	0x80002000

08004f5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	817b      	strh	r3, [r7, #10]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	813b      	strh	r3, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	8979      	ldrh	r1, [r7, #10]
 8004f7c:	4b20      	ldr	r3, [pc, #128]	; (8005000 <I2C_RequestMemoryRead+0xa4>)
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2300      	movs	r3, #0
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fa0a 	bl	800539c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	69b9      	ldr	r1, [r7, #24]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f89d 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e02c      	b.n	8004ff6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa2:	893b      	ldrh	r3, [r7, #8]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28
 8004fac:	e015      	b.n	8004fda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fae:	893b      	ldrh	r3, [r7, #8]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	69b9      	ldr	r1, [r7, #24]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f883 	bl	80050cc <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e012      	b.n	8004ff6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd0:	893b      	ldrh	r3, [r7, #8]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2140      	movs	r1, #64	; 0x40
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f831 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	80002000 	.word	0x80002000

08005004 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d103      	bne.n	8005022 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d007      	beq.n	8005040 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	619a      	str	r2, [r3, #24]
  }
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800505c:	e022      	b.n	80050a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d01e      	beq.n	80050a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005066:	f7fd fc89 	bl	800297c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d113      	bne.n	80050a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e00f      	b.n	80050c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d0cd      	beq.n	800505e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050d8:	e02c      	b.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f870 	bl	80051c4 <I2C_IsErrorOccurred>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e02a      	b.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d01e      	beq.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fd fc41 	bl	800297c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d113      	bne.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e007      	b.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d1cb      	bne.n	80050da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005158:	e028      	b.n	80051ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f830 	bl	80051c4 <I2C_IsErrorOccurred>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e026      	b.n	80051bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fd fc05 	bl	800297c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d113      	bne.n	80051ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e007      	b.n	80051bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d1cf      	bne.n	800515a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d075      	beq.n	80052dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2210      	movs	r2, #16
 80051f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051f8:	e056      	b.n	80052a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d052      	beq.n	80052a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005202:	f7fd fbbb 	bl	800297c <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	d302      	bcc.n	8005218 <I2C_IsErrorOccurred+0x54>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d147      	bne.n	80052a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005222:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800522a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523a:	d12e      	bne.n	800529a <I2C_IsErrorOccurred+0xd6>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005242:	d02a      	beq.n	800529a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005244:	7cfb      	ldrb	r3, [r7, #19]
 8005246:	2b20      	cmp	r3, #32
 8005248:	d027      	beq.n	800529a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005258:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800525a:	f7fd fb8f 	bl	800297c <HAL_GetTick>
 800525e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005260:	e01b      	b.n	800529a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005262:	f7fd fb8b 	bl	800297c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b19      	cmp	r3, #25
 800526e:	d914      	bls.n	800529a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d1dc      	bne.n	8005262 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d003      	beq.n	80052be <I2C_IsErrorOccurred+0xfa>
 80052b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d09d      	beq.n	80051fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2220      	movs	r2, #32
 80052cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f043 0304 	orr.w	r3, r3, #4
 80052d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	f043 0308 	orr.w	r3, r3, #8
 8005316:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005320:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	f043 0302 	orr.w	r3, r3, #2
 8005338:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005342:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800534a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01c      	beq.n	800538c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff fe56 	bl	8005004 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <I2C_IsErrorOccurred+0x1d4>)
 8005364:	400b      	ands	r3, r1
 8005366:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	431a      	orrs	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800538c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005390:	4618      	mov	r0, r3
 8005392:	3728      	adds	r7, #40	; 0x28
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	fe00e800 	.word	0xfe00e800

0800539c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	607b      	str	r3, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	4613      	mov	r3, r2
 80053ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053b4:	7a7b      	ldrb	r3, [r7, #9]
 80053b6:	041b      	lsls	r3, r3, #16
 80053b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	0d5b      	lsrs	r3, r3, #21
 80053d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053da:	4b08      	ldr	r3, [pc, #32]	; (80053fc <I2C_TransferConfig+0x60>)
 80053dc:	430b      	orrs	r3, r1
 80053de:	43db      	mvns	r3, r3
 80053e0:	ea02 0103 	and.w	r1, r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	03ff63ff 	.word	0x03ff63ff

08005400 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b20      	cmp	r3, #32
 8005414:	d138      	bne.n	8005488 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005420:	2302      	movs	r3, #2
 8005422:	e032      	b.n	800548a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2224      	movs	r2, #36	; 0x24
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0201 	bic.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005452:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6819      	ldr	r1, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d139      	bne.n	8005520 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e033      	b.n	8005522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2224      	movs	r2, #36	; 0x24
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <HAL_PWREx_GetVoltageRange+0x18>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40007000 	.word	0x40007000

0800554c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555a:	d130      	bne.n	80055be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800555c:	4b23      	ldr	r3, [pc, #140]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005568:	d038      	beq.n	80055dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800556a:	4b20      	ldr	r3, [pc, #128]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005572:	4a1e      	ldr	r2, [pc, #120]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005578:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800557a:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2232      	movs	r2, #50	; 0x32
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	4a1b      	ldr	r2, [pc, #108]	; (80055f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	0c9b      	lsrs	r3, r3, #18
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005590:	e002      	b.n	8005598 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3b01      	subs	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005598:	4b14      	ldr	r3, [pc, #80]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a4:	d102      	bne.n	80055ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f2      	bne.n	8005592 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b8:	d110      	bne.n	80055dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e00f      	b.n	80055de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80055be:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ca:	d007      	beq.n	80055dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055d4:	4a05      	ldr	r2, [pc, #20]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40007000 	.word	0x40007000
 80055f0:	20000004 	.word	0x20000004
 80055f4:	431bde83 	.word	0x431bde83

080055f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f000 bc02 	b.w	8005e10 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800560c:	4b96      	ldr	r3, [pc, #600]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 030c 	and.w	r3, r3, #12
 8005614:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005616:	4b94      	ldr	r3, [pc, #592]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80e4 	beq.w	80057f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <HAL_RCC_OscConfig+0x4c>
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	2b0c      	cmp	r3, #12
 8005638:	f040 808b 	bne.w	8005752 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b01      	cmp	r3, #1
 8005640:	f040 8087 	bne.w	8005752 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005644:	4b88      	ldr	r3, [pc, #544]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_RCC_OscConfig+0x64>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e3d9      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1a      	ldr	r2, [r3, #32]
 8005660:	4b81      	ldr	r3, [pc, #516]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <HAL_RCC_OscConfig+0x7e>
 800566c:	4b7e      	ldr	r3, [pc, #504]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005674:	e005      	b.n	8005682 <HAL_RCC_OscConfig+0x8a>
 8005676:	4b7c      	ldr	r3, [pc, #496]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005682:	4293      	cmp	r3, r2
 8005684:	d223      	bcs.n	80056ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fd8c 	bl	80061a8 <RCC_SetFlashLatencyFromMSIRange>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e3ba      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800569a:	4b73      	ldr	r3, [pc, #460]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a72      	ldr	r2, [pc, #456]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056a0:	f043 0308 	orr.w	r3, r3, #8
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	4b70      	ldr	r3, [pc, #448]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	496d      	ldr	r1, [pc, #436]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056b8:	4b6b      	ldr	r3, [pc, #428]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	4968      	ldr	r1, [pc, #416]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	604b      	str	r3, [r1, #4]
 80056cc:	e025      	b.n	800571a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056ce:	4b66      	ldr	r3, [pc, #408]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a65      	ldr	r2, [pc, #404]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056d4:	f043 0308 	orr.w	r3, r3, #8
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	4b63      	ldr	r3, [pc, #396]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	4960      	ldr	r1, [pc, #384]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056ec:	4b5e      	ldr	r3, [pc, #376]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	495b      	ldr	r1, [pc, #364]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fd4c 	bl	80061a8 <RCC_SetFlashLatencyFromMSIRange>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e37a      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800571a:	f000 fc81 	bl	8006020 <HAL_RCC_GetSysClockFreq>
 800571e:	4602      	mov	r2, r0
 8005720:	4b51      	ldr	r3, [pc, #324]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	4950      	ldr	r1, [pc, #320]	; (800586c <HAL_RCC_OscConfig+0x274>)
 800572c:	5ccb      	ldrb	r3, [r1, r3]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	fa22 f303 	lsr.w	r3, r2, r3
 8005736:	4a4e      	ldr	r2, [pc, #312]	; (8005870 <HAL_RCC_OscConfig+0x278>)
 8005738:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800573a:	4b4e      	ldr	r3, [pc, #312]	; (8005874 <HAL_RCC_OscConfig+0x27c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f7fd f8cc 	bl	80028dc <HAL_InitTick>
 8005744:	4603      	mov	r3, r0
 8005746:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d052      	beq.n	80057f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	e35e      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d032      	beq.n	80057c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800575a:	4b43      	ldr	r3, [pc, #268]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a42      	ldr	r2, [pc, #264]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005766:	f7fd f909 	bl	800297c <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800576e:	f7fd f905 	bl	800297c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e347      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005780:	4b39      	ldr	r3, [pc, #228]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a35      	ldr	r2, [pc, #212]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005792:	f043 0308 	orr.w	r3, r3, #8
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	4b33      	ldr	r3, [pc, #204]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	4930      	ldr	r1, [pc, #192]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057aa:	4b2f      	ldr	r3, [pc, #188]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	492b      	ldr	r1, [pc, #172]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	604b      	str	r3, [r1, #4]
 80057be:	e01a      	b.n	80057f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057c0:	4b29      	ldr	r3, [pc, #164]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a28      	ldr	r2, [pc, #160]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057cc:	f7fd f8d6 	bl	800297c <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057d4:	f7fd f8d2 	bl	800297c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e314      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057e6:	4b20      	ldr	r3, [pc, #128]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x1dc>
 80057f2:	e000      	b.n	80057f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d073      	beq.n	80058ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d005      	beq.n	8005814 <HAL_RCC_OscConfig+0x21c>
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b0c      	cmp	r3, #12
 800580c:	d10e      	bne.n	800582c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d10b      	bne.n	800582c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005814:	4b14      	ldr	r3, [pc, #80]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d063      	beq.n	80058e8 <HAL_RCC_OscConfig+0x2f0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d15f      	bne.n	80058e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e2f1      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005834:	d106      	bne.n	8005844 <HAL_RCC_OscConfig+0x24c>
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a0b      	ldr	r2, [pc, #44]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 800583c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e025      	b.n	8005890 <HAL_RCC_OscConfig+0x298>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800584c:	d114      	bne.n	8005878 <HAL_RCC_OscConfig+0x280>
 800584e:	4b06      	ldr	r3, [pc, #24]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a05      	ldr	r2, [pc, #20]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	4b03      	ldr	r3, [pc, #12]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a02      	ldr	r2, [pc, #8]	; (8005868 <HAL_RCC_OscConfig+0x270>)
 8005860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	e013      	b.n	8005890 <HAL_RCC_OscConfig+0x298>
 8005868:	40021000 	.word	0x40021000
 800586c:	0800c1a4 	.word	0x0800c1a4
 8005870:	20000004 	.word	0x20000004
 8005874:	20000008 	.word	0x20000008
 8005878:	4ba0      	ldr	r3, [pc, #640]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a9f      	ldr	r2, [pc, #636]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 800587e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	4b9d      	ldr	r3, [pc, #628]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a9c      	ldr	r2, [pc, #624]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 800588a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800588e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d013      	beq.n	80058c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd f870 	bl	800297c <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fd f86c 	bl	800297c <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	; 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e2ae      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058b2:	4b92      	ldr	r3, [pc, #584]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCC_OscConfig+0x2a8>
 80058be:	e014      	b.n	80058ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fd f85c 	bl	800297c <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c8:	f7fd f858 	bl	800297c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	; 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e29a      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058da:	4b88      	ldr	r3, [pc, #544]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x2d0>
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d060      	beq.n	80059b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_OscConfig+0x310>
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d119      	bne.n	8005936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d116      	bne.n	8005936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005908:	4b7c      	ldr	r3, [pc, #496]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_RCC_OscConfig+0x328>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e277      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005920:	4b76      	ldr	r3, [pc, #472]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	061b      	lsls	r3, r3, #24
 800592e:	4973      	ldr	r1, [pc, #460]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005930:	4313      	orrs	r3, r2
 8005932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005934:	e040      	b.n	80059b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d023      	beq.n	8005986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800593e:	4b6f      	ldr	r3, [pc, #444]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a6e      	ldr	r2, [pc, #440]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7fd f817 	bl	800297c <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005952:	f7fd f813 	bl	800297c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e255      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005964:	4b65      	ldr	r3, [pc, #404]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005970:	4b62      	ldr	r3, [pc, #392]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	061b      	lsls	r3, r3, #24
 800597e:	495f      	ldr	r1, [pc, #380]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005980:	4313      	orrs	r3, r2
 8005982:	604b      	str	r3, [r1, #4]
 8005984:	e018      	b.n	80059b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005986:	4b5d      	ldr	r3, [pc, #372]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a5c      	ldr	r2, [pc, #368]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 800598c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005992:	f7fc fff3 	bl	800297c <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800599a:	f7fc ffef 	bl	800297c <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e231      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059ac:	4b53      	ldr	r3, [pc, #332]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f0      	bne.n	800599a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d03c      	beq.n	8005a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01c      	beq.n	8005a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059cc:	4b4b      	ldr	r3, [pc, #300]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 80059ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d2:	4a4a      	ldr	r2, [pc, #296]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059dc:	f7fc ffce 	bl	800297c <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e4:	f7fc ffca 	bl	800297c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e20c      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059f6:	4b41      	ldr	r3, [pc, #260]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 80059f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0ef      	beq.n	80059e4 <HAL_RCC_OscConfig+0x3ec>
 8005a04:	e01b      	b.n	8005a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a06:	4b3d      	ldr	r3, [pc, #244]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a0c:	4a3b      	ldr	r2, [pc, #236]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a16:	f7fc ffb1 	bl	800297c <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a1e:	f7fc ffad 	bl	800297c <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e1ef      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a30:	4b32      	ldr	r3, [pc, #200]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1ef      	bne.n	8005a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80a6 	beq.w	8005b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a50:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10d      	bne.n	8005a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a5c:	4b27      	ldr	r3, [pc, #156]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	4a26      	ldr	r2, [pc, #152]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a66:	6593      	str	r3, [r2, #88]	; 0x58
 8005a68:	4b24      	ldr	r3, [pc, #144]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a70:	60bb      	str	r3, [r7, #8]
 8005a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a74:	2301      	movs	r3, #1
 8005a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a78:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <HAL_RCC_OscConfig+0x508>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d118      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a84:	4b1e      	ldr	r3, [pc, #120]	; (8005b00 <HAL_RCC_OscConfig+0x508>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1d      	ldr	r2, [pc, #116]	; (8005b00 <HAL_RCC_OscConfig+0x508>)
 8005a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a90:	f7fc ff74 	bl	800297c <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a98:	f7fc ff70 	bl	800297c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e1b2      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aaa:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <HAL_RCC_OscConfig+0x508>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0f0      	beq.n	8005a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d108      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x4d8>
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ace:	e029      	b.n	8005b24 <HAL_RCC_OscConfig+0x52c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b05      	cmp	r3, #5
 8005ad6:	d115      	bne.n	8005b04 <HAL_RCC_OscConfig+0x50c>
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	4a07      	ldr	r2, [pc, #28]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005ae0:	f043 0304 	orr.w	r3, r3, #4
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ae8:	4b04      	ldr	r3, [pc, #16]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	4a03      	ldr	r2, [pc, #12]	; (8005afc <HAL_RCC_OscConfig+0x504>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005af8:	e014      	b.n	8005b24 <HAL_RCC_OscConfig+0x52c>
 8005afa:	bf00      	nop
 8005afc:	40021000 	.word	0x40021000
 8005b00:	40007000 	.word	0x40007000
 8005b04:	4b9a      	ldr	r3, [pc, #616]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	4a99      	ldr	r2, [pc, #612]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b14:	4b96      	ldr	r3, [pc, #600]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1a:	4a95      	ldr	r2, [pc, #596]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005b1c:	f023 0304 	bic.w	r3, r3, #4
 8005b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d016      	beq.n	8005b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2c:	f7fc ff26 	bl	800297c <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b32:	e00a      	b.n	8005b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b34:	f7fc ff22 	bl	800297c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e162      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b4a:	4b89      	ldr	r3, [pc, #548]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0ed      	beq.n	8005b34 <HAL_RCC_OscConfig+0x53c>
 8005b58:	e015      	b.n	8005b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5a:	f7fc ff0f 	bl	800297c <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b60:	e00a      	b.n	8005b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b62:	f7fc ff0b 	bl	800297c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e14b      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b78:	4b7d      	ldr	r3, [pc, #500]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1ed      	bne.n	8005b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b86:	7ffb      	ldrb	r3, [r7, #31]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d105      	bne.n	8005b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b8c:	4b78      	ldr	r3, [pc, #480]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b90:	4a77      	ldr	r2, [pc, #476]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d03c      	beq.n	8005c1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01c      	beq.n	8005be6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bac:	4b70      	ldr	r3, [pc, #448]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bb2:	4a6f      	ldr	r2, [pc, #444]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fc fede 	bl	800297c <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bc4:	f7fc feda 	bl	800297c <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e11c      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bd6:	4b66      	ldr	r3, [pc, #408]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0ef      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x5cc>
 8005be4:	e01b      	b.n	8005c1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005be6:	4b62      	ldr	r3, [pc, #392]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bec:	4a60      	ldr	r2, [pc, #384]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005bee:	f023 0301 	bic.w	r3, r3, #1
 8005bf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf6:	f7fc fec1 	bl	800297c <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bfe:	f7fc febd 	bl	800297c <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0ff      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c10:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1ef      	bne.n	8005bfe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80f3 	beq.w	8005e0e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	f040 80c9 	bne.w	8005dc4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c32:	4b4f      	ldr	r3, [pc, #316]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f003 0203 	and.w	r2, r3, #3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d12c      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	3b01      	subs	r3, #1
 8005c52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d123      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d11b      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d113      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	3b01      	subs	r3, #1
 8005c86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d109      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d06b      	beq.n	8005d78 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b0c      	cmp	r3, #12
 8005ca4:	d062      	beq.n	8005d6c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ca6:	4b32      	ldr	r3, [pc, #200]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e0ac      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005cb6:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2d      	ldr	r2, [pc, #180]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cc2:	f7fc fe5b 	bl	800297c <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cca:	f7fc fe57 	bl	800297c <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e099      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cdc:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1f0      	bne.n	8005cca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ce8:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	4b21      	ldr	r3, [pc, #132]	; (8005d74 <HAL_RCC_OscConfig+0x77c>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cf8:	3a01      	subs	r2, #1
 8005cfa:	0112      	lsls	r2, r2, #4
 8005cfc:	4311      	orrs	r1, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d02:	0212      	lsls	r2, r2, #8
 8005d04:	4311      	orrs	r1, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d0a:	0852      	lsrs	r2, r2, #1
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	0552      	lsls	r2, r2, #21
 8005d10:	4311      	orrs	r1, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d16:	0852      	lsrs	r2, r2, #1
 8005d18:	3a01      	subs	r2, #1
 8005d1a:	0652      	lsls	r2, r2, #25
 8005d1c:	4311      	orrs	r1, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d22:	06d2      	lsls	r2, r2, #27
 8005d24:	430a      	orrs	r2, r1
 8005d26:	4912      	ldr	r1, [pc, #72]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4a0c      	ldr	r2, [pc, #48]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d44:	f7fc fe1a 	bl	800297c <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fc fe16 	bl	800297c <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e058      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d5e:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <HAL_RCC_OscConfig+0x778>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d6a:	e050      	b.n	8005e0e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e04f      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
 8005d70:	40021000 	.word	0x40021000
 8005d74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d78:	4b27      	ldr	r3, [pc, #156]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d144      	bne.n	8005e0e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d84:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a23      	ldr	r2, [pc, #140]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d90:	4b21      	ldr	r3, [pc, #132]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4a20      	ldr	r2, [pc, #128]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d9c:	f7fc fdee 	bl	800297c <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da4:	f7fc fdea 	bl	800297c <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e02c      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x7ac>
 8005dc2:	e024      	b.n	8005e0e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b0c      	cmp	r3, #12
 8005dc8:	d01f      	beq.n	8005e0a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dca:	4b13      	ldr	r3, [pc, #76]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a12      	ldr	r2, [pc, #72]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd6:	f7fc fdd1 	bl	800297c <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dde:	f7fc fdcd 	bl	800297c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e00f      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f0      	bne.n	8005dde <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	4905      	ldr	r1, [pc, #20]	; (8005e18 <HAL_RCC_OscConfig+0x820>)
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <HAL_RCC_OscConfig+0x824>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	60cb      	str	r3, [r1, #12]
 8005e08:	e001      	b.n	8005e0e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	feeefffc 	.word	0xfeeefffc

08005e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0e7      	b.n	8006004 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e34:	4b75      	ldr	r3, [pc, #468]	; (800600c <HAL_RCC_ClockConfig+0x1ec>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d910      	bls.n	8005e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e42:	4b72      	ldr	r3, [pc, #456]	; (800600c <HAL_RCC_ClockConfig+0x1ec>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f023 0207 	bic.w	r2, r3, #7
 8005e4a:	4970      	ldr	r1, [pc, #448]	; (800600c <HAL_RCC_ClockConfig+0x1ec>)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e52:	4b6e      	ldr	r3, [pc, #440]	; (800600c <HAL_RCC_ClockConfig+0x1ec>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d001      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0cf      	b.n	8006004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d010      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	4b66      	ldr	r3, [pc, #408]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d908      	bls.n	8005e92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e80:	4b63      	ldr	r3, [pc, #396]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4960      	ldr	r1, [pc, #384]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d04c      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d107      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ea6:	4b5a      	ldr	r3, [pc, #360]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d121      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e0a6      	b.n	8006004 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d107      	bne.n	8005ece <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ebe:	4b54      	ldr	r3, [pc, #336]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d115      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e09a      	b.n	8006004 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ed6:	4b4e      	ldr	r3, [pc, #312]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e08e      	b.n	8006004 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e086      	b.n	8006004 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ef6:	4b46      	ldr	r3, [pc, #280]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f023 0203 	bic.w	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4943      	ldr	r1, [pc, #268]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f08:	f7fc fd38 	bl	800297c <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f10:	f7fc fd34 	bl	800297c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e06e      	b.n	8006004 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f26:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 020c 	and.w	r2, r3, #12
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d1eb      	bne.n	8005f10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d010      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	4b31      	ldr	r3, [pc, #196]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d208      	bcs.n	8005f66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f54:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	492b      	ldr	r1, [pc, #172]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f66:	4b29      	ldr	r3, [pc, #164]	; (800600c <HAL_RCC_ClockConfig+0x1ec>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d210      	bcs.n	8005f96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f74:	4b25      	ldr	r3, [pc, #148]	; (800600c <HAL_RCC_ClockConfig+0x1ec>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 0207 	bic.w	r2, r3, #7
 8005f7c:	4923      	ldr	r1, [pc, #140]	; (800600c <HAL_RCC_ClockConfig+0x1ec>)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f84:	4b21      	ldr	r3, [pc, #132]	; (800600c <HAL_RCC_ClockConfig+0x1ec>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d001      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e036      	b.n	8006004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	4918      	ldr	r1, [pc, #96]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fc0:	4b13      	ldr	r3, [pc, #76]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	4910      	ldr	r1, [pc, #64]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fd4:	f000 f824 	bl	8006020 <HAL_RCC_GetSysClockFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_RCC_ClockConfig+0x1f0>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	490b      	ldr	r1, [pc, #44]	; (8006014 <HAL_RCC_ClockConfig+0x1f4>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff0:	4a09      	ldr	r2, [pc, #36]	; (8006018 <HAL_RCC_ClockConfig+0x1f8>)
 8005ff2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ff4:	4b09      	ldr	r3, [pc, #36]	; (800601c <HAL_RCC_ClockConfig+0x1fc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fc fc6f 	bl	80028dc <HAL_InitTick>
 8005ffe:	4603      	mov	r3, r0
 8006000:	72fb      	strb	r3, [r7, #11]

  return status;
 8006002:	7afb      	ldrb	r3, [r7, #11]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40022000 	.word	0x40022000
 8006010:	40021000 	.word	0x40021000
 8006014:	0800c1a4 	.word	0x0800c1a4
 8006018:	20000004 	.word	0x20000004
 800601c:	20000008 	.word	0x20000008

08006020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	2300      	movs	r3, #0
 800602c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800602e:	4b3e      	ldr	r3, [pc, #248]	; (8006128 <HAL_RCC_GetSysClockFreq+0x108>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 030c 	and.w	r3, r3, #12
 8006036:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006038:	4b3b      	ldr	r3, [pc, #236]	; (8006128 <HAL_RCC_GetSysClockFreq+0x108>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0x34>
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b0c      	cmp	r3, #12
 800604c:	d121      	bne.n	8006092 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d11e      	bne.n	8006092 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006054:	4b34      	ldr	r3, [pc, #208]	; (8006128 <HAL_RCC_GetSysClockFreq+0x108>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d107      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006060:	4b31      	ldr	r3, [pc, #196]	; (8006128 <HAL_RCC_GetSysClockFreq+0x108>)
 8006062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	e005      	b.n	800607c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006070:	4b2d      	ldr	r3, [pc, #180]	; (8006128 <HAL_RCC_GetSysClockFreq+0x108>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800607c:	4a2b      	ldr	r2, [pc, #172]	; (800612c <HAL_RCC_GetSysClockFreq+0x10c>)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006084:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10d      	bne.n	80060a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006090:	e00a      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b04      	cmp	r3, #4
 8006096:	d102      	bne.n	800609e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <HAL_RCC_GetSysClockFreq+0x110>)
 800609a:	61bb      	str	r3, [r7, #24]
 800609c:	e004      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d101      	bne.n	80060a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060a4:	4b23      	ldr	r3, [pc, #140]	; (8006134 <HAL_RCC_GetSysClockFreq+0x114>)
 80060a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d134      	bne.n	8006118 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ae:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <HAL_RCC_GetSysClockFreq+0x108>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d003      	beq.n	80060c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d003      	beq.n	80060cc <HAL_RCC_GetSysClockFreq+0xac>
 80060c4:	e005      	b.n	80060d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80060c6:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <HAL_RCC_GetSysClockFreq+0x110>)
 80060c8:	617b      	str	r3, [r7, #20]
      break;
 80060ca:	e005      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80060cc:	4b19      	ldr	r3, [pc, #100]	; (8006134 <HAL_RCC_GetSysClockFreq+0x114>)
 80060ce:	617b      	str	r3, [r7, #20]
      break;
 80060d0:	e002      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	617b      	str	r3, [r7, #20]
      break;
 80060d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060d8:	4b13      	ldr	r3, [pc, #76]	; (8006128 <HAL_RCC_GetSysClockFreq+0x108>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	3301      	adds	r3, #1
 80060e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <HAL_RCC_GetSysClockFreq+0x108>)
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	fb03 f202 	mul.w	r2, r3, r2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060fe:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <HAL_RCC_GetSysClockFreq+0x108>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	0e5b      	lsrs	r3, r3, #25
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	3301      	adds	r3, #1
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	fbb2 f3f3 	udiv	r3, r2, r3
 8006116:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006118:	69bb      	ldr	r3, [r7, #24]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3724      	adds	r7, #36	; 0x24
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40021000 	.word	0x40021000
 800612c:	0800c1bc 	.word	0x0800c1bc
 8006130:	00f42400 	.word	0x00f42400
 8006134:	007a1200 	.word	0x007a1200

08006138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <HAL_RCC_GetHCLKFreq+0x14>)
 800613e:	681b      	ldr	r3, [r3, #0]
}
 8006140:	4618      	mov	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000004 	.word	0x20000004

08006150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006154:	f7ff fff0 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 8006158:	4602      	mov	r2, r0
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	4904      	ldr	r1, [pc, #16]	; (8006178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006166:	5ccb      	ldrb	r3, [r1, r3]
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40021000 	.word	0x40021000
 8006178:	0800c1b4 	.word	0x0800c1b4

0800617c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006180:	f7ff ffda 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 8006184:	4602      	mov	r2, r0
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	0adb      	lsrs	r3, r3, #11
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	4904      	ldr	r1, [pc, #16]	; (80061a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006192:	5ccb      	ldrb	r3, [r1, r3]
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40021000 	.word	0x40021000
 80061a4:	0800c1b4 	.word	0x0800c1b4

080061a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80061b0:	2300      	movs	r3, #0
 80061b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80061b4:	4b2a      	ldr	r3, [pc, #168]	; (8006260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80061c0:	f7ff f9b6 	bl	8005530 <HAL_PWREx_GetVoltageRange>
 80061c4:	6178      	str	r0, [r7, #20]
 80061c6:	e014      	b.n	80061f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80061c8:	4b25      	ldr	r3, [pc, #148]	; (8006260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061cc:	4a24      	ldr	r2, [pc, #144]	; (8006260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d2:	6593      	str	r3, [r2, #88]	; 0x58
 80061d4:	4b22      	ldr	r3, [pc, #136]	; (8006260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80061e0:	f7ff f9a6 	bl	8005530 <HAL_PWREx_GetVoltageRange>
 80061e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80061e6:	4b1e      	ldr	r3, [pc, #120]	; (8006260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ea:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f8:	d10b      	bne.n	8006212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b80      	cmp	r3, #128	; 0x80
 80061fe:	d919      	bls.n	8006234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2ba0      	cmp	r3, #160	; 0xa0
 8006204:	d902      	bls.n	800620c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006206:	2302      	movs	r3, #2
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	e013      	b.n	8006234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800620c:	2301      	movs	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	e010      	b.n	8006234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b80      	cmp	r3, #128	; 0x80
 8006216:	d902      	bls.n	800621e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006218:	2303      	movs	r3, #3
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	e00a      	b.n	8006234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b80      	cmp	r3, #128	; 0x80
 8006222:	d102      	bne.n	800622a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006224:	2302      	movs	r3, #2
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	e004      	b.n	8006234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b70      	cmp	r3, #112	; 0x70
 800622e:	d101      	bne.n	8006234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006230:	2301      	movs	r3, #1
 8006232:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006234:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f023 0207 	bic.w	r2, r3, #7
 800623c:	4909      	ldr	r1, [pc, #36]	; (8006264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006244:	4b07      	ldr	r3, [pc, #28]	; (8006264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	429a      	cmp	r2, r3
 8006250:	d001      	beq.n	8006256 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40021000 	.word	0x40021000
 8006264:	40022000 	.word	0x40022000

08006268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006270:	2300      	movs	r3, #0
 8006272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006274:	2300      	movs	r3, #0
 8006276:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006280:	2b00      	cmp	r3, #0
 8006282:	d031      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006288:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800628c:	d01a      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800628e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006292:	d814      	bhi.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800629c:	d10f      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800629e:	4b5d      	ldr	r3, [pc, #372]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	4a5c      	ldr	r2, [pc, #368]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062aa:	e00c      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3304      	adds	r3, #4
 80062b0:	2100      	movs	r1, #0
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fa44 	bl	8006740 <RCCEx_PLLSAI1_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062bc:	e003      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	74fb      	strb	r3, [r7, #19]
      break;
 80062c2:	e000      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80062c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c6:	7cfb      	ldrb	r3, [r7, #19]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062cc:	4b51      	ldr	r3, [pc, #324]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062da:	494e      	ldr	r1, [pc, #312]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80062e2:	e001      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	7cfb      	ldrb	r3, [r7, #19]
 80062e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 809e 	beq.w	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062f6:	2300      	movs	r3, #0
 80062f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062fa:	4b46      	ldr	r3, [pc, #280]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006310:	4b40      	ldr	r3, [pc, #256]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006314:	4a3f      	ldr	r2, [pc, #252]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631a:	6593      	str	r3, [r2, #88]	; 0x58
 800631c:	4b3d      	ldr	r3, [pc, #244]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800631e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006328:	2301      	movs	r3, #1
 800632a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800632c:	4b3a      	ldr	r3, [pc, #232]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a39      	ldr	r2, [pc, #228]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006338:	f7fc fb20 	bl	800297c <HAL_GetTick>
 800633c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800633e:	e009      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006340:	f7fc fb1c 	bl	800297c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d902      	bls.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	74fb      	strb	r3, [r7, #19]
        break;
 8006352:	e005      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006354:	4b30      	ldr	r3, [pc, #192]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0ef      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006360:	7cfb      	ldrb	r3, [r7, #19]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d15a      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006366:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006370:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01e      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	429a      	cmp	r2, r3
 8006380:	d019      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006382:	4b24      	ldr	r3, [pc, #144]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800638e:	4b21      	ldr	r3, [pc, #132]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006394:	4a1f      	ldr	r2, [pc, #124]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800639e:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a4:	4a1b      	ldr	r2, [pc, #108]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063ae:	4a19      	ldr	r2, [pc, #100]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d016      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c0:	f7fc fadc 	bl	800297c <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063c6:	e00b      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c8:	f7fc fad8 	bl	800297c <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d902      	bls.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	74fb      	strb	r3, [r7, #19]
            break;
 80063de:	e006      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063e0:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0ec      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80063ee:	7cfb      	ldrb	r3, [r7, #19]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063f4:	4b07      	ldr	r3, [pc, #28]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006402:	4904      	ldr	r1, [pc, #16]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800640a:	e009      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800640c:	7cfb      	ldrb	r3, [r7, #19]
 800640e:	74bb      	strb	r3, [r7, #18]
 8006410:	e006      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006412:	bf00      	nop
 8006414:	40021000 	.word	0x40021000
 8006418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	7cfb      	ldrb	r3, [r7, #19]
 800641e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006420:	7c7b      	ldrb	r3, [r7, #17]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d105      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006426:	4b9e      	ldr	r3, [pc, #632]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	4a9d      	ldr	r2, [pc, #628]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800642c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006430:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800643e:	4b98      	ldr	r3, [pc, #608]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006444:	f023 0203 	bic.w	r2, r3, #3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	4994      	ldr	r1, [pc, #592]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006460:	4b8f      	ldr	r3, [pc, #572]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006466:	f023 020c 	bic.w	r2, r3, #12
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	498c      	ldr	r1, [pc, #560]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006470:	4313      	orrs	r3, r2
 8006472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006482:	4b87      	ldr	r3, [pc, #540]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006488:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	4983      	ldr	r1, [pc, #524]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006492:	4313      	orrs	r3, r2
 8006494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064a4:	4b7e      	ldr	r3, [pc, #504]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	497b      	ldr	r1, [pc, #492]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c6:	4b76      	ldr	r3, [pc, #472]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	4972      	ldr	r1, [pc, #456]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064e8:	4b6d      	ldr	r3, [pc, #436]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	496a      	ldr	r1, [pc, #424]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800650a:	4b65      	ldr	r3, [pc, #404]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800650c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006518:	4961      	ldr	r1, [pc, #388]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800652c:	4b5c      	ldr	r3, [pc, #368]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800652e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006532:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653a:	4959      	ldr	r1, [pc, #356]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800653c:	4313      	orrs	r3, r2
 800653e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800654e:	4b54      	ldr	r3, [pc, #336]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006554:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	4950      	ldr	r1, [pc, #320]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006570:	4b4b      	ldr	r3, [pc, #300]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	4948      	ldr	r1, [pc, #288]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006592:	4b43      	ldr	r3, [pc, #268]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006594:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006598:	f023 0203 	bic.w	r2, r3, #3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	493f      	ldr	r1, [pc, #252]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d028      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065b4:	4b3a      	ldr	r3, [pc, #232]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c2:	4937      	ldr	r1, [pc, #220]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d2:	d106      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065d4:	4b32      	ldr	r3, [pc, #200]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	4a31      	ldr	r2, [pc, #196]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065de:	60d3      	str	r3, [r2, #12]
 80065e0:	e011      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ea:	d10c      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	2101      	movs	r1, #1
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 f8a4 	bl	8006740 <RCCEx_PLLSAI1_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8006602:	7cfb      	ldrb	r3, [r7, #19]
 8006604:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d028      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006612:	4b23      	ldr	r3, [pc, #140]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	491f      	ldr	r1, [pc, #124]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006630:	d106      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006632:	4b1b      	ldr	r3, [pc, #108]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4a1a      	ldr	r2, [pc, #104]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800663c:	60d3      	str	r3, [r2, #12]
 800663e:	e011      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006648:	d10c      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3304      	adds	r3, #4
 800664e:	2101      	movs	r1, #1
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f875 	bl	8006740 <RCCEx_PLLSAI1_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800665a:	7cfb      	ldrb	r3, [r7, #19]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8006660:	7cfb      	ldrb	r3, [r7, #19]
 8006662:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d02b      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667e:	4908      	ldr	r1, [pc, #32]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800668e:	d109      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006690:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	4a02      	ldr	r2, [pc, #8]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800669a:	60d3      	str	r3, [r2, #12]
 800669c:	e014      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800669e:	bf00      	nop
 80066a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3304      	adds	r3, #4
 80066b2:	2101      	movs	r1, #1
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 f843 	bl	8006740 <RCCEx_PLLSAI1_Config>
 80066ba:	4603      	mov	r3, r0
 80066bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066be:	7cfb      	ldrb	r3, [r7, #19]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01c      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e2:	4916      	ldr	r1, [pc, #88]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f2:	d10c      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3304      	adds	r3, #4
 80066f8:	2102      	movs	r1, #2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 f820 	bl	8006740 <RCCEx_PLLSAI1_Config>
 8006700:	4603      	mov	r3, r0
 8006702:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006704:	7cfb      	ldrb	r3, [r7, #19]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800670a:	7cfb      	ldrb	r3, [r7, #19]
 800670c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800671a:	4b08      	ldr	r3, [pc, #32]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006728:	4904      	ldr	r1, [pc, #16]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006730:	7cbb      	ldrb	r3, [r7, #18]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40021000 	.word	0x40021000

08006740 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800674e:	4b74      	ldr	r3, [pc, #464]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d018      	beq.n	800678c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800675a:	4b71      	ldr	r3, [pc, #452]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f003 0203 	and.w	r2, r3, #3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d10d      	bne.n	8006786 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
       ||
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006772:	4b6b      	ldr	r3, [pc, #428]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	091b      	lsrs	r3, r3, #4
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
       ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d047      	beq.n	8006816 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	73fb      	strb	r3, [r7, #15]
 800678a:	e044      	b.n	8006816 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d018      	beq.n	80067c6 <RCCEx_PLLSAI1_Config+0x86>
 8006794:	2b03      	cmp	r3, #3
 8006796:	d825      	bhi.n	80067e4 <RCCEx_PLLSAI1_Config+0xa4>
 8006798:	2b01      	cmp	r3, #1
 800679a:	d002      	beq.n	80067a2 <RCCEx_PLLSAI1_Config+0x62>
 800679c:	2b02      	cmp	r3, #2
 800679e:	d009      	beq.n	80067b4 <RCCEx_PLLSAI1_Config+0x74>
 80067a0:	e020      	b.n	80067e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067a2:	4b5f      	ldr	r3, [pc, #380]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d11d      	bne.n	80067ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067b2:	e01a      	b.n	80067ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067b4:	4b5a      	ldr	r3, [pc, #360]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d116      	bne.n	80067ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067c4:	e013      	b.n	80067ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067c6:	4b56      	ldr	r3, [pc, #344]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10f      	bne.n	80067f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067d2:	4b53      	ldr	r3, [pc, #332]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067e2:	e006      	b.n	80067f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	73fb      	strb	r3, [r7, #15]
      break;
 80067e8:	e004      	b.n	80067f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067ea:	bf00      	nop
 80067ec:	e002      	b.n	80067f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10d      	bne.n	8006816 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80067fa:	4b49      	ldr	r3, [pc, #292]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6819      	ldr	r1, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	3b01      	subs	r3, #1
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	430b      	orrs	r3, r1
 8006810:	4943      	ldr	r1, [pc, #268]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006812:	4313      	orrs	r3, r2
 8006814:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d17c      	bne.n	8006916 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800681c:	4b40      	ldr	r3, [pc, #256]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a3f      	ldr	r2, [pc, #252]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006822:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006828:	f7fc f8a8 	bl	800297c <HAL_GetTick>
 800682c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800682e:	e009      	b.n	8006844 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006830:	f7fc f8a4 	bl	800297c <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d902      	bls.n	8006844 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	73fb      	strb	r3, [r7, #15]
        break;
 8006842:	e005      	b.n	8006850 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006844:	4b36      	ldr	r3, [pc, #216]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1ef      	bne.n	8006830 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d15f      	bne.n	8006916 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d110      	bne.n	800687e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800685c:	4b30      	ldr	r3, [pc, #192]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006864:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6892      	ldr	r2, [r2, #8]
 800686c:	0211      	lsls	r1, r2, #8
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	68d2      	ldr	r2, [r2, #12]
 8006872:	06d2      	lsls	r2, r2, #27
 8006874:	430a      	orrs	r2, r1
 8006876:	492a      	ldr	r1, [pc, #168]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006878:	4313      	orrs	r3, r2
 800687a:	610b      	str	r3, [r1, #16]
 800687c:	e027      	b.n	80068ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d112      	bne.n	80068aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006884:	4b26      	ldr	r3, [pc, #152]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800688c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6892      	ldr	r2, [r2, #8]
 8006894:	0211      	lsls	r1, r2, #8
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6912      	ldr	r2, [r2, #16]
 800689a:	0852      	lsrs	r2, r2, #1
 800689c:	3a01      	subs	r2, #1
 800689e:	0552      	lsls	r2, r2, #21
 80068a0:	430a      	orrs	r2, r1
 80068a2:	491f      	ldr	r1, [pc, #124]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	610b      	str	r3, [r1, #16]
 80068a8:	e011      	b.n	80068ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068aa:	4b1d      	ldr	r3, [pc, #116]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6892      	ldr	r2, [r2, #8]
 80068ba:	0211      	lsls	r1, r2, #8
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6952      	ldr	r2, [r2, #20]
 80068c0:	0852      	lsrs	r2, r2, #1
 80068c2:	3a01      	subs	r2, #1
 80068c4:	0652      	lsls	r2, r2, #25
 80068c6:	430a      	orrs	r2, r1
 80068c8:	4915      	ldr	r1, [pc, #84]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a13      	ldr	r2, [pc, #76]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068da:	f7fc f84f 	bl	800297c <HAL_GetTick>
 80068de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068e0:	e009      	b.n	80068f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068e2:	f7fc f84b 	bl	800297c <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d902      	bls.n	80068f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	73fb      	strb	r3, [r7, #15]
          break;
 80068f4:	e005      	b.n	8006902 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068f6:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0ef      	beq.n	80068e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d106      	bne.n	8006916 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	4903      	ldr	r1, [pc, #12]	; (8006920 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006912:	4313      	orrs	r3, r2
 8006914:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40021000 	.word	0x40021000

08006924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e049      	b.n	80069ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fb fde6 	bl	800251c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	4610      	mov	r0, r2
 8006964:	f000 fdb6 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d001      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e040      	b.n	8006a6e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1c      	ldr	r2, [pc, #112]	; (8006a7c <HAL_TIM_Base_Start_IT+0xa8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00e      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x58>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a16:	d009      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x58>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a18      	ldr	r2, [pc, #96]	; (8006a80 <HAL_TIM_Base_Start_IT+0xac>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x58>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d115      	bne.n	8006a58 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b06      	cmp	r3, #6
 8006a3c:	d015      	beq.n	8006a6a <HAL_TIM_Base_Start_IT+0x96>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d011      	beq.n	8006a6a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a56:	e008      	b.n	8006a6a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e000      	b.n	8006a6c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40012c00 	.word	0x40012c00
 8006a80:	40000400 	.word	0x40000400
 8006a84:	40014000 	.word	0x40014000
 8006a88:	00010007 	.word	0x00010007

08006a8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6a1a      	ldr	r2, [r3, #32]
 8006aaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8006aae:	4013      	ands	r3, r2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10f      	bne.n	8006ad4 <HAL_TIM_Base_Stop_IT+0x48>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6a1a      	ldr	r2, [r3, #32]
 8006aba:	f240 4344 	movw	r3, #1092	; 0x444
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d107      	bne.n	8006ad4 <HAL_TIM_Base_Stop_IT+0x48>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0201 	bic.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e049      	b.n	8006b90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d106      	bne.n	8006b16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f841 	bl	8006b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f000 fcd3 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <HAL_TIM_PWM_Start+0x24>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	bf14      	ite	ne
 8006bc8:	2301      	movne	r3, #1
 8006bca:	2300      	moveq	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	e03c      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d109      	bne.n	8006bea <HAL_TIM_PWM_Start+0x3e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	bf14      	ite	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	2300      	moveq	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	e02f      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d109      	bne.n	8006c04 <HAL_TIM_PWM_Start+0x58>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	bf14      	ite	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	2300      	moveq	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	e022      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b0c      	cmp	r3, #12
 8006c08:	d109      	bne.n	8006c1e <HAL_TIM_PWM_Start+0x72>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	bf14      	ite	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	2300      	moveq	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	e015      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d109      	bne.n	8006c38 <HAL_TIM_PWM_Start+0x8c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	e008      	b.n	8006c4a <HAL_TIM_PWM_Start+0x9e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e083      	b.n	8006d5a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_PWM_Start+0xb6>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c60:	e023      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_PWM_Start+0xc6>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c70:	e01b      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d104      	bne.n	8006c82 <HAL_TIM_PWM_Start+0xd6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	e013      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	d104      	bne.n	8006c92 <HAL_TIM_PWM_Start+0xe6>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c90:	e00b      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d104      	bne.n	8006ca2 <HAL_TIM_PWM_Start+0xf6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca0:	e003      	b.n	8006caa <HAL_TIM_PWM_Start+0xfe>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 ff94 	bl	8007be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a29      	ldr	r2, [pc, #164]	; (8006d64 <HAL_TIM_PWM_Start+0x1b8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_TIM_PWM_Start+0x12a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a28      	ldr	r2, [pc, #160]	; (8006d68 <HAL_TIM_PWM_Start+0x1bc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d004      	beq.n	8006cd6 <HAL_TIM_PWM_Start+0x12a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a26      	ldr	r2, [pc, #152]	; (8006d6c <HAL_TIM_PWM_Start+0x1c0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d101      	bne.n	8006cda <HAL_TIM_PWM_Start+0x12e>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HAL_TIM_PWM_Start+0x130>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1b      	ldr	r2, [pc, #108]	; (8006d64 <HAL_TIM_PWM_Start+0x1b8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00e      	beq.n	8006d18 <HAL_TIM_PWM_Start+0x16c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d02:	d009      	beq.n	8006d18 <HAL_TIM_PWM_Start+0x16c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <HAL_TIM_PWM_Start+0x1c4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_TIM_PWM_Start+0x16c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <HAL_TIM_PWM_Start+0x1bc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d115      	bne.n	8006d44 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <HAL_TIM_PWM_Start+0x1c8>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d015      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x1aa>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d30:	d011      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	e008      	b.n	8006d56 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e000      	b.n	8006d58 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40000400 	.word	0x40000400
 8006d74:	00010007 	.word	0x00010007

08006d78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2200      	movs	r2, #0
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 ff28 	bl	8007be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a39      	ldr	r2, [pc, #228]	; (8006e7c <HAL_TIM_PWM_Stop+0x104>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d009      	beq.n	8006dae <HAL_TIM_PWM_Stop+0x36>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a38      	ldr	r2, [pc, #224]	; (8006e80 <HAL_TIM_PWM_Stop+0x108>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d004      	beq.n	8006dae <HAL_TIM_PWM_Stop+0x36>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a36      	ldr	r2, [pc, #216]	; (8006e84 <HAL_TIM_PWM_Stop+0x10c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d101      	bne.n	8006db2 <HAL_TIM_PWM_Stop+0x3a>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <HAL_TIM_PWM_Stop+0x3c>
 8006db2:	2300      	movs	r3, #0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d017      	beq.n	8006de8 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6a1a      	ldr	r2, [r3, #32]
 8006dbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10f      	bne.n	8006de8 <HAL_TIM_PWM_Stop+0x70>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6a1a      	ldr	r2, [r3, #32]
 8006dce:	f240 4344 	movw	r3, #1092	; 0x444
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d107      	bne.n	8006de8 <HAL_TIM_PWM_Stop+0x70>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006de6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6a1a      	ldr	r2, [r3, #32]
 8006dee:	f241 1311 	movw	r3, #4369	; 0x1111
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10f      	bne.n	8006e18 <HAL_TIM_PWM_Stop+0xa0>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6a1a      	ldr	r2, [r3, #32]
 8006dfe:	f240 4344 	movw	r3, #1092	; 0x444
 8006e02:	4013      	ands	r3, r2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d107      	bne.n	8006e18 <HAL_TIM_PWM_Stop+0xa0>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0201 	bic.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d104      	bne.n	8006e28 <HAL_TIM_PWM_Stop+0xb0>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e26:	e023      	b.n	8006e70 <HAL_TIM_PWM_Stop+0xf8>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d104      	bne.n	8006e38 <HAL_TIM_PWM_Stop+0xc0>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e36:	e01b      	b.n	8006e70 <HAL_TIM_PWM_Stop+0xf8>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d104      	bne.n	8006e48 <HAL_TIM_PWM_Stop+0xd0>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e46:	e013      	b.n	8006e70 <HAL_TIM_PWM_Stop+0xf8>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b0c      	cmp	r3, #12
 8006e4c:	d104      	bne.n	8006e58 <HAL_TIM_PWM_Stop+0xe0>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e56:	e00b      	b.n	8006e70 <HAL_TIM_PWM_Stop+0xf8>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b10      	cmp	r3, #16
 8006e5c:	d104      	bne.n	8006e68 <HAL_TIM_PWM_Stop+0xf0>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e66:	e003      	b.n	8006e70 <HAL_TIM_PWM_Stop+0xf8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40014400 	.word	0x40014400

08006e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d122      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d11b      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0202 	mvn.w	r2, #2
 8006eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fae3 	bl	8007496 <HAL_TIM_IC_CaptureCallback>
 8006ed0:	e005      	b.n	8006ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fad5 	bl	8007482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fae6 	bl	80074aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d122      	bne.n	8006f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d11b      	bne.n	8006f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0204 	mvn.w	r2, #4
 8006f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fab9 	bl	8007496 <HAL_TIM_IC_CaptureCallback>
 8006f24:	e005      	b.n	8006f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 faab 	bl	8007482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fabc 	bl	80074aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d122      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d11b      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0208 	mvn.w	r2, #8
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2204      	movs	r2, #4
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa8f 	bl	8007496 <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa81 	bl	8007482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fa92 	bl	80074aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d122      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b10      	cmp	r3, #16
 8006fa6:	d11b      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0210 	mvn.w	r2, #16
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa65 	bl	8007496 <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e005      	b.n	8006fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa57 	bl	8007482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fa68 	bl	80074aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d10e      	bne.n	800700c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d107      	bne.n	800700c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0201 	mvn.w	r2, #1
 8007004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fa fcd6 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b80      	cmp	r3, #128	; 0x80
 8007018:	d10e      	bne.n	8007038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d107      	bne.n	8007038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 feea 	bl	8007e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007046:	d10e      	bne.n	8007066 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b80      	cmp	r3, #128	; 0x80
 8007054:	d107      	bne.n	8007066 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800705e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fedd 	bl	8007e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d10e      	bne.n	8007092 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d107      	bne.n	8007092 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800708a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fa16 	bl	80074be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b20      	cmp	r3, #32
 800709e:	d10e      	bne.n	80070be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d107      	bne.n	80070be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f06f 0220 	mvn.w	r2, #32
 80070b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fe9d 	bl	8007df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e0ff      	b.n	80072e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b14      	cmp	r3, #20
 80070f2:	f200 80f0 	bhi.w	80072d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	08007151 	.word	0x08007151
 8007100:	080072d7 	.word	0x080072d7
 8007104:	080072d7 	.word	0x080072d7
 8007108:	080072d7 	.word	0x080072d7
 800710c:	08007191 	.word	0x08007191
 8007110:	080072d7 	.word	0x080072d7
 8007114:	080072d7 	.word	0x080072d7
 8007118:	080072d7 	.word	0x080072d7
 800711c:	080071d3 	.word	0x080071d3
 8007120:	080072d7 	.word	0x080072d7
 8007124:	080072d7 	.word	0x080072d7
 8007128:	080072d7 	.word	0x080072d7
 800712c:	08007213 	.word	0x08007213
 8007130:	080072d7 	.word	0x080072d7
 8007134:	080072d7 	.word	0x080072d7
 8007138:	080072d7 	.word	0x080072d7
 800713c:	08007255 	.word	0x08007255
 8007140:	080072d7 	.word	0x080072d7
 8007144:	080072d7 	.word	0x080072d7
 8007148:	080072d7 	.word	0x080072d7
 800714c:	08007295 	.word	0x08007295
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fa2a 	bl	80075b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0208 	orr.w	r2, r2, #8
 800716a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0204 	bic.w	r2, r2, #4
 800717a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6999      	ldr	r1, [r3, #24]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	619a      	str	r2, [r3, #24]
      break;
 800718e:	e0a5      	b.n	80072dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fa86 	bl	80076a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6999      	ldr	r1, [r3, #24]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	021a      	lsls	r2, r3, #8
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	619a      	str	r2, [r3, #24]
      break;
 80071d0:	e084      	b.n	80072dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fadf 	bl	800779c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 0208 	orr.w	r2, r2, #8
 80071ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0204 	bic.w	r2, r2, #4
 80071fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69d9      	ldr	r1, [r3, #28]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	61da      	str	r2, [r3, #28]
      break;
 8007210:	e064      	b.n	80072dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fb37 	bl	800788c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800722c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800723c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69d9      	ldr	r1, [r3, #28]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	021a      	lsls	r2, r3, #8
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	61da      	str	r2, [r3, #28]
      break;
 8007252:	e043      	b.n	80072dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68b9      	ldr	r1, [r7, #8]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fb74 	bl	8007948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0208 	orr.w	r2, r2, #8
 800726e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0204 	bic.w	r2, r2, #4
 800727e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007292:	e023      	b.n	80072dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fbac 	bl	80079f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	021a      	lsls	r2, r3, #8
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072d4:	e002      	b.n	80072dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	75fb      	strb	r3, [r7, #23]
      break;
 80072da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop

080072f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_TIM_ConfigClockSource+0x1c>
 8007308:	2302      	movs	r3, #2
 800730a:	e0b6      	b.n	800747a <HAL_TIM_ConfigClockSource+0x18a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800732e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007348:	d03e      	beq.n	80073c8 <HAL_TIM_ConfigClockSource+0xd8>
 800734a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800734e:	f200 8087 	bhi.w	8007460 <HAL_TIM_ConfigClockSource+0x170>
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007356:	f000 8086 	beq.w	8007466 <HAL_TIM_ConfigClockSource+0x176>
 800735a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735e:	d87f      	bhi.n	8007460 <HAL_TIM_ConfigClockSource+0x170>
 8007360:	2b70      	cmp	r3, #112	; 0x70
 8007362:	d01a      	beq.n	800739a <HAL_TIM_ConfigClockSource+0xaa>
 8007364:	2b70      	cmp	r3, #112	; 0x70
 8007366:	d87b      	bhi.n	8007460 <HAL_TIM_ConfigClockSource+0x170>
 8007368:	2b60      	cmp	r3, #96	; 0x60
 800736a:	d050      	beq.n	800740e <HAL_TIM_ConfigClockSource+0x11e>
 800736c:	2b60      	cmp	r3, #96	; 0x60
 800736e:	d877      	bhi.n	8007460 <HAL_TIM_ConfigClockSource+0x170>
 8007370:	2b50      	cmp	r3, #80	; 0x50
 8007372:	d03c      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0xfe>
 8007374:	2b50      	cmp	r3, #80	; 0x50
 8007376:	d873      	bhi.n	8007460 <HAL_TIM_ConfigClockSource+0x170>
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d058      	beq.n	800742e <HAL_TIM_ConfigClockSource+0x13e>
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d86f      	bhi.n	8007460 <HAL_TIM_ConfigClockSource+0x170>
 8007380:	2b30      	cmp	r3, #48	; 0x30
 8007382:	d064      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x15e>
 8007384:	2b30      	cmp	r3, #48	; 0x30
 8007386:	d86b      	bhi.n	8007460 <HAL_TIM_ConfigClockSource+0x170>
 8007388:	2b20      	cmp	r3, #32
 800738a:	d060      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x15e>
 800738c:	2b20      	cmp	r3, #32
 800738e:	d867      	bhi.n	8007460 <HAL_TIM_ConfigClockSource+0x170>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d05c      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x15e>
 8007394:	2b10      	cmp	r3, #16
 8007396:	d05a      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x15e>
 8007398:	e062      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6899      	ldr	r1, [r3, #8]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f000 fbf9 	bl	8007ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	609a      	str	r2, [r3, #8]
      break;
 80073c6:	e04f      	b.n	8007468 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6818      	ldr	r0, [r3, #0]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	6899      	ldr	r1, [r3, #8]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f000 fbe2 	bl	8007ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689a      	ldr	r2, [r3, #8]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073ea:	609a      	str	r2, [r3, #8]
      break;
 80073ec:	e03c      	b.n	8007468 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	6859      	ldr	r1, [r3, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	461a      	mov	r2, r3
 80073fc:	f000 fb56 	bl	8007aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2150      	movs	r1, #80	; 0x50
 8007406:	4618      	mov	r0, r3
 8007408:	f000 fbaf 	bl	8007b6a <TIM_ITRx_SetConfig>
      break;
 800740c:	e02c      	b.n	8007468 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6859      	ldr	r1, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	461a      	mov	r2, r3
 800741c:	f000 fb75 	bl	8007b0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2160      	movs	r1, #96	; 0x60
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fb9f 	bl	8007b6a <TIM_ITRx_SetConfig>
      break;
 800742c:	e01c      	b.n	8007468 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	461a      	mov	r2, r3
 800743c:	f000 fb36 	bl	8007aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2140      	movs	r1, #64	; 0x40
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fb8f 	bl	8007b6a <TIM_ITRx_SetConfig>
      break;
 800744c:	e00c      	b.n	8007468 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f000 fb86 	bl	8007b6a <TIM_ITRx_SetConfig>
      break;
 800745e:	e003      	b.n	8007468 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
      break;
 8007464:	e000      	b.n	8007468 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a2e      	ldr	r2, [pc, #184]	; (80075a0 <TIM_Base_SetConfig+0xcc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d007      	beq.n	80074fc <TIM_Base_SetConfig+0x28>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f2:	d003      	beq.n	80074fc <TIM_Base_SetConfig+0x28>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a2b      	ldr	r2, [pc, #172]	; (80075a4 <TIM_Base_SetConfig+0xd0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d108      	bne.n	800750e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a23      	ldr	r2, [pc, #140]	; (80075a0 <TIM_Base_SetConfig+0xcc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00f      	beq.n	8007536 <TIM_Base_SetConfig+0x62>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d00b      	beq.n	8007536 <TIM_Base_SetConfig+0x62>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a20      	ldr	r2, [pc, #128]	; (80075a4 <TIM_Base_SetConfig+0xd0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d007      	beq.n	8007536 <TIM_Base_SetConfig+0x62>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a1f      	ldr	r2, [pc, #124]	; (80075a8 <TIM_Base_SetConfig+0xd4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d003      	beq.n	8007536 <TIM_Base_SetConfig+0x62>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a1e      	ldr	r2, [pc, #120]	; (80075ac <TIM_Base_SetConfig+0xd8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d108      	bne.n	8007548 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800753c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a0c      	ldr	r2, [pc, #48]	; (80075a0 <TIM_Base_SetConfig+0xcc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d007      	beq.n	8007584 <TIM_Base_SetConfig+0xb0>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a0c      	ldr	r2, [pc, #48]	; (80075a8 <TIM_Base_SetConfig+0xd4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_Base_SetConfig+0xb0>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a0b      	ldr	r2, [pc, #44]	; (80075ac <TIM_Base_SetConfig+0xd8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d103      	bne.n	800758c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	615a      	str	r2, [r3, #20]
}
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40012c00 	.word	0x40012c00
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400

080075b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f023 0201 	bic.w	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f023 0302 	bic.w	r3, r3, #2
 80075fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a24      	ldr	r2, [pc, #144]	; (800769c <TIM_OC1_SetConfig+0xec>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d007      	beq.n	8007620 <TIM_OC1_SetConfig+0x70>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a23      	ldr	r2, [pc, #140]	; (80076a0 <TIM_OC1_SetConfig+0xf0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d003      	beq.n	8007620 <TIM_OC1_SetConfig+0x70>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a22      	ldr	r2, [pc, #136]	; (80076a4 <TIM_OC1_SetConfig+0xf4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d10c      	bne.n	800763a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f023 0308 	bic.w	r3, r3, #8
 8007626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f023 0304 	bic.w	r3, r3, #4
 8007638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a17      	ldr	r2, [pc, #92]	; (800769c <TIM_OC1_SetConfig+0xec>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d007      	beq.n	8007652 <TIM_OC1_SetConfig+0xa2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a16      	ldr	r2, [pc, #88]	; (80076a0 <TIM_OC1_SetConfig+0xf0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_OC1_SetConfig+0xa2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <TIM_OC1_SetConfig+0xf4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d111      	bne.n	8007676 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	621a      	str	r2, [r3, #32]
}
 8007690:	bf00      	nop
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	40012c00 	.word	0x40012c00
 80076a0:	40014000 	.word	0x40014000
 80076a4:	40014400 	.word	0x40014400

080076a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	f023 0210 	bic.w	r2, r3, #16
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f023 0320 	bic.w	r3, r3, #32
 80076f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a22      	ldr	r2, [pc, #136]	; (8007790 <TIM_OC2_SetConfig+0xe8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d10d      	bne.n	8007728 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a19      	ldr	r2, [pc, #100]	; (8007790 <TIM_OC2_SetConfig+0xe8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_OC2_SetConfig+0x98>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a18      	ldr	r2, [pc, #96]	; (8007794 <TIM_OC2_SetConfig+0xec>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_OC2_SetConfig+0x98>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a17      	ldr	r2, [pc, #92]	; (8007798 <TIM_OC2_SetConfig+0xf0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d113      	bne.n	8007768 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007746:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800774e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400

0800779c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a21      	ldr	r2, [pc, #132]	; (8007880 <TIM_OC3_SetConfig+0xe4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d10d      	bne.n	800781a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a18      	ldr	r2, [pc, #96]	; (8007880 <TIM_OC3_SetConfig+0xe4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d007      	beq.n	8007832 <TIM_OC3_SetConfig+0x96>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a17      	ldr	r2, [pc, #92]	; (8007884 <TIM_OC3_SetConfig+0xe8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d003      	beq.n	8007832 <TIM_OC3_SetConfig+0x96>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a16      	ldr	r2, [pc, #88]	; (8007888 <TIM_OC3_SetConfig+0xec>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d113      	bne.n	800785a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	621a      	str	r2, [r3, #32]
}
 8007874:	bf00      	nop
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	40012c00 	.word	0x40012c00
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400

0800788c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	031b      	lsls	r3, r3, #12
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a14      	ldr	r2, [pc, #80]	; (800793c <TIM_OC4_SetConfig+0xb0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d007      	beq.n	8007900 <TIM_OC4_SetConfig+0x74>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a13      	ldr	r2, [pc, #76]	; (8007940 <TIM_OC4_SetConfig+0xb4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_OC4_SetConfig+0x74>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a12      	ldr	r2, [pc, #72]	; (8007944 <TIM_OC4_SetConfig+0xb8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d109      	bne.n	8007914 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	019b      	lsls	r3, r3, #6
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	621a      	str	r2, [r3, #32]
}
 800792e:	bf00      	nop
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40012c00 	.word	0x40012c00
 8007940:	40014000 	.word	0x40014000
 8007944:	40014400 	.word	0x40014400

08007948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800798c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	041b      	lsls	r3, r3, #16
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a13      	ldr	r2, [pc, #76]	; (80079ec <TIM_OC5_SetConfig+0xa4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_OC5_SetConfig+0x6a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a12      	ldr	r2, [pc, #72]	; (80079f0 <TIM_OC5_SetConfig+0xa8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_OC5_SetConfig+0x6a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a11      	ldr	r2, [pc, #68]	; (80079f4 <TIM_OC5_SetConfig+0xac>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d109      	bne.n	80079c6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	621a      	str	r2, [r3, #32]
}
 80079e0:	bf00      	nop
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	40012c00 	.word	0x40012c00
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400

080079f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	051b      	lsls	r3, r3, #20
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a14      	ldr	r2, [pc, #80]	; (8007aa0 <TIM_OC6_SetConfig+0xa8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_OC6_SetConfig+0x6c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a13      	ldr	r2, [pc, #76]	; (8007aa4 <TIM_OC6_SetConfig+0xac>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_OC6_SetConfig+0x6c>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a12      	ldr	r2, [pc, #72]	; (8007aa8 <TIM_OC6_SetConfig+0xb0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d109      	bne.n	8007a78 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	029b      	lsls	r3, r3, #10
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	40012c00 	.word	0x40012c00
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	40014400 	.word	0x40014400

08007aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f023 0201 	bic.w	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f023 030a 	bic.w	r3, r3, #10
 8007ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	621a      	str	r2, [r3, #32]
}
 8007afe:	bf00      	nop
 8007b00:	371c      	adds	r7, #28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b087      	sub	sp, #28
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	f023 0210 	bic.w	r2, r3, #16
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	031b      	lsls	r3, r3, #12
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	621a      	str	r2, [r3, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f043 0307 	orr.w	r3, r3, #7
 8007b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	609a      	str	r2, [r3, #8]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	021a      	lsls	r2, r3, #8
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	609a      	str	r2, [r3, #8]
}
 8007bd4:	bf00      	nop
 8007bd6:	371c      	adds	r7, #28
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f003 031f 	and.w	r3, r3, #31
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a1a      	ldr	r2, [r3, #32]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	43db      	mvns	r3, r3
 8007c02:	401a      	ands	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1a      	ldr	r2, [r3, #32]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
	...

08007c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d101      	bne.n	8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e054      	b.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a24      	ldr	r2, [pc, #144]	; (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d108      	bne.n	8007c80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00e      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cac:	d009      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d004      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a11      	ldr	r2, [pc, #68]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d10c      	bne.n	8007cdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40012c00 	.word	0x40012c00
 8007d00:	40000400 	.word	0x40000400
 8007d04:	40014000 	.word	0x40014000

08007d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e060      	b.n	8007de6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	041b      	lsls	r3, r3, #16
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a14      	ldr	r2, [pc, #80]	; (8007df4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d115      	bne.n	8007dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	051b      	lsls	r3, r3, #20
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40012c00 	.word	0x40012c00

08007df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e040      	b.n	8007ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7fa fc9a 	bl	8002790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2224      	movs	r2, #36	; 0x24
 8007e60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0201 	bic.w	r2, r2, #1
 8007e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fc18 	bl	80086a8 <UART_SetConfig>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d101      	bne.n	8007e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e022      	b.n	8007ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fe92 	bl	8008bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0201 	orr.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 ff19 	bl	8008cf8 <UART_CheckIdleState>
 8007ec6:	4603      	mov	r3, r0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08a      	sub	sp, #40	; 0x28
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	f040 8082 	bne.w	8007fee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <HAL_UART_Transmit+0x26>
 8007ef0:	88fb      	ldrh	r3, [r7, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e07a      	b.n	8007ff0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_UART_Transmit+0x38>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e073      	b.n	8007ff0 <HAL_UART_Transmit+0x120>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2221      	movs	r2, #33	; 0x21
 8007f1c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f1e:	f7fa fd2d 	bl	800297c <HAL_GetTick>
 8007f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	88fa      	ldrh	r2, [r7, #6]
 8007f28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	88fa      	ldrh	r2, [r7, #6]
 8007f30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f3c:	d108      	bne.n	8007f50 <HAL_UART_Transmit+0x80>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d104      	bne.n	8007f50 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	61bb      	str	r3, [r7, #24]
 8007f4e:	e003      	b.n	8007f58 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f54:	2300      	movs	r3, #0
 8007f56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007f60:	e02d      	b.n	8007fbe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2180      	movs	r1, #128	; 0x80
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 ff0c 	bl	8008d8a <UART_WaitOnFlagUntilTimeout>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e039      	b.n	8007ff0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	881a      	ldrh	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f8e:	b292      	uxth	r2, r2
 8007f90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	3302      	adds	r3, #2
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	e008      	b.n	8007fac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	781a      	ldrb	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	b292      	uxth	r2, r2
 8007fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1cb      	bne.n	8007f62 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2140      	movs	r1, #64	; 0x40
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 fed8 	bl	8008d8a <UART_WaitOnFlagUntilTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e005      	b.n	8007ff0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e000      	b.n	8007ff0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007fee:	2302      	movs	r3, #2
  }
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3720      	adds	r7, #32
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08a      	sub	sp, #40	; 0x28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800800a:	2b20      	cmp	r3, #32
 800800c:	d142      	bne.n	8008094 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <HAL_UART_Receive_IT+0x22>
 8008014:	88fb      	ldrh	r3, [r7, #6]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e03b      	b.n	8008096 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_UART_Receive_IT+0x34>
 8008028:	2302      	movs	r3, #2
 800802a:	e034      	b.n	8008096 <HAL_UART_Receive_IT+0x9e>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a18      	ldr	r2, [pc, #96]	; (80080a0 <HAL_UART_Receive_IT+0xa8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d01f      	beq.n	8008084 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d018      	beq.n	8008084 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	613b      	str	r3, [r7, #16]
   return(result);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008066:	627b      	str	r3, [r7, #36]	; 0x24
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	623b      	str	r3, [r7, #32]
 8008072:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	69f9      	ldr	r1, [r7, #28]
 8008076:	6a3a      	ldr	r2, [r7, #32]
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	61bb      	str	r3, [r7, #24]
   return(result);
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e6      	bne.n	8008052 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	461a      	mov	r2, r3
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 ff42 	bl	8008f14 <UART_Start_Receive_IT>
 8008090:	4603      	mov	r3, r0
 8008092:	e000      	b.n	8008096 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008094:	2302      	movs	r3, #2
  }
}
 8008096:	4618      	mov	r0, r3
 8008098:	3728      	adds	r7, #40	; 0x28
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	40008000 	.word	0x40008000

080080a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b0ba      	sub	sp, #232	; 0xe8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80080d2:	4013      	ands	r3, r2
 80080d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d115      	bne.n	800810c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80080e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00f      	beq.n	800810c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f0:	f003 0320 	and.w	r3, r3, #32
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d009      	beq.n	800810c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 82a6 	beq.w	800864e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
      }
      return;
 800810a:	e2a0      	b.n	800864e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800810c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 8117 	beq.w	8008344 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008122:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008126:	4b85      	ldr	r3, [pc, #532]	; (800833c <HAL_UART_IRQHandler+0x298>)
 8008128:	4013      	ands	r3, r2
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 810a 	beq.w	8008344 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d011      	beq.n	8008160 <HAL_UART_IRQHandler+0xbc>
 800813c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00b      	beq.n	8008160 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2201      	movs	r2, #1
 800814e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008156:	f043 0201 	orr.w	r2, r3, #1
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d011      	beq.n	8008190 <HAL_UART_IRQHandler+0xec>
 800816c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2202      	movs	r2, #2
 800817e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008186:	f043 0204 	orr.w	r2, r3, #4
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	d011      	beq.n	80081c0 <HAL_UART_IRQHandler+0x11c>
 800819c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2204      	movs	r2, #4
 80081ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b6:	f043 0202 	orr.w	r2, r3, #2
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c4:	f003 0308 	and.w	r3, r3, #8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d017      	beq.n	80081fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80081cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d105      	bne.n	80081e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80081d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2208      	movs	r2, #8
 80081ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081f2:	f043 0208 	orr.w	r2, r3, #8
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008204:	2b00      	cmp	r3, #0
 8008206:	d012      	beq.n	800822e <HAL_UART_IRQHandler+0x18a>
 8008208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00c      	beq.n	800822e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800821c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008224:	f043 0220 	orr.w	r2, r3, #32
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 820c 	beq.w	8008652 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00d      	beq.n	8008262 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008276:	2b40      	cmp	r3, #64	; 0x40
 8008278:	d005      	beq.n	8008286 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800827a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800827e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008282:	2b00      	cmp	r3, #0
 8008284:	d04f      	beq.n	8008326 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 ff0e 	bl	80090a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008296:	2b40      	cmp	r3, #64	; 0x40
 8008298:	d141      	bne.n	800831e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3308      	adds	r3, #8
 80082c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1d9      	bne.n	800829a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d013      	beq.n	8008316 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f2:	4a13      	ldr	r2, [pc, #76]	; (8008340 <HAL_UART_IRQHandler+0x29c>)
 80082f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fc f852 	bl	80043a4 <HAL_DMA_Abort_IT>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d017      	beq.n	8008336 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008314:	e00f      	b.n	8008336 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f9b0 	bl	800867c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	e00b      	b.n	8008336 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f9ac 	bl	800867c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008324:	e007      	b.n	8008336 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f9a8 	bl	800867c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008334:	e18d      	b.n	8008652 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008336:	bf00      	nop
    return;
 8008338:	e18b      	b.n	8008652 <HAL_UART_IRQHandler+0x5ae>
 800833a:	bf00      	nop
 800833c:	04000120 	.word	0x04000120
 8008340:	0800916f 	.word	0x0800916f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008348:	2b01      	cmp	r3, #1
 800834a:	f040 8146 	bne.w	80085da <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800834e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008352:	f003 0310 	and.w	r3, r3, #16
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 813f 	beq.w	80085da <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008360:	f003 0310 	and.w	r3, r3, #16
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8138 	beq.w	80085da <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2210      	movs	r2, #16
 8008370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837c:	2b40      	cmp	r3, #64	; 0x40
 800837e:	f040 80b4 	bne.w	80084ea <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800838e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 815f 	beq.w	8008656 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800839e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083a2:	429a      	cmp	r2, r3
 80083a4:	f080 8157 	bcs.w	8008656 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f040 8085 	bne.w	80084ce <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1da      	bne.n	80083c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3308      	adds	r3, #8
 8008414:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800841e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008420:	f023 0301 	bic.w	r3, r3, #1
 8008424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3308      	adds	r3, #8
 800842e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008432:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008436:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008438:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800843a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e1      	bne.n	800840e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3308      	adds	r3, #8
 8008450:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800845a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800845c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3308      	adds	r3, #8
 800846a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800846e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008470:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008474:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800847c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1e3      	bne.n	800844a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2220      	movs	r2, #32
 8008486:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800849c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800849e:	f023 0310 	bic.w	r3, r3, #16
 80084a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80084b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e4      	bne.n	800848e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fb ff2d 	bl	8004328 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084da:	b29b      	uxth	r3, r3
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	b29b      	uxth	r3, r3
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f8d4 	bl	8008690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084e8:	e0b5      	b.n	8008656 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80a7 	beq.w	800865a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800850c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 80a2 	beq.w	800865a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800852a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008538:	647b      	str	r3, [r7, #68]	; 0x44
 800853a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800853e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e4      	bne.n	8008516 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	623b      	str	r3, [r7, #32]
   return(result);
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3308      	adds	r3, #8
 800856c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008570:	633a      	str	r2, [r7, #48]	; 0x30
 8008572:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e3      	bne.n	800854c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2220      	movs	r2, #32
 8008588:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	e853 3f00 	ldrex	r3, [r3]
 80085a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0310 	bic.w	r3, r3, #16
 80085aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085b8:	61fb      	str	r3, [r7, #28]
 80085ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085bc:	69b9      	ldr	r1, [r7, #24]
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	e841 2300 	strex	r3, r2, [r1]
 80085c4:	617b      	str	r3, [r7, #20]
   return(result);
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e4      	bne.n	8008596 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f85c 	bl	8008690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085d8:	e03f      	b.n	800865a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00e      	beq.n	8008604 <HAL_UART_IRQHandler+0x560>
 80085e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d008      	beq.n	8008604 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 ff56 	bl	80094ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008602:	e02d      	b.n	8008660 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00e      	beq.n	800862e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008618:	2b00      	cmp	r3, #0
 800861a:	d008      	beq.n	800862e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008620:	2b00      	cmp	r3, #0
 8008622:	d01c      	beq.n	800865e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	4798      	blx	r3
    }
    return;
 800862c:	e017      	b.n	800865e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800862e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d012      	beq.n	8008660 <HAL_UART_IRQHandler+0x5bc>
 800863a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00c      	beq.n	8008660 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fda7 	bl	800919a <UART_EndTransmit_IT>
    return;
 800864c:	e008      	b.n	8008660 <HAL_UART_IRQHandler+0x5bc>
      return;
 800864e:	bf00      	nop
 8008650:	e006      	b.n	8008660 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008652:	bf00      	nop
 8008654:	e004      	b.n	8008660 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008656:	bf00      	nop
 8008658:	e002      	b.n	8008660 <HAL_UART_IRQHandler+0x5bc>
      return;
 800865a:	bf00      	nop
 800865c:	e000      	b.n	8008660 <HAL_UART_IRQHandler+0x5bc>
    return;
 800865e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008660:	37e8      	adds	r7, #232	; 0xe8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop

08008668 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086ac:	b08a      	sub	sp, #40	; 0x28
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	431a      	orrs	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	431a      	orrs	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4ba5      	ldr	r3, [pc, #660]	; (800896c <UART_SetConfig+0x2c4>)
 80086d8:	4013      	ands	r3, r2
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	6812      	ldr	r2, [r2, #0]
 80086de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086e0:	430b      	orrs	r3, r1
 80086e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a9a      	ldr	r2, [pc, #616]	; (8008970 <UART_SetConfig+0x2c8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d004      	beq.n	8008714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008710:	4313      	orrs	r3, r2
 8008712:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008724:	430a      	orrs	r2, r1
 8008726:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a91      	ldr	r2, [pc, #580]	; (8008974 <UART_SetConfig+0x2cc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d126      	bne.n	8008780 <UART_SetConfig+0xd8>
 8008732:	4b91      	ldr	r3, [pc, #580]	; (8008978 <UART_SetConfig+0x2d0>)
 8008734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	2b03      	cmp	r3, #3
 800873e:	d81b      	bhi.n	8008778 <UART_SetConfig+0xd0>
 8008740:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <UART_SetConfig+0xa0>)
 8008742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008746:	bf00      	nop
 8008748:	08008759 	.word	0x08008759
 800874c:	08008769 	.word	0x08008769
 8008750:	08008761 	.word	0x08008761
 8008754:	08008771 	.word	0x08008771
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800875e:	e0d6      	b.n	800890e <UART_SetConfig+0x266>
 8008760:	2302      	movs	r3, #2
 8008762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008766:	e0d2      	b.n	800890e <UART_SetConfig+0x266>
 8008768:	2304      	movs	r3, #4
 800876a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800876e:	e0ce      	b.n	800890e <UART_SetConfig+0x266>
 8008770:	2308      	movs	r3, #8
 8008772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008776:	e0ca      	b.n	800890e <UART_SetConfig+0x266>
 8008778:	2310      	movs	r3, #16
 800877a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800877e:	e0c6      	b.n	800890e <UART_SetConfig+0x266>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a7d      	ldr	r2, [pc, #500]	; (800897c <UART_SetConfig+0x2d4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d138      	bne.n	80087fc <UART_SetConfig+0x154>
 800878a:	4b7b      	ldr	r3, [pc, #492]	; (8008978 <UART_SetConfig+0x2d0>)
 800878c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008790:	f003 030c 	and.w	r3, r3, #12
 8008794:	2b0c      	cmp	r3, #12
 8008796:	d82d      	bhi.n	80087f4 <UART_SetConfig+0x14c>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <UART_SetConfig+0xf8>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	080087d5 	.word	0x080087d5
 80087a4:	080087f5 	.word	0x080087f5
 80087a8:	080087f5 	.word	0x080087f5
 80087ac:	080087f5 	.word	0x080087f5
 80087b0:	080087e5 	.word	0x080087e5
 80087b4:	080087f5 	.word	0x080087f5
 80087b8:	080087f5 	.word	0x080087f5
 80087bc:	080087f5 	.word	0x080087f5
 80087c0:	080087dd 	.word	0x080087dd
 80087c4:	080087f5 	.word	0x080087f5
 80087c8:	080087f5 	.word	0x080087f5
 80087cc:	080087f5 	.word	0x080087f5
 80087d0:	080087ed 	.word	0x080087ed
 80087d4:	2300      	movs	r3, #0
 80087d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087da:	e098      	b.n	800890e <UART_SetConfig+0x266>
 80087dc:	2302      	movs	r3, #2
 80087de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e2:	e094      	b.n	800890e <UART_SetConfig+0x266>
 80087e4:	2304      	movs	r3, #4
 80087e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ea:	e090      	b.n	800890e <UART_SetConfig+0x266>
 80087ec:	2308      	movs	r3, #8
 80087ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f2:	e08c      	b.n	800890e <UART_SetConfig+0x266>
 80087f4:	2310      	movs	r3, #16
 80087f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087fa:	e088      	b.n	800890e <UART_SetConfig+0x266>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a5f      	ldr	r2, [pc, #380]	; (8008980 <UART_SetConfig+0x2d8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d125      	bne.n	8008852 <UART_SetConfig+0x1aa>
 8008806:	4b5c      	ldr	r3, [pc, #368]	; (8008978 <UART_SetConfig+0x2d0>)
 8008808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800880c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008810:	2b30      	cmp	r3, #48	; 0x30
 8008812:	d016      	beq.n	8008842 <UART_SetConfig+0x19a>
 8008814:	2b30      	cmp	r3, #48	; 0x30
 8008816:	d818      	bhi.n	800884a <UART_SetConfig+0x1a2>
 8008818:	2b20      	cmp	r3, #32
 800881a:	d00a      	beq.n	8008832 <UART_SetConfig+0x18a>
 800881c:	2b20      	cmp	r3, #32
 800881e:	d814      	bhi.n	800884a <UART_SetConfig+0x1a2>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <UART_SetConfig+0x182>
 8008824:	2b10      	cmp	r3, #16
 8008826:	d008      	beq.n	800883a <UART_SetConfig+0x192>
 8008828:	e00f      	b.n	800884a <UART_SetConfig+0x1a2>
 800882a:	2300      	movs	r3, #0
 800882c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008830:	e06d      	b.n	800890e <UART_SetConfig+0x266>
 8008832:	2302      	movs	r3, #2
 8008834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008838:	e069      	b.n	800890e <UART_SetConfig+0x266>
 800883a:	2304      	movs	r3, #4
 800883c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008840:	e065      	b.n	800890e <UART_SetConfig+0x266>
 8008842:	2308      	movs	r3, #8
 8008844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008848:	e061      	b.n	800890e <UART_SetConfig+0x266>
 800884a:	2310      	movs	r3, #16
 800884c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008850:	e05d      	b.n	800890e <UART_SetConfig+0x266>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a4b      	ldr	r2, [pc, #300]	; (8008984 <UART_SetConfig+0x2dc>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d125      	bne.n	80088a8 <UART_SetConfig+0x200>
 800885c:	4b46      	ldr	r3, [pc, #280]	; (8008978 <UART_SetConfig+0x2d0>)
 800885e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008862:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008866:	2bc0      	cmp	r3, #192	; 0xc0
 8008868:	d016      	beq.n	8008898 <UART_SetConfig+0x1f0>
 800886a:	2bc0      	cmp	r3, #192	; 0xc0
 800886c:	d818      	bhi.n	80088a0 <UART_SetConfig+0x1f8>
 800886e:	2b80      	cmp	r3, #128	; 0x80
 8008870:	d00a      	beq.n	8008888 <UART_SetConfig+0x1e0>
 8008872:	2b80      	cmp	r3, #128	; 0x80
 8008874:	d814      	bhi.n	80088a0 <UART_SetConfig+0x1f8>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <UART_SetConfig+0x1d8>
 800887a:	2b40      	cmp	r3, #64	; 0x40
 800887c:	d008      	beq.n	8008890 <UART_SetConfig+0x1e8>
 800887e:	e00f      	b.n	80088a0 <UART_SetConfig+0x1f8>
 8008880:	2300      	movs	r3, #0
 8008882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008886:	e042      	b.n	800890e <UART_SetConfig+0x266>
 8008888:	2302      	movs	r3, #2
 800888a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800888e:	e03e      	b.n	800890e <UART_SetConfig+0x266>
 8008890:	2304      	movs	r3, #4
 8008892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008896:	e03a      	b.n	800890e <UART_SetConfig+0x266>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800889e:	e036      	b.n	800890e <UART_SetConfig+0x266>
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a6:	e032      	b.n	800890e <UART_SetConfig+0x266>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a30      	ldr	r2, [pc, #192]	; (8008970 <UART_SetConfig+0x2c8>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d12a      	bne.n	8008908 <UART_SetConfig+0x260>
 80088b2:	4b31      	ldr	r3, [pc, #196]	; (8008978 <UART_SetConfig+0x2d0>)
 80088b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088c0:	d01a      	beq.n	80088f8 <UART_SetConfig+0x250>
 80088c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088c6:	d81b      	bhi.n	8008900 <UART_SetConfig+0x258>
 80088c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088cc:	d00c      	beq.n	80088e8 <UART_SetConfig+0x240>
 80088ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088d2:	d815      	bhi.n	8008900 <UART_SetConfig+0x258>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <UART_SetConfig+0x238>
 80088d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088dc:	d008      	beq.n	80088f0 <UART_SetConfig+0x248>
 80088de:	e00f      	b.n	8008900 <UART_SetConfig+0x258>
 80088e0:	2300      	movs	r3, #0
 80088e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e6:	e012      	b.n	800890e <UART_SetConfig+0x266>
 80088e8:	2302      	movs	r3, #2
 80088ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ee:	e00e      	b.n	800890e <UART_SetConfig+0x266>
 80088f0:	2304      	movs	r3, #4
 80088f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f6:	e00a      	b.n	800890e <UART_SetConfig+0x266>
 80088f8:	2308      	movs	r3, #8
 80088fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088fe:	e006      	b.n	800890e <UART_SetConfig+0x266>
 8008900:	2310      	movs	r3, #16
 8008902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008906:	e002      	b.n	800890e <UART_SetConfig+0x266>
 8008908:	2310      	movs	r3, #16
 800890a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a17      	ldr	r2, [pc, #92]	; (8008970 <UART_SetConfig+0x2c8>)
 8008914:	4293      	cmp	r3, r2
 8008916:	f040 808b 	bne.w	8008a30 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800891a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800891e:	2b08      	cmp	r3, #8
 8008920:	d834      	bhi.n	800898c <UART_SetConfig+0x2e4>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <UART_SetConfig+0x280>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	0800894d 	.word	0x0800894d
 800892c:	0800898d 	.word	0x0800898d
 8008930:	08008955 	.word	0x08008955
 8008934:	0800898d 	.word	0x0800898d
 8008938:	0800895b 	.word	0x0800895b
 800893c:	0800898d 	.word	0x0800898d
 8008940:	0800898d 	.word	0x0800898d
 8008944:	0800898d 	.word	0x0800898d
 8008948:	08008963 	.word	0x08008963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800894c:	f7fd fc00 	bl	8006150 <HAL_RCC_GetPCLK1Freq>
 8008950:	61f8      	str	r0, [r7, #28]
        break;
 8008952:	e021      	b.n	8008998 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <UART_SetConfig+0x2e0>)
 8008956:	61fb      	str	r3, [r7, #28]
        break;
 8008958:	e01e      	b.n	8008998 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800895a:	f7fd fb61 	bl	8006020 <HAL_RCC_GetSysClockFreq>
 800895e:	61f8      	str	r0, [r7, #28]
        break;
 8008960:	e01a      	b.n	8008998 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008966:	61fb      	str	r3, [r7, #28]
        break;
 8008968:	e016      	b.n	8008998 <UART_SetConfig+0x2f0>
 800896a:	bf00      	nop
 800896c:	efff69f3 	.word	0xefff69f3
 8008970:	40008000 	.word	0x40008000
 8008974:	40013800 	.word	0x40013800
 8008978:	40021000 	.word	0x40021000
 800897c:	40004400 	.word	0x40004400
 8008980:	40004800 	.word	0x40004800
 8008984:	40004c00 	.word	0x40004c00
 8008988:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008996:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80fa 	beq.w	8008b94 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	4613      	mov	r3, r2
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	4413      	add	r3, r2
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d305      	bcc.n	80089bc <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d903      	bls.n	80089c4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089c2:	e0e7      	b.n	8008b94 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2200      	movs	r2, #0
 80089c8:	461c      	mov	r4, r3
 80089ca:	4615      	mov	r5, r2
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	f04f 0300 	mov.w	r3, #0
 80089d4:	022b      	lsls	r3, r5, #8
 80089d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80089da:	0222      	lsls	r2, r4, #8
 80089dc:	68f9      	ldr	r1, [r7, #12]
 80089de:	6849      	ldr	r1, [r1, #4]
 80089e0:	0849      	lsrs	r1, r1, #1
 80089e2:	2000      	movs	r0, #0
 80089e4:	4688      	mov	r8, r1
 80089e6:	4681      	mov	r9, r0
 80089e8:	eb12 0a08 	adds.w	sl, r2, r8
 80089ec:	eb43 0b09 	adc.w	fp, r3, r9
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	607a      	str	r2, [r7, #4]
 80089fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089fe:	4650      	mov	r0, sl
 8008a00:	4659      	mov	r1, fp
 8008a02:	f7f8 f929 	bl	8000c58 <__aeabi_uldivmod>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a14:	d308      	bcc.n	8008a28 <UART_SetConfig+0x380>
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a1c:	d204      	bcs.n	8008a28 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	60da      	str	r2, [r3, #12]
 8008a26:	e0b5      	b.n	8008b94 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a2e:	e0b1      	b.n	8008b94 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a38:	d15d      	bne.n	8008af6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8008a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d827      	bhi.n	8008a92 <UART_SetConfig+0x3ea>
 8008a42:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0x3a0>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	08008a7d 	.word	0x08008a7d
 8008a54:	08008a93 	.word	0x08008a93
 8008a58:	08008a83 	.word	0x08008a83
 8008a5c:	08008a93 	.word	0x08008a93
 8008a60:	08008a93 	.word	0x08008a93
 8008a64:	08008a93 	.word	0x08008a93
 8008a68:	08008a8b 	.word	0x08008a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6c:	f7fd fb70 	bl	8006150 <HAL_RCC_GetPCLK1Freq>
 8008a70:	61f8      	str	r0, [r7, #28]
        break;
 8008a72:	e014      	b.n	8008a9e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a74:	f7fd fb82 	bl	800617c <HAL_RCC_GetPCLK2Freq>
 8008a78:	61f8      	str	r0, [r7, #28]
        break;
 8008a7a:	e010      	b.n	8008a9e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a7c:	4b4c      	ldr	r3, [pc, #304]	; (8008bb0 <UART_SetConfig+0x508>)
 8008a7e:	61fb      	str	r3, [r7, #28]
        break;
 8008a80:	e00d      	b.n	8008a9e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a82:	f7fd facd 	bl	8006020 <HAL_RCC_GetSysClockFreq>
 8008a86:	61f8      	str	r0, [r7, #28]
        break;
 8008a88:	e009      	b.n	8008a9e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a8e:	61fb      	str	r3, [r7, #28]
        break;
 8008a90:	e005      	b.n	8008a9e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d077      	beq.n	8008b94 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	005a      	lsls	r2, r3, #1
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	085b      	lsrs	r3, r3, #1
 8008aae:	441a      	add	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	d916      	bls.n	8008aee <UART_SetConfig+0x446>
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac6:	d212      	bcs.n	8008aee <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f023 030f 	bic.w	r3, r3, #15
 8008ad0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	085b      	lsrs	r3, r3, #1
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	8afb      	ldrh	r3, [r7, #22]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	8afa      	ldrh	r2, [r7, #22]
 8008aea:	60da      	str	r2, [r3, #12]
 8008aec:	e052      	b.n	8008b94 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008af4:	e04e      	b.n	8008b94 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d827      	bhi.n	8008b4e <UART_SetConfig+0x4a6>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0x45c>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b31 	.word	0x08008b31
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	08008b4f 	.word	0x08008b4f
 8008b14:	08008b3f 	.word	0x08008b3f
 8008b18:	08008b4f 	.word	0x08008b4f
 8008b1c:	08008b4f 	.word	0x08008b4f
 8008b20:	08008b4f 	.word	0x08008b4f
 8008b24:	08008b47 	.word	0x08008b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b28:	f7fd fb12 	bl	8006150 <HAL_RCC_GetPCLK1Freq>
 8008b2c:	61f8      	str	r0, [r7, #28]
        break;
 8008b2e:	e014      	b.n	8008b5a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b30:	f7fd fb24 	bl	800617c <HAL_RCC_GetPCLK2Freq>
 8008b34:	61f8      	str	r0, [r7, #28]
        break;
 8008b36:	e010      	b.n	8008b5a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b38:	4b1d      	ldr	r3, [pc, #116]	; (8008bb0 <UART_SetConfig+0x508>)
 8008b3a:	61fb      	str	r3, [r7, #28]
        break;
 8008b3c:	e00d      	b.n	8008b5a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b3e:	f7fd fa6f 	bl	8006020 <HAL_RCC_GetSysClockFreq>
 8008b42:	61f8      	str	r0, [r7, #28]
        break;
 8008b44:	e009      	b.n	8008b5a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4a:	61fb      	str	r3, [r7, #28]
        break;
 8008b4c:	e005      	b.n	8008b5a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b58:	bf00      	nop
    }

    if (pclk != 0U)
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d019      	beq.n	8008b94 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	085a      	lsrs	r2, r3, #1
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	441a      	add	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2b0f      	cmp	r3, #15
 8008b78:	d909      	bls.n	8008b8e <UART_SetConfig+0x4e6>
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b80:	d205      	bcs.n	8008b8e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60da      	str	r2, [r3, #12]
 8008b8c:	e002      	b.n	8008b94 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008ba0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3728      	adds	r7, #40	; 0x28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bae:	bf00      	nop
 8008bb0:	00f42400 	.word	0x00f42400

08008bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00a      	beq.n	8008bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00a      	beq.n	8008c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	f003 0308 	and.w	r3, r3, #8
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00a      	beq.n	8008c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	430a      	orrs	r2, r1
 8008c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	f003 0310 	and.w	r3, r3, #16
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00a      	beq.n	8008c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	f003 0320 	and.w	r3, r3, #32
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	430a      	orrs	r2, r1
 8008c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d01a      	beq.n	8008cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb2:	d10a      	bne.n	8008cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00a      	beq.n	8008cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	605a      	str	r2, [r3, #4]
  }
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d08:	f7f9 fe38 	bl	800297c <HAL_GetTick>
 8008d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0308 	and.w	r3, r3, #8
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d10e      	bne.n	8008d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f82d 	bl	8008d8a <UART_WaitOnFlagUntilTimeout>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e023      	b.n	8008d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d10e      	bne.n	8008d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f817 	bl	8008d8a <UART_WaitOnFlagUntilTimeout>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e00d      	b.n	8008d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b09c      	sub	sp, #112	; 0x70
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	603b      	str	r3, [r7, #0]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d9a:	e0a5      	b.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	f000 80a1 	beq.w	8008ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008da6:	f7f9 fde9 	bl	800297c <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d302      	bcc.n	8008dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8008db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d13e      	bne.n	8008e3a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ddc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e6      	bne.n	8008dbc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3308      	adds	r3, #8
 8008df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	f023 0301 	bic.w	r3, r3, #1
 8008e04:	663b      	str	r3, [r7, #96]	; 0x60
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3308      	adds	r3, #8
 8008e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e16:	e841 2300 	strex	r3, r2, [r1]
 8008e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e5      	bne.n	8008dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e067      	b.n	8008f0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d04f      	beq.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e56:	d147      	bne.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e60:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
 8008e82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e6      	bne.n	8008e62 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3308      	adds	r3, #8
 8008e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f023 0301 	bic.w	r3, r3, #1
 8008eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008eb4:	623a      	str	r2, [r7, #32]
 8008eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	69f9      	ldr	r1, [r7, #28]
 8008eba:	6a3a      	ldr	r2, [r7, #32]
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e5      	bne.n	8008e94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e010      	b.n	8008f0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	69da      	ldr	r2, [r3, #28]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	bf0c      	ite	eq
 8008ef8:	2301      	moveq	r3, #1
 8008efa:	2300      	movne	r3, #0
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	f43f af4a 	beq.w	8008d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3770      	adds	r7, #112	; 0x70
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b097      	sub	sp, #92	; 0x5c
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	88fa      	ldrh	r2, [r7, #6]
 8008f2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	88fa      	ldrh	r2, [r7, #6]
 8008f34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f46:	d10e      	bne.n	8008f66 <UART_Start_Receive_IT+0x52>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d105      	bne.n	8008f5c <UART_Start_Receive_IT+0x48>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f5a:	e02d      	b.n	8008fb8 <UART_Start_Receive_IT+0xa4>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	22ff      	movs	r2, #255	; 0xff
 8008f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f64:	e028      	b.n	8008fb8 <UART_Start_Receive_IT+0xa4>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10d      	bne.n	8008f8a <UART_Start_Receive_IT+0x76>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d104      	bne.n	8008f80 <UART_Start_Receive_IT+0x6c>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	22ff      	movs	r2, #255	; 0xff
 8008f7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f7e:	e01b      	b.n	8008fb8 <UART_Start_Receive_IT+0xa4>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	227f      	movs	r2, #127	; 0x7f
 8008f84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f88:	e016      	b.n	8008fb8 <UART_Start_Receive_IT+0xa4>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f92:	d10d      	bne.n	8008fb0 <UART_Start_Receive_IT+0x9c>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d104      	bne.n	8008fa6 <UART_Start_Receive_IT+0x92>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	227f      	movs	r2, #127	; 0x7f
 8008fa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fa4:	e008      	b.n	8008fb8 <UART_Start_Receive_IT+0xa4>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	223f      	movs	r2, #63	; 0x3f
 8008faa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fae:	e003      	b.n	8008fb8 <UART_Start_Receive_IT+0xa4>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2222      	movs	r2, #34	; 0x22
 8008fc4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	f043 0301 	orr.w	r3, r3, #1
 8008fdc:	657b      	str	r3, [r7, #84]	; 0x54
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e5      	bne.n	8008fc6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009002:	d107      	bne.n	8009014 <UART_Start_Receive_IT+0x100>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d103      	bne.n	8009014 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4a24      	ldr	r2, [pc, #144]	; (80090a0 <UART_Start_Receive_IT+0x18c>)
 8009010:	665a      	str	r2, [r3, #100]	; 0x64
 8009012:	e002      	b.n	800901a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4a23      	ldr	r2, [pc, #140]	; (80090a4 <UART_Start_Receive_IT+0x190>)
 8009018:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d019      	beq.n	800905e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800903e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	461a      	mov	r2, r3
 8009046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
 800904a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800904e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e6      	bne.n	800902a <UART_Start_Receive_IT+0x116>
 800905c:	e018      	b.n	8009090 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	613b      	str	r3, [r7, #16]
   return(result);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f043 0320 	orr.w	r3, r3, #32
 8009072:	653b      	str	r3, [r7, #80]	; 0x50
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	461a      	mov	r2, r3
 800907a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800907c:	623b      	str	r3, [r7, #32]
 800907e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	69f9      	ldr	r1, [r7, #28]
 8009082:	6a3a      	ldr	r2, [r7, #32]
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	61bb      	str	r3, [r7, #24]
   return(result);
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e6      	bne.n	800905e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	375c      	adds	r7, #92	; 0x5c
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	0800934f 	.word	0x0800934f
 80090a4:	080091ef 	.word	0x080091ef

080090a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b095      	sub	sp, #84	; 0x54
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ce:	643b      	str	r3, [r7, #64]	; 0x40
 80090d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e6      	bne.n	80090b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3308      	adds	r3, #8
 80090e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	e853 3f00 	ldrex	r3, [r3]
 80090f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e5      	bne.n	80090e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800911a:	2b01      	cmp	r3, #1
 800911c:	d118      	bne.n	8009150 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	60bb      	str	r3, [r7, #8]
   return(result);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f023 0310 	bic.w	r3, r3, #16
 8009132:	647b      	str	r3, [r7, #68]	; 0x44
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	461a      	mov	r2, r3
 800913a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800913c:	61bb      	str	r3, [r7, #24]
 800913e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	6979      	ldr	r1, [r7, #20]
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	e841 2300 	strex	r3, r2, [r1]
 8009148:	613b      	str	r3, [r7, #16]
   return(result);
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e6      	bne.n	800911e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2220      	movs	r2, #32
 8009154:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009162:	bf00      	nop
 8009164:	3754      	adds	r7, #84	; 0x54
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f7ff fa75 	bl	800867c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b088      	sub	sp, #32
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	e853 3f00 	ldrex	r3, [r3]
 80091ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b6:	61fb      	str	r3, [r7, #28]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	461a      	mov	r2, r3
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	61bb      	str	r3, [r7, #24]
 80091c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c4:	6979      	ldr	r1, [r7, #20]
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	e841 2300 	strex	r3, r2, [r1]
 80091cc:	613b      	str	r3, [r7, #16]
   return(result);
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e6      	bne.n	80091a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2220      	movs	r2, #32
 80091d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff fa41 	bl	8008668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091e6:	bf00      	nop
 80091e8:	3720      	adds	r7, #32
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b096      	sub	sp, #88	; 0x58
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009204:	2b22      	cmp	r3, #34	; 0x22
 8009206:	f040 8094 	bne.w	8009332 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009210:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009214:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009218:	b2d9      	uxtb	r1, r3
 800921a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800921e:	b2da      	uxtb	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009224:	400a      	ands	r2, r1
 8009226:	b2d2      	uxtb	r2, r2
 8009228:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800923a:	b29b      	uxth	r3, r3
 800923c:	3b01      	subs	r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800924c:	b29b      	uxth	r3, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	d179      	bne.n	8009346 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009266:	653b      	str	r3, [r7, #80]	; 0x50
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	461a      	mov	r2, r3
 800926e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009270:	647b      	str	r3, [r7, #68]	; 0x44
 8009272:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009274:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009278:	e841 2300 	strex	r3, r2, [r1]
 800927c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800927e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e6      	bne.n	8009252 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3308      	adds	r3, #8
 800928a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	623b      	str	r3, [r7, #32]
   return(result);
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	f023 0301 	bic.w	r3, r3, #1
 800929a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3308      	adds	r3, #8
 80092a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092a4:	633a      	str	r2, [r7, #48]	; 0x30
 80092a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e5      	bne.n	8009284 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d12e      	bne.n	800932a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	60fb      	str	r3, [r7, #12]
   return(result);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f023 0310 	bic.w	r3, r3, #16
 80092e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f0:	61fb      	str	r3, [r7, #28]
 80092f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	69b9      	ldr	r1, [r7, #24]
 80092f6:	69fa      	ldr	r2, [r7, #28]
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	617b      	str	r3, [r7, #20]
   return(result);
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e6      	bne.n	80092d2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	f003 0310 	and.w	r3, r3, #16
 800930e:	2b10      	cmp	r3, #16
 8009310:	d103      	bne.n	800931a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2210      	movs	r2, #16
 8009318:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff f9b4 	bl	8008690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009328:	e00d      	b.n	8009346 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7f8 fb6e 	bl	8001a0c <HAL_UART_RxCpltCallback>
}
 8009330:	e009      	b.n	8009346 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	8b1b      	ldrh	r3, [r3, #24]
 8009338:	b29a      	uxth	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0208 	orr.w	r2, r2, #8
 8009342:	b292      	uxth	r2, r2
 8009344:	831a      	strh	r2, [r3, #24]
}
 8009346:	bf00      	nop
 8009348:	3758      	adds	r7, #88	; 0x58
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b096      	sub	sp, #88	; 0x58
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800935c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009364:	2b22      	cmp	r3, #34	; 0x22
 8009366:	f040 8094 	bne.w	8009492 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009370:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009378:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800937a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800937e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009382:	4013      	ands	r3, r2
 8009384:	b29a      	uxth	r2, r3
 8009386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009388:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938e:	1c9a      	adds	r2, r3, #2
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800939a:	b29b      	uxth	r3, r3
 800939c:	3b01      	subs	r3, #1
 800939e:	b29a      	uxth	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d179      	bne.n	80094a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	461a      	mov	r2, r3
 80093ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d0:	643b      	str	r3, [r7, #64]	; 0x40
 80093d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e6      	bne.n	80093b2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	f023 0301 	bic.w	r3, r3, #1
 80093fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3308      	adds	r3, #8
 8009402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800940a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800940c:	e841 2300 	strex	r3, r2, [r1]
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1e5      	bne.n	80093e4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2220      	movs	r2, #32
 800941c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009428:	2b01      	cmp	r3, #1
 800942a:	d12e      	bne.n	800948a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f023 0310 	bic.w	r3, r3, #16
 8009446:	647b      	str	r3, [r7, #68]	; 0x44
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009450:	61bb      	str	r3, [r7, #24]
 8009452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6979      	ldr	r1, [r7, #20]
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	613b      	str	r3, [r7, #16]
   return(result);
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e6      	bne.n	8009432 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f003 0310 	and.w	r3, r3, #16
 800946e:	2b10      	cmp	r3, #16
 8009470:	d103      	bne.n	800947a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2210      	movs	r2, #16
 8009478:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7ff f904 	bl	8008690 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009488:	e00d      	b.n	80094a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7f8 fabe 	bl	8001a0c <HAL_UART_RxCpltCallback>
}
 8009490:	e009      	b.n	80094a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	8b1b      	ldrh	r3, [r3, #24]
 8009498:	b29a      	uxth	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0208 	orr.w	r2, r2, #8
 80094a2:	b292      	uxth	r2, r2
 80094a4:	831a      	strh	r2, [r3, #24]
}
 80094a6:	bf00      	nop
 80094a8:	3758      	adds	r7, #88	; 0x58
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b083      	sub	sp, #12
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <atoi>:
 80094c2:	220a      	movs	r2, #10
 80094c4:	2100      	movs	r1, #0
 80094c6:	f000 bd37 	b.w	8009f38 <strtol>
	...

080094cc <__errno>:
 80094cc:	4b01      	ldr	r3, [pc, #4]	; (80094d4 <__errno+0x8>)
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000010 	.word	0x20000010

080094d8 <__libc_init_array>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	4d0d      	ldr	r5, [pc, #52]	; (8009510 <__libc_init_array+0x38>)
 80094dc:	4c0d      	ldr	r4, [pc, #52]	; (8009514 <__libc_init_array+0x3c>)
 80094de:	1b64      	subs	r4, r4, r5
 80094e0:	10a4      	asrs	r4, r4, #2
 80094e2:	2600      	movs	r6, #0
 80094e4:	42a6      	cmp	r6, r4
 80094e6:	d109      	bne.n	80094fc <__libc_init_array+0x24>
 80094e8:	4d0b      	ldr	r5, [pc, #44]	; (8009518 <__libc_init_array+0x40>)
 80094ea:	4c0c      	ldr	r4, [pc, #48]	; (800951c <__libc_init_array+0x44>)
 80094ec:	f002 fddc 	bl	800c0a8 <_init>
 80094f0:	1b64      	subs	r4, r4, r5
 80094f2:	10a4      	asrs	r4, r4, #2
 80094f4:	2600      	movs	r6, #0
 80094f6:	42a6      	cmp	r6, r4
 80094f8:	d105      	bne.n	8009506 <__libc_init_array+0x2e>
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009500:	4798      	blx	r3
 8009502:	3601      	adds	r6, #1
 8009504:	e7ee      	b.n	80094e4 <__libc_init_array+0xc>
 8009506:	f855 3b04 	ldr.w	r3, [r5], #4
 800950a:	4798      	blx	r3
 800950c:	3601      	adds	r6, #1
 800950e:	e7f2      	b.n	80094f6 <__libc_init_array+0x1e>
 8009510:	0800c5d4 	.word	0x0800c5d4
 8009514:	0800c5d4 	.word	0x0800c5d4
 8009518:	0800c5d4 	.word	0x0800c5d4
 800951c:	0800c5d8 	.word	0x0800c5d8

08009520 <memset>:
 8009520:	4402      	add	r2, r0
 8009522:	4603      	mov	r3, r0
 8009524:	4293      	cmp	r3, r2
 8009526:	d100      	bne.n	800952a <memset+0xa>
 8009528:	4770      	bx	lr
 800952a:	f803 1b01 	strb.w	r1, [r3], #1
 800952e:	e7f9      	b.n	8009524 <memset+0x4>

08009530 <__cvt>:
 8009530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009534:	ec55 4b10 	vmov	r4, r5, d0
 8009538:	2d00      	cmp	r5, #0
 800953a:	460e      	mov	r6, r1
 800953c:	4619      	mov	r1, r3
 800953e:	462b      	mov	r3, r5
 8009540:	bfbb      	ittet	lt
 8009542:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009546:	461d      	movlt	r5, r3
 8009548:	2300      	movge	r3, #0
 800954a:	232d      	movlt	r3, #45	; 0x2d
 800954c:	700b      	strb	r3, [r1, #0]
 800954e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009554:	4691      	mov	r9, r2
 8009556:	f023 0820 	bic.w	r8, r3, #32
 800955a:	bfbc      	itt	lt
 800955c:	4622      	movlt	r2, r4
 800955e:	4614      	movlt	r4, r2
 8009560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009564:	d005      	beq.n	8009572 <__cvt+0x42>
 8009566:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800956a:	d100      	bne.n	800956e <__cvt+0x3e>
 800956c:	3601      	adds	r6, #1
 800956e:	2102      	movs	r1, #2
 8009570:	e000      	b.n	8009574 <__cvt+0x44>
 8009572:	2103      	movs	r1, #3
 8009574:	ab03      	add	r3, sp, #12
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	ab02      	add	r3, sp, #8
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	ec45 4b10 	vmov	d0, r4, r5
 8009580:	4653      	mov	r3, sl
 8009582:	4632      	mov	r2, r6
 8009584:	f000 fd70 	bl	800a068 <_dtoa_r>
 8009588:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800958c:	4607      	mov	r7, r0
 800958e:	d102      	bne.n	8009596 <__cvt+0x66>
 8009590:	f019 0f01 	tst.w	r9, #1
 8009594:	d022      	beq.n	80095dc <__cvt+0xac>
 8009596:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800959a:	eb07 0906 	add.w	r9, r7, r6
 800959e:	d110      	bne.n	80095c2 <__cvt+0x92>
 80095a0:	783b      	ldrb	r3, [r7, #0]
 80095a2:	2b30      	cmp	r3, #48	; 0x30
 80095a4:	d10a      	bne.n	80095bc <__cvt+0x8c>
 80095a6:	2200      	movs	r2, #0
 80095a8:	2300      	movs	r3, #0
 80095aa:	4620      	mov	r0, r4
 80095ac:	4629      	mov	r1, r5
 80095ae:	f7f7 fa93 	bl	8000ad8 <__aeabi_dcmpeq>
 80095b2:	b918      	cbnz	r0, 80095bc <__cvt+0x8c>
 80095b4:	f1c6 0601 	rsb	r6, r6, #1
 80095b8:	f8ca 6000 	str.w	r6, [sl]
 80095bc:	f8da 3000 	ldr.w	r3, [sl]
 80095c0:	4499      	add	r9, r3
 80095c2:	2200      	movs	r2, #0
 80095c4:	2300      	movs	r3, #0
 80095c6:	4620      	mov	r0, r4
 80095c8:	4629      	mov	r1, r5
 80095ca:	f7f7 fa85 	bl	8000ad8 <__aeabi_dcmpeq>
 80095ce:	b108      	cbz	r0, 80095d4 <__cvt+0xa4>
 80095d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80095d4:	2230      	movs	r2, #48	; 0x30
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	454b      	cmp	r3, r9
 80095da:	d307      	bcc.n	80095ec <__cvt+0xbc>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095e0:	1bdb      	subs	r3, r3, r7
 80095e2:	4638      	mov	r0, r7
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	b004      	add	sp, #16
 80095e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ec:	1c59      	adds	r1, r3, #1
 80095ee:	9103      	str	r1, [sp, #12]
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	e7f0      	b.n	80095d6 <__cvt+0xa6>

080095f4 <__exponent>:
 80095f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095f6:	4603      	mov	r3, r0
 80095f8:	2900      	cmp	r1, #0
 80095fa:	bfb8      	it	lt
 80095fc:	4249      	neglt	r1, r1
 80095fe:	f803 2b02 	strb.w	r2, [r3], #2
 8009602:	bfb4      	ite	lt
 8009604:	222d      	movlt	r2, #45	; 0x2d
 8009606:	222b      	movge	r2, #43	; 0x2b
 8009608:	2909      	cmp	r1, #9
 800960a:	7042      	strb	r2, [r0, #1]
 800960c:	dd2a      	ble.n	8009664 <__exponent+0x70>
 800960e:	f10d 0407 	add.w	r4, sp, #7
 8009612:	46a4      	mov	ip, r4
 8009614:	270a      	movs	r7, #10
 8009616:	46a6      	mov	lr, r4
 8009618:	460a      	mov	r2, r1
 800961a:	fb91 f6f7 	sdiv	r6, r1, r7
 800961e:	fb07 1516 	mls	r5, r7, r6, r1
 8009622:	3530      	adds	r5, #48	; 0x30
 8009624:	2a63      	cmp	r2, #99	; 0x63
 8009626:	f104 34ff 	add.w	r4, r4, #4294967295
 800962a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800962e:	4631      	mov	r1, r6
 8009630:	dcf1      	bgt.n	8009616 <__exponent+0x22>
 8009632:	3130      	adds	r1, #48	; 0x30
 8009634:	f1ae 0502 	sub.w	r5, lr, #2
 8009638:	f804 1c01 	strb.w	r1, [r4, #-1]
 800963c:	1c44      	adds	r4, r0, #1
 800963e:	4629      	mov	r1, r5
 8009640:	4561      	cmp	r1, ip
 8009642:	d30a      	bcc.n	800965a <__exponent+0x66>
 8009644:	f10d 0209 	add.w	r2, sp, #9
 8009648:	eba2 020e 	sub.w	r2, r2, lr
 800964c:	4565      	cmp	r5, ip
 800964e:	bf88      	it	hi
 8009650:	2200      	movhi	r2, #0
 8009652:	4413      	add	r3, r2
 8009654:	1a18      	subs	r0, r3, r0
 8009656:	b003      	add	sp, #12
 8009658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800965e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009662:	e7ed      	b.n	8009640 <__exponent+0x4c>
 8009664:	2330      	movs	r3, #48	; 0x30
 8009666:	3130      	adds	r1, #48	; 0x30
 8009668:	7083      	strb	r3, [r0, #2]
 800966a:	70c1      	strb	r1, [r0, #3]
 800966c:	1d03      	adds	r3, r0, #4
 800966e:	e7f1      	b.n	8009654 <__exponent+0x60>

08009670 <_printf_float>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	ed2d 8b02 	vpush	{d8}
 8009678:	b08d      	sub	sp, #52	; 0x34
 800967a:	460c      	mov	r4, r1
 800967c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009680:	4616      	mov	r6, r2
 8009682:	461f      	mov	r7, r3
 8009684:	4605      	mov	r5, r0
 8009686:	f001 fbd3 	bl	800ae30 <_localeconv_r>
 800968a:	f8d0 a000 	ldr.w	sl, [r0]
 800968e:	4650      	mov	r0, sl
 8009690:	f7f6 fda6 	bl	80001e0 <strlen>
 8009694:	2300      	movs	r3, #0
 8009696:	930a      	str	r3, [sp, #40]	; 0x28
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	9305      	str	r3, [sp, #20]
 800969c:	f8d8 3000 	ldr.w	r3, [r8]
 80096a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096a4:	3307      	adds	r3, #7
 80096a6:	f023 0307 	bic.w	r3, r3, #7
 80096aa:	f103 0208 	add.w	r2, r3, #8
 80096ae:	f8c8 2000 	str.w	r2, [r8]
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80096ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80096be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096c2:	9307      	str	r3, [sp, #28]
 80096c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80096c8:	ee08 0a10 	vmov	s16, r0
 80096cc:	4b9f      	ldr	r3, [pc, #636]	; (800994c <_printf_float+0x2dc>)
 80096ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096d2:	f04f 32ff 	mov.w	r2, #4294967295
 80096d6:	f7f7 fa31 	bl	8000b3c <__aeabi_dcmpun>
 80096da:	bb88      	cbnz	r0, 8009740 <_printf_float+0xd0>
 80096dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096e0:	4b9a      	ldr	r3, [pc, #616]	; (800994c <_printf_float+0x2dc>)
 80096e2:	f04f 32ff 	mov.w	r2, #4294967295
 80096e6:	f7f7 fa0b 	bl	8000b00 <__aeabi_dcmple>
 80096ea:	bb48      	cbnz	r0, 8009740 <_printf_float+0xd0>
 80096ec:	2200      	movs	r2, #0
 80096ee:	2300      	movs	r3, #0
 80096f0:	4640      	mov	r0, r8
 80096f2:	4649      	mov	r1, r9
 80096f4:	f7f7 f9fa 	bl	8000aec <__aeabi_dcmplt>
 80096f8:	b110      	cbz	r0, 8009700 <_printf_float+0x90>
 80096fa:	232d      	movs	r3, #45	; 0x2d
 80096fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009700:	4b93      	ldr	r3, [pc, #588]	; (8009950 <_printf_float+0x2e0>)
 8009702:	4894      	ldr	r0, [pc, #592]	; (8009954 <_printf_float+0x2e4>)
 8009704:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009708:	bf94      	ite	ls
 800970a:	4698      	movls	r8, r3
 800970c:	4680      	movhi	r8, r0
 800970e:	2303      	movs	r3, #3
 8009710:	6123      	str	r3, [r4, #16]
 8009712:	9b05      	ldr	r3, [sp, #20]
 8009714:	f023 0204 	bic.w	r2, r3, #4
 8009718:	6022      	str	r2, [r4, #0]
 800971a:	f04f 0900 	mov.w	r9, #0
 800971e:	9700      	str	r7, [sp, #0]
 8009720:	4633      	mov	r3, r6
 8009722:	aa0b      	add	r2, sp, #44	; 0x2c
 8009724:	4621      	mov	r1, r4
 8009726:	4628      	mov	r0, r5
 8009728:	f000 f9d8 	bl	8009adc <_printf_common>
 800972c:	3001      	adds	r0, #1
 800972e:	f040 8090 	bne.w	8009852 <_printf_float+0x1e2>
 8009732:	f04f 30ff 	mov.w	r0, #4294967295
 8009736:	b00d      	add	sp, #52	; 0x34
 8009738:	ecbd 8b02 	vpop	{d8}
 800973c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	4640      	mov	r0, r8
 8009746:	4649      	mov	r1, r9
 8009748:	f7f7 f9f8 	bl	8000b3c <__aeabi_dcmpun>
 800974c:	b140      	cbz	r0, 8009760 <_printf_float+0xf0>
 800974e:	464b      	mov	r3, r9
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfbc      	itt	lt
 8009754:	232d      	movlt	r3, #45	; 0x2d
 8009756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800975a:	487f      	ldr	r0, [pc, #508]	; (8009958 <_printf_float+0x2e8>)
 800975c:	4b7f      	ldr	r3, [pc, #508]	; (800995c <_printf_float+0x2ec>)
 800975e:	e7d1      	b.n	8009704 <_printf_float+0x94>
 8009760:	6863      	ldr	r3, [r4, #4]
 8009762:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009766:	9206      	str	r2, [sp, #24]
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	d13f      	bne.n	80097ec <_printf_float+0x17c>
 800976c:	2306      	movs	r3, #6
 800976e:	6063      	str	r3, [r4, #4]
 8009770:	9b05      	ldr	r3, [sp, #20]
 8009772:	6861      	ldr	r1, [r4, #4]
 8009774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009778:	2300      	movs	r3, #0
 800977a:	9303      	str	r3, [sp, #12]
 800977c:	ab0a      	add	r3, sp, #40	; 0x28
 800977e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009782:	ab09      	add	r3, sp, #36	; 0x24
 8009784:	ec49 8b10 	vmov	d0, r8, r9
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	6022      	str	r2, [r4, #0]
 800978c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009790:	4628      	mov	r0, r5
 8009792:	f7ff fecd 	bl	8009530 <__cvt>
 8009796:	9b06      	ldr	r3, [sp, #24]
 8009798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800979a:	2b47      	cmp	r3, #71	; 0x47
 800979c:	4680      	mov	r8, r0
 800979e:	d108      	bne.n	80097b2 <_printf_float+0x142>
 80097a0:	1cc8      	adds	r0, r1, #3
 80097a2:	db02      	blt.n	80097aa <_printf_float+0x13a>
 80097a4:	6863      	ldr	r3, [r4, #4]
 80097a6:	4299      	cmp	r1, r3
 80097a8:	dd41      	ble.n	800982e <_printf_float+0x1be>
 80097aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80097ae:	fa5f fb8b 	uxtb.w	fp, fp
 80097b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097b6:	d820      	bhi.n	80097fa <_printf_float+0x18a>
 80097b8:	3901      	subs	r1, #1
 80097ba:	465a      	mov	r2, fp
 80097bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097c0:	9109      	str	r1, [sp, #36]	; 0x24
 80097c2:	f7ff ff17 	bl	80095f4 <__exponent>
 80097c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097c8:	1813      	adds	r3, r2, r0
 80097ca:	2a01      	cmp	r2, #1
 80097cc:	4681      	mov	r9, r0
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	dc02      	bgt.n	80097d8 <_printf_float+0x168>
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	07d2      	lsls	r2, r2, #31
 80097d6:	d501      	bpl.n	80097dc <_printf_float+0x16c>
 80097d8:	3301      	adds	r3, #1
 80097da:	6123      	str	r3, [r4, #16]
 80097dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d09c      	beq.n	800971e <_printf_float+0xae>
 80097e4:	232d      	movs	r3, #45	; 0x2d
 80097e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ea:	e798      	b.n	800971e <_printf_float+0xae>
 80097ec:	9a06      	ldr	r2, [sp, #24]
 80097ee:	2a47      	cmp	r2, #71	; 0x47
 80097f0:	d1be      	bne.n	8009770 <_printf_float+0x100>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1bc      	bne.n	8009770 <_printf_float+0x100>
 80097f6:	2301      	movs	r3, #1
 80097f8:	e7b9      	b.n	800976e <_printf_float+0xfe>
 80097fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097fe:	d118      	bne.n	8009832 <_printf_float+0x1c2>
 8009800:	2900      	cmp	r1, #0
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	dd0b      	ble.n	800981e <_printf_float+0x1ae>
 8009806:	6121      	str	r1, [r4, #16]
 8009808:	b913      	cbnz	r3, 8009810 <_printf_float+0x1a0>
 800980a:	6822      	ldr	r2, [r4, #0]
 800980c:	07d0      	lsls	r0, r2, #31
 800980e:	d502      	bpl.n	8009816 <_printf_float+0x1a6>
 8009810:	3301      	adds	r3, #1
 8009812:	440b      	add	r3, r1
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	65a1      	str	r1, [r4, #88]	; 0x58
 8009818:	f04f 0900 	mov.w	r9, #0
 800981c:	e7de      	b.n	80097dc <_printf_float+0x16c>
 800981e:	b913      	cbnz	r3, 8009826 <_printf_float+0x1b6>
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	07d2      	lsls	r2, r2, #31
 8009824:	d501      	bpl.n	800982a <_printf_float+0x1ba>
 8009826:	3302      	adds	r3, #2
 8009828:	e7f4      	b.n	8009814 <_printf_float+0x1a4>
 800982a:	2301      	movs	r3, #1
 800982c:	e7f2      	b.n	8009814 <_printf_float+0x1a4>
 800982e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009834:	4299      	cmp	r1, r3
 8009836:	db05      	blt.n	8009844 <_printf_float+0x1d4>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	6121      	str	r1, [r4, #16]
 800983c:	07d8      	lsls	r0, r3, #31
 800983e:	d5ea      	bpl.n	8009816 <_printf_float+0x1a6>
 8009840:	1c4b      	adds	r3, r1, #1
 8009842:	e7e7      	b.n	8009814 <_printf_float+0x1a4>
 8009844:	2900      	cmp	r1, #0
 8009846:	bfd4      	ite	le
 8009848:	f1c1 0202 	rsble	r2, r1, #2
 800984c:	2201      	movgt	r2, #1
 800984e:	4413      	add	r3, r2
 8009850:	e7e0      	b.n	8009814 <_printf_float+0x1a4>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	055a      	lsls	r2, r3, #21
 8009856:	d407      	bmi.n	8009868 <_printf_float+0x1f8>
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	4642      	mov	r2, r8
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	47b8      	blx	r7
 8009862:	3001      	adds	r0, #1
 8009864:	d12c      	bne.n	80098c0 <_printf_float+0x250>
 8009866:	e764      	b.n	8009732 <_printf_float+0xc2>
 8009868:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800986c:	f240 80e0 	bls.w	8009a30 <_printf_float+0x3c0>
 8009870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009874:	2200      	movs	r2, #0
 8009876:	2300      	movs	r3, #0
 8009878:	f7f7 f92e 	bl	8000ad8 <__aeabi_dcmpeq>
 800987c:	2800      	cmp	r0, #0
 800987e:	d034      	beq.n	80098ea <_printf_float+0x27a>
 8009880:	4a37      	ldr	r2, [pc, #220]	; (8009960 <_printf_float+0x2f0>)
 8009882:	2301      	movs	r3, #1
 8009884:	4631      	mov	r1, r6
 8009886:	4628      	mov	r0, r5
 8009888:	47b8      	blx	r7
 800988a:	3001      	adds	r0, #1
 800988c:	f43f af51 	beq.w	8009732 <_printf_float+0xc2>
 8009890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009894:	429a      	cmp	r2, r3
 8009896:	db02      	blt.n	800989e <_printf_float+0x22e>
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	07d8      	lsls	r0, r3, #31
 800989c:	d510      	bpl.n	80098c0 <_printf_float+0x250>
 800989e:	ee18 3a10 	vmov	r3, s16
 80098a2:	4652      	mov	r2, sl
 80098a4:	4631      	mov	r1, r6
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	f43f af41 	beq.w	8009732 <_printf_float+0xc2>
 80098b0:	f04f 0800 	mov.w	r8, #0
 80098b4:	f104 091a 	add.w	r9, r4, #26
 80098b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ba:	3b01      	subs	r3, #1
 80098bc:	4543      	cmp	r3, r8
 80098be:	dc09      	bgt.n	80098d4 <_printf_float+0x264>
 80098c0:	6823      	ldr	r3, [r4, #0]
 80098c2:	079b      	lsls	r3, r3, #30
 80098c4:	f100 8105 	bmi.w	8009ad2 <_printf_float+0x462>
 80098c8:	68e0      	ldr	r0, [r4, #12]
 80098ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098cc:	4298      	cmp	r0, r3
 80098ce:	bfb8      	it	lt
 80098d0:	4618      	movlt	r0, r3
 80098d2:	e730      	b.n	8009736 <_printf_float+0xc6>
 80098d4:	2301      	movs	r3, #1
 80098d6:	464a      	mov	r2, r9
 80098d8:	4631      	mov	r1, r6
 80098da:	4628      	mov	r0, r5
 80098dc:	47b8      	blx	r7
 80098de:	3001      	adds	r0, #1
 80098e0:	f43f af27 	beq.w	8009732 <_printf_float+0xc2>
 80098e4:	f108 0801 	add.w	r8, r8, #1
 80098e8:	e7e6      	b.n	80098b8 <_printf_float+0x248>
 80098ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dc39      	bgt.n	8009964 <_printf_float+0x2f4>
 80098f0:	4a1b      	ldr	r2, [pc, #108]	; (8009960 <_printf_float+0x2f0>)
 80098f2:	2301      	movs	r3, #1
 80098f4:	4631      	mov	r1, r6
 80098f6:	4628      	mov	r0, r5
 80098f8:	47b8      	blx	r7
 80098fa:	3001      	adds	r0, #1
 80098fc:	f43f af19 	beq.w	8009732 <_printf_float+0xc2>
 8009900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009904:	4313      	orrs	r3, r2
 8009906:	d102      	bne.n	800990e <_printf_float+0x29e>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	07d9      	lsls	r1, r3, #31
 800990c:	d5d8      	bpl.n	80098c0 <_printf_float+0x250>
 800990e:	ee18 3a10 	vmov	r3, s16
 8009912:	4652      	mov	r2, sl
 8009914:	4631      	mov	r1, r6
 8009916:	4628      	mov	r0, r5
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	f43f af09 	beq.w	8009732 <_printf_float+0xc2>
 8009920:	f04f 0900 	mov.w	r9, #0
 8009924:	f104 0a1a 	add.w	sl, r4, #26
 8009928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800992a:	425b      	negs	r3, r3
 800992c:	454b      	cmp	r3, r9
 800992e:	dc01      	bgt.n	8009934 <_printf_float+0x2c4>
 8009930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009932:	e792      	b.n	800985a <_printf_float+0x1ea>
 8009934:	2301      	movs	r3, #1
 8009936:	4652      	mov	r2, sl
 8009938:	4631      	mov	r1, r6
 800993a:	4628      	mov	r0, r5
 800993c:	47b8      	blx	r7
 800993e:	3001      	adds	r0, #1
 8009940:	f43f aef7 	beq.w	8009732 <_printf_float+0xc2>
 8009944:	f109 0901 	add.w	r9, r9, #1
 8009948:	e7ee      	b.n	8009928 <_printf_float+0x2b8>
 800994a:	bf00      	nop
 800994c:	7fefffff 	.word	0x7fefffff
 8009950:	0800c1f0 	.word	0x0800c1f0
 8009954:	0800c1f4 	.word	0x0800c1f4
 8009958:	0800c1fc 	.word	0x0800c1fc
 800995c:	0800c1f8 	.word	0x0800c1f8
 8009960:	0800c200 	.word	0x0800c200
 8009964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009968:	429a      	cmp	r2, r3
 800996a:	bfa8      	it	ge
 800996c:	461a      	movge	r2, r3
 800996e:	2a00      	cmp	r2, #0
 8009970:	4691      	mov	r9, r2
 8009972:	dc37      	bgt.n	80099e4 <_printf_float+0x374>
 8009974:	f04f 0b00 	mov.w	fp, #0
 8009978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800997c:	f104 021a 	add.w	r2, r4, #26
 8009980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	eba3 0309 	sub.w	r3, r3, r9
 8009988:	455b      	cmp	r3, fp
 800998a:	dc33      	bgt.n	80099f4 <_printf_float+0x384>
 800998c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009990:	429a      	cmp	r2, r3
 8009992:	db3b      	blt.n	8009a0c <_printf_float+0x39c>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	07da      	lsls	r2, r3, #31
 8009998:	d438      	bmi.n	8009a0c <_printf_float+0x39c>
 800999a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800999c:	9a05      	ldr	r2, [sp, #20]
 800999e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099a0:	1a9a      	subs	r2, r3, r2
 80099a2:	eba3 0901 	sub.w	r9, r3, r1
 80099a6:	4591      	cmp	r9, r2
 80099a8:	bfa8      	it	ge
 80099aa:	4691      	movge	r9, r2
 80099ac:	f1b9 0f00 	cmp.w	r9, #0
 80099b0:	dc35      	bgt.n	8009a1e <_printf_float+0x3ae>
 80099b2:	f04f 0800 	mov.w	r8, #0
 80099b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099ba:	f104 0a1a 	add.w	sl, r4, #26
 80099be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099c2:	1a9b      	subs	r3, r3, r2
 80099c4:	eba3 0309 	sub.w	r3, r3, r9
 80099c8:	4543      	cmp	r3, r8
 80099ca:	f77f af79 	ble.w	80098c0 <_printf_float+0x250>
 80099ce:	2301      	movs	r3, #1
 80099d0:	4652      	mov	r2, sl
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f aeaa 	beq.w	8009732 <_printf_float+0xc2>
 80099de:	f108 0801 	add.w	r8, r8, #1
 80099e2:	e7ec      	b.n	80099be <_printf_float+0x34e>
 80099e4:	4613      	mov	r3, r2
 80099e6:	4631      	mov	r1, r6
 80099e8:	4642      	mov	r2, r8
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	d1c0      	bne.n	8009974 <_printf_float+0x304>
 80099f2:	e69e      	b.n	8009732 <_printf_float+0xc2>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4631      	mov	r1, r6
 80099f8:	4628      	mov	r0, r5
 80099fa:	9205      	str	r2, [sp, #20]
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f ae97 	beq.w	8009732 <_printf_float+0xc2>
 8009a04:	9a05      	ldr	r2, [sp, #20]
 8009a06:	f10b 0b01 	add.w	fp, fp, #1
 8009a0a:	e7b9      	b.n	8009980 <_printf_float+0x310>
 8009a0c:	ee18 3a10 	vmov	r3, s16
 8009a10:	4652      	mov	r2, sl
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d1be      	bne.n	800999a <_printf_float+0x32a>
 8009a1c:	e689      	b.n	8009732 <_printf_float+0xc2>
 8009a1e:	9a05      	ldr	r2, [sp, #20]
 8009a20:	464b      	mov	r3, r9
 8009a22:	4442      	add	r2, r8
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d1c1      	bne.n	80099b2 <_printf_float+0x342>
 8009a2e:	e680      	b.n	8009732 <_printf_float+0xc2>
 8009a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a32:	2a01      	cmp	r2, #1
 8009a34:	dc01      	bgt.n	8009a3a <_printf_float+0x3ca>
 8009a36:	07db      	lsls	r3, r3, #31
 8009a38:	d538      	bpl.n	8009aac <_printf_float+0x43c>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4628      	mov	r0, r5
 8009a42:	47b8      	blx	r7
 8009a44:	3001      	adds	r0, #1
 8009a46:	f43f ae74 	beq.w	8009732 <_printf_float+0xc2>
 8009a4a:	ee18 3a10 	vmov	r3, s16
 8009a4e:	4652      	mov	r2, sl
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	f43f ae6b 	beq.w	8009732 <_printf_float+0xc2>
 8009a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a60:	2200      	movs	r2, #0
 8009a62:	2300      	movs	r3, #0
 8009a64:	f7f7 f838 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a68:	b9d8      	cbnz	r0, 8009aa2 <_printf_float+0x432>
 8009a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a6c:	f108 0201 	add.w	r2, r8, #1
 8009a70:	3b01      	subs	r3, #1
 8009a72:	4631      	mov	r1, r6
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d10e      	bne.n	8009a9a <_printf_float+0x42a>
 8009a7c:	e659      	b.n	8009732 <_printf_float+0xc2>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4652      	mov	r2, sl
 8009a82:	4631      	mov	r1, r6
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b8      	blx	r7
 8009a88:	3001      	adds	r0, #1
 8009a8a:	f43f ae52 	beq.w	8009732 <_printf_float+0xc2>
 8009a8e:	f108 0801 	add.w	r8, r8, #1
 8009a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a94:	3b01      	subs	r3, #1
 8009a96:	4543      	cmp	r3, r8
 8009a98:	dcf1      	bgt.n	8009a7e <_printf_float+0x40e>
 8009a9a:	464b      	mov	r3, r9
 8009a9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009aa0:	e6dc      	b.n	800985c <_printf_float+0x1ec>
 8009aa2:	f04f 0800 	mov.w	r8, #0
 8009aa6:	f104 0a1a 	add.w	sl, r4, #26
 8009aaa:	e7f2      	b.n	8009a92 <_printf_float+0x422>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4642      	mov	r2, r8
 8009ab0:	e7df      	b.n	8009a72 <_printf_float+0x402>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	464a      	mov	r2, r9
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b8      	blx	r7
 8009abc:	3001      	adds	r0, #1
 8009abe:	f43f ae38 	beq.w	8009732 <_printf_float+0xc2>
 8009ac2:	f108 0801 	add.w	r8, r8, #1
 8009ac6:	68e3      	ldr	r3, [r4, #12]
 8009ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009aca:	1a5b      	subs	r3, r3, r1
 8009acc:	4543      	cmp	r3, r8
 8009ace:	dcf0      	bgt.n	8009ab2 <_printf_float+0x442>
 8009ad0:	e6fa      	b.n	80098c8 <_printf_float+0x258>
 8009ad2:	f04f 0800 	mov.w	r8, #0
 8009ad6:	f104 0919 	add.w	r9, r4, #25
 8009ada:	e7f4      	b.n	8009ac6 <_printf_float+0x456>

08009adc <_printf_common>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	4699      	mov	r9, r3
 8009ae4:	688a      	ldr	r2, [r1, #8]
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aec:	4293      	cmp	r3, r2
 8009aee:	bfb8      	it	lt
 8009af0:	4613      	movlt	r3, r2
 8009af2:	6033      	str	r3, [r6, #0]
 8009af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009af8:	4607      	mov	r7, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	b10a      	cbz	r2, 8009b02 <_printf_common+0x26>
 8009afe:	3301      	adds	r3, #1
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	0699      	lsls	r1, r3, #26
 8009b06:	bf42      	ittt	mi
 8009b08:	6833      	ldrmi	r3, [r6, #0]
 8009b0a:	3302      	addmi	r3, #2
 8009b0c:	6033      	strmi	r3, [r6, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	f015 0506 	ands.w	r5, r5, #6
 8009b14:	d106      	bne.n	8009b24 <_printf_common+0x48>
 8009b16:	f104 0a19 	add.w	sl, r4, #25
 8009b1a:	68e3      	ldr	r3, [r4, #12]
 8009b1c:	6832      	ldr	r2, [r6, #0]
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	42ab      	cmp	r3, r5
 8009b22:	dc26      	bgt.n	8009b72 <_printf_common+0x96>
 8009b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b28:	1e13      	subs	r3, r2, #0
 8009b2a:	6822      	ldr	r2, [r4, #0]
 8009b2c:	bf18      	it	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	0692      	lsls	r2, r2, #26
 8009b32:	d42b      	bmi.n	8009b8c <_printf_common+0xb0>
 8009b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b38:	4649      	mov	r1, r9
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	47c0      	blx	r8
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d01e      	beq.n	8009b80 <_printf_common+0xa4>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	68e5      	ldr	r5, [r4, #12]
 8009b46:	6832      	ldr	r2, [r6, #0]
 8009b48:	f003 0306 	and.w	r3, r3, #6
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	bf08      	it	eq
 8009b50:	1aad      	subeq	r5, r5, r2
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	6922      	ldr	r2, [r4, #16]
 8009b56:	bf0c      	ite	eq
 8009b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b5c:	2500      	movne	r5, #0
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	bfc4      	itt	gt
 8009b62:	1a9b      	subgt	r3, r3, r2
 8009b64:	18ed      	addgt	r5, r5, r3
 8009b66:	2600      	movs	r6, #0
 8009b68:	341a      	adds	r4, #26
 8009b6a:	42b5      	cmp	r5, r6
 8009b6c:	d11a      	bne.n	8009ba4 <_printf_common+0xc8>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e008      	b.n	8009b84 <_printf_common+0xa8>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4652      	mov	r2, sl
 8009b76:	4649      	mov	r1, r9
 8009b78:	4638      	mov	r0, r7
 8009b7a:	47c0      	blx	r8
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d103      	bne.n	8009b88 <_printf_common+0xac>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b88:	3501      	adds	r5, #1
 8009b8a:	e7c6      	b.n	8009b1a <_printf_common+0x3e>
 8009b8c:	18e1      	adds	r1, r4, r3
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	2030      	movs	r0, #48	; 0x30
 8009b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b96:	4422      	add	r2, r4
 8009b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	e7c7      	b.n	8009b34 <_printf_common+0x58>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4649      	mov	r1, r9
 8009baa:	4638      	mov	r0, r7
 8009bac:	47c0      	blx	r8
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d0e6      	beq.n	8009b80 <_printf_common+0xa4>
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7d9      	b.n	8009b6a <_printf_common+0x8e>
	...

08009bb8 <_printf_i>:
 8009bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	7e0f      	ldrb	r7, [r1, #24]
 8009bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bc0:	2f78      	cmp	r7, #120	; 0x78
 8009bc2:	4691      	mov	r9, r2
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	469a      	mov	sl, r3
 8009bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bce:	d807      	bhi.n	8009be0 <_printf_i+0x28>
 8009bd0:	2f62      	cmp	r7, #98	; 0x62
 8009bd2:	d80a      	bhi.n	8009bea <_printf_i+0x32>
 8009bd4:	2f00      	cmp	r7, #0
 8009bd6:	f000 80d8 	beq.w	8009d8a <_printf_i+0x1d2>
 8009bda:	2f58      	cmp	r7, #88	; 0x58
 8009bdc:	f000 80a3 	beq.w	8009d26 <_printf_i+0x16e>
 8009be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009be8:	e03a      	b.n	8009c60 <_printf_i+0xa8>
 8009bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bee:	2b15      	cmp	r3, #21
 8009bf0:	d8f6      	bhi.n	8009be0 <_printf_i+0x28>
 8009bf2:	a101      	add	r1, pc, #4	; (adr r1, 8009bf8 <_printf_i+0x40>)
 8009bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009be1 	.word	0x08009be1
 8009c04:	08009be1 	.word	0x08009be1
 8009c08:	08009be1 	.word	0x08009be1
 8009c0c:	08009be1 	.word	0x08009be1
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009be1 	.word	0x08009be1
 8009c18:	08009be1 	.word	0x08009be1
 8009c1c:	08009be1 	.word	0x08009be1
 8009c20:	08009be1 	.word	0x08009be1
 8009c24:	08009d71 	.word	0x08009d71
 8009c28:	08009c95 	.word	0x08009c95
 8009c2c:	08009d53 	.word	0x08009d53
 8009c30:	08009be1 	.word	0x08009be1
 8009c34:	08009be1 	.word	0x08009be1
 8009c38:	08009d93 	.word	0x08009d93
 8009c3c:	08009be1 	.word	0x08009be1
 8009c40:	08009c95 	.word	0x08009c95
 8009c44:	08009be1 	.word	0x08009be1
 8009c48:	08009be1 	.word	0x08009be1
 8009c4c:	08009d5b 	.word	0x08009d5b
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	1d1a      	adds	r2, r3, #4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	602a      	str	r2, [r5, #0]
 8009c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c60:	2301      	movs	r3, #1
 8009c62:	e0a3      	b.n	8009dac <_printf_i+0x1f4>
 8009c64:	6820      	ldr	r0, [r4, #0]
 8009c66:	6829      	ldr	r1, [r5, #0]
 8009c68:	0606      	lsls	r6, r0, #24
 8009c6a:	f101 0304 	add.w	r3, r1, #4
 8009c6e:	d50a      	bpl.n	8009c86 <_printf_i+0xce>
 8009c70:	680e      	ldr	r6, [r1, #0]
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	2e00      	cmp	r6, #0
 8009c76:	da03      	bge.n	8009c80 <_printf_i+0xc8>
 8009c78:	232d      	movs	r3, #45	; 0x2d
 8009c7a:	4276      	negs	r6, r6
 8009c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c80:	485e      	ldr	r0, [pc, #376]	; (8009dfc <_printf_i+0x244>)
 8009c82:	230a      	movs	r3, #10
 8009c84:	e019      	b.n	8009cba <_printf_i+0x102>
 8009c86:	680e      	ldr	r6, [r1, #0]
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c8e:	bf18      	it	ne
 8009c90:	b236      	sxthne	r6, r6
 8009c92:	e7ef      	b.n	8009c74 <_printf_i+0xbc>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	6820      	ldr	r0, [r4, #0]
 8009c98:	1d19      	adds	r1, r3, #4
 8009c9a:	6029      	str	r1, [r5, #0]
 8009c9c:	0601      	lsls	r1, r0, #24
 8009c9e:	d501      	bpl.n	8009ca4 <_printf_i+0xec>
 8009ca0:	681e      	ldr	r6, [r3, #0]
 8009ca2:	e002      	b.n	8009caa <_printf_i+0xf2>
 8009ca4:	0646      	lsls	r6, r0, #25
 8009ca6:	d5fb      	bpl.n	8009ca0 <_printf_i+0xe8>
 8009ca8:	881e      	ldrh	r6, [r3, #0]
 8009caa:	4854      	ldr	r0, [pc, #336]	; (8009dfc <_printf_i+0x244>)
 8009cac:	2f6f      	cmp	r7, #111	; 0x6f
 8009cae:	bf0c      	ite	eq
 8009cb0:	2308      	moveq	r3, #8
 8009cb2:	230a      	movne	r3, #10
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cba:	6865      	ldr	r5, [r4, #4]
 8009cbc:	60a5      	str	r5, [r4, #8]
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	bfa2      	ittt	ge
 8009cc2:	6821      	ldrge	r1, [r4, #0]
 8009cc4:	f021 0104 	bicge.w	r1, r1, #4
 8009cc8:	6021      	strge	r1, [r4, #0]
 8009cca:	b90e      	cbnz	r6, 8009cd0 <_printf_i+0x118>
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	d04d      	beq.n	8009d6c <_printf_i+0x1b4>
 8009cd0:	4615      	mov	r5, r2
 8009cd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cd6:	fb03 6711 	mls	r7, r3, r1, r6
 8009cda:	5dc7      	ldrb	r7, [r0, r7]
 8009cdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ce0:	4637      	mov	r7, r6
 8009ce2:	42bb      	cmp	r3, r7
 8009ce4:	460e      	mov	r6, r1
 8009ce6:	d9f4      	bls.n	8009cd2 <_printf_i+0x11a>
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d10b      	bne.n	8009d04 <_printf_i+0x14c>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	07de      	lsls	r6, r3, #31
 8009cf0:	d508      	bpl.n	8009d04 <_printf_i+0x14c>
 8009cf2:	6923      	ldr	r3, [r4, #16]
 8009cf4:	6861      	ldr	r1, [r4, #4]
 8009cf6:	4299      	cmp	r1, r3
 8009cf8:	bfde      	ittt	le
 8009cfa:	2330      	movle	r3, #48	; 0x30
 8009cfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d04:	1b52      	subs	r2, r2, r5
 8009d06:	6122      	str	r2, [r4, #16]
 8009d08:	f8cd a000 	str.w	sl, [sp]
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	aa03      	add	r2, sp, #12
 8009d10:	4621      	mov	r1, r4
 8009d12:	4640      	mov	r0, r8
 8009d14:	f7ff fee2 	bl	8009adc <_printf_common>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d14c      	bne.n	8009db6 <_printf_i+0x1fe>
 8009d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d20:	b004      	add	sp, #16
 8009d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d26:	4835      	ldr	r0, [pc, #212]	; (8009dfc <_printf_i+0x244>)
 8009d28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d2c:	6829      	ldr	r1, [r5, #0]
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d34:	6029      	str	r1, [r5, #0]
 8009d36:	061d      	lsls	r5, r3, #24
 8009d38:	d514      	bpl.n	8009d64 <_printf_i+0x1ac>
 8009d3a:	07df      	lsls	r7, r3, #31
 8009d3c:	bf44      	itt	mi
 8009d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d42:	6023      	strmi	r3, [r4, #0]
 8009d44:	b91e      	cbnz	r6, 8009d4e <_printf_i+0x196>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	f023 0320 	bic.w	r3, r3, #32
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	2310      	movs	r3, #16
 8009d50:	e7b0      	b.n	8009cb4 <_printf_i+0xfc>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	f043 0320 	orr.w	r3, r3, #32
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	2378      	movs	r3, #120	; 0x78
 8009d5c:	4828      	ldr	r0, [pc, #160]	; (8009e00 <_printf_i+0x248>)
 8009d5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d62:	e7e3      	b.n	8009d2c <_printf_i+0x174>
 8009d64:	0659      	lsls	r1, r3, #25
 8009d66:	bf48      	it	mi
 8009d68:	b2b6      	uxthmi	r6, r6
 8009d6a:	e7e6      	b.n	8009d3a <_printf_i+0x182>
 8009d6c:	4615      	mov	r5, r2
 8009d6e:	e7bb      	b.n	8009ce8 <_printf_i+0x130>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	6826      	ldr	r6, [r4, #0]
 8009d74:	6961      	ldr	r1, [r4, #20]
 8009d76:	1d18      	adds	r0, r3, #4
 8009d78:	6028      	str	r0, [r5, #0]
 8009d7a:	0635      	lsls	r5, r6, #24
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	d501      	bpl.n	8009d84 <_printf_i+0x1cc>
 8009d80:	6019      	str	r1, [r3, #0]
 8009d82:	e002      	b.n	8009d8a <_printf_i+0x1d2>
 8009d84:	0670      	lsls	r0, r6, #25
 8009d86:	d5fb      	bpl.n	8009d80 <_printf_i+0x1c8>
 8009d88:	8019      	strh	r1, [r3, #0]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	6123      	str	r3, [r4, #16]
 8009d8e:	4615      	mov	r5, r2
 8009d90:	e7ba      	b.n	8009d08 <_printf_i+0x150>
 8009d92:	682b      	ldr	r3, [r5, #0]
 8009d94:	1d1a      	adds	r2, r3, #4
 8009d96:	602a      	str	r2, [r5, #0]
 8009d98:	681d      	ldr	r5, [r3, #0]
 8009d9a:	6862      	ldr	r2, [r4, #4]
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f7f6 fa26 	bl	80001f0 <memchr>
 8009da4:	b108      	cbz	r0, 8009daa <_printf_i+0x1f2>
 8009da6:	1b40      	subs	r0, r0, r5
 8009da8:	6060      	str	r0, [r4, #4]
 8009daa:	6863      	ldr	r3, [r4, #4]
 8009dac:	6123      	str	r3, [r4, #16]
 8009dae:	2300      	movs	r3, #0
 8009db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db4:	e7a8      	b.n	8009d08 <_printf_i+0x150>
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	462a      	mov	r2, r5
 8009dba:	4649      	mov	r1, r9
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	47d0      	blx	sl
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d0ab      	beq.n	8009d1c <_printf_i+0x164>
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	079b      	lsls	r3, r3, #30
 8009dc8:	d413      	bmi.n	8009df2 <_printf_i+0x23a>
 8009dca:	68e0      	ldr	r0, [r4, #12]
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	4298      	cmp	r0, r3
 8009dd0:	bfb8      	it	lt
 8009dd2:	4618      	movlt	r0, r3
 8009dd4:	e7a4      	b.n	8009d20 <_printf_i+0x168>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4632      	mov	r2, r6
 8009dda:	4649      	mov	r1, r9
 8009ddc:	4640      	mov	r0, r8
 8009dde:	47d0      	blx	sl
 8009de0:	3001      	adds	r0, #1
 8009de2:	d09b      	beq.n	8009d1c <_printf_i+0x164>
 8009de4:	3501      	adds	r5, #1
 8009de6:	68e3      	ldr	r3, [r4, #12]
 8009de8:	9903      	ldr	r1, [sp, #12]
 8009dea:	1a5b      	subs	r3, r3, r1
 8009dec:	42ab      	cmp	r3, r5
 8009dee:	dcf2      	bgt.n	8009dd6 <_printf_i+0x21e>
 8009df0:	e7eb      	b.n	8009dca <_printf_i+0x212>
 8009df2:	2500      	movs	r5, #0
 8009df4:	f104 0619 	add.w	r6, r4, #25
 8009df8:	e7f5      	b.n	8009de6 <_printf_i+0x22e>
 8009dfa:	bf00      	nop
 8009dfc:	0800c202 	.word	0x0800c202
 8009e00:	0800c213 	.word	0x0800c213

08009e04 <iprintf>:
 8009e04:	b40f      	push	{r0, r1, r2, r3}
 8009e06:	4b0a      	ldr	r3, [pc, #40]	; (8009e30 <iprintf+0x2c>)
 8009e08:	b513      	push	{r0, r1, r4, lr}
 8009e0a:	681c      	ldr	r4, [r3, #0]
 8009e0c:	b124      	cbz	r4, 8009e18 <iprintf+0x14>
 8009e0e:	69a3      	ldr	r3, [r4, #24]
 8009e10:	b913      	cbnz	r3, 8009e18 <iprintf+0x14>
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 ff6e 	bl	800acf4 <__sinit>
 8009e18:	ab05      	add	r3, sp, #20
 8009e1a:	9a04      	ldr	r2, [sp, #16]
 8009e1c:	68a1      	ldr	r1, [r4, #8]
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	4620      	mov	r0, r4
 8009e22:	f001 fcc7 	bl	800b7b4 <_vfiprintf_r>
 8009e26:	b002      	add	sp, #8
 8009e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e2c:	b004      	add	sp, #16
 8009e2e:	4770      	bx	lr
 8009e30:	20000010 	.word	0x20000010

08009e34 <_strtol_l.constprop.0>:
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3a:	d001      	beq.n	8009e40 <_strtol_l.constprop.0+0xc>
 8009e3c:	2b24      	cmp	r3, #36	; 0x24
 8009e3e:	d906      	bls.n	8009e4e <_strtol_l.constprop.0+0x1a>
 8009e40:	f7ff fb44 	bl	80094cc <__errno>
 8009e44:	2316      	movs	r3, #22
 8009e46:	6003      	str	r3, [r0, #0]
 8009e48:	2000      	movs	r0, #0
 8009e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f34 <_strtol_l.constprop.0+0x100>
 8009e52:	460d      	mov	r5, r1
 8009e54:	462e      	mov	r6, r5
 8009e56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e5a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009e5e:	f017 0708 	ands.w	r7, r7, #8
 8009e62:	d1f7      	bne.n	8009e54 <_strtol_l.constprop.0+0x20>
 8009e64:	2c2d      	cmp	r4, #45	; 0x2d
 8009e66:	d132      	bne.n	8009ece <_strtol_l.constprop.0+0x9a>
 8009e68:	782c      	ldrb	r4, [r5, #0]
 8009e6a:	2701      	movs	r7, #1
 8009e6c:	1cb5      	adds	r5, r6, #2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d05b      	beq.n	8009f2a <_strtol_l.constprop.0+0xf6>
 8009e72:	2b10      	cmp	r3, #16
 8009e74:	d109      	bne.n	8009e8a <_strtol_l.constprop.0+0x56>
 8009e76:	2c30      	cmp	r4, #48	; 0x30
 8009e78:	d107      	bne.n	8009e8a <_strtol_l.constprop.0+0x56>
 8009e7a:	782c      	ldrb	r4, [r5, #0]
 8009e7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e80:	2c58      	cmp	r4, #88	; 0x58
 8009e82:	d14d      	bne.n	8009f20 <_strtol_l.constprop.0+0xec>
 8009e84:	786c      	ldrb	r4, [r5, #1]
 8009e86:	2310      	movs	r3, #16
 8009e88:	3502      	adds	r5, #2
 8009e8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e92:	f04f 0c00 	mov.w	ip, #0
 8009e96:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e9a:	4666      	mov	r6, ip
 8009e9c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ea0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009ea4:	f1be 0f09 	cmp.w	lr, #9
 8009ea8:	d816      	bhi.n	8009ed8 <_strtol_l.constprop.0+0xa4>
 8009eaa:	4674      	mov	r4, lr
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	dd24      	ble.n	8009efa <_strtol_l.constprop.0+0xc6>
 8009eb0:	f1bc 0f00 	cmp.w	ip, #0
 8009eb4:	db1e      	blt.n	8009ef4 <_strtol_l.constprop.0+0xc0>
 8009eb6:	45b1      	cmp	r9, r6
 8009eb8:	d31c      	bcc.n	8009ef4 <_strtol_l.constprop.0+0xc0>
 8009eba:	d101      	bne.n	8009ec0 <_strtol_l.constprop.0+0x8c>
 8009ebc:	45a2      	cmp	sl, r4
 8009ebe:	db19      	blt.n	8009ef4 <_strtol_l.constprop.0+0xc0>
 8009ec0:	fb06 4603 	mla	r6, r6, r3, r4
 8009ec4:	f04f 0c01 	mov.w	ip, #1
 8009ec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ecc:	e7e8      	b.n	8009ea0 <_strtol_l.constprop.0+0x6c>
 8009ece:	2c2b      	cmp	r4, #43	; 0x2b
 8009ed0:	bf04      	itt	eq
 8009ed2:	782c      	ldrbeq	r4, [r5, #0]
 8009ed4:	1cb5      	addeq	r5, r6, #2
 8009ed6:	e7ca      	b.n	8009e6e <_strtol_l.constprop.0+0x3a>
 8009ed8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009edc:	f1be 0f19 	cmp.w	lr, #25
 8009ee0:	d801      	bhi.n	8009ee6 <_strtol_l.constprop.0+0xb2>
 8009ee2:	3c37      	subs	r4, #55	; 0x37
 8009ee4:	e7e2      	b.n	8009eac <_strtol_l.constprop.0+0x78>
 8009ee6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009eea:	f1be 0f19 	cmp.w	lr, #25
 8009eee:	d804      	bhi.n	8009efa <_strtol_l.constprop.0+0xc6>
 8009ef0:	3c57      	subs	r4, #87	; 0x57
 8009ef2:	e7db      	b.n	8009eac <_strtol_l.constprop.0+0x78>
 8009ef4:	f04f 3cff 	mov.w	ip, #4294967295
 8009ef8:	e7e6      	b.n	8009ec8 <_strtol_l.constprop.0+0x94>
 8009efa:	f1bc 0f00 	cmp.w	ip, #0
 8009efe:	da05      	bge.n	8009f0c <_strtol_l.constprop.0+0xd8>
 8009f00:	2322      	movs	r3, #34	; 0x22
 8009f02:	6003      	str	r3, [r0, #0]
 8009f04:	4646      	mov	r6, r8
 8009f06:	b942      	cbnz	r2, 8009f1a <_strtol_l.constprop.0+0xe6>
 8009f08:	4630      	mov	r0, r6
 8009f0a:	e79e      	b.n	8009e4a <_strtol_l.constprop.0+0x16>
 8009f0c:	b107      	cbz	r7, 8009f10 <_strtol_l.constprop.0+0xdc>
 8009f0e:	4276      	negs	r6, r6
 8009f10:	2a00      	cmp	r2, #0
 8009f12:	d0f9      	beq.n	8009f08 <_strtol_l.constprop.0+0xd4>
 8009f14:	f1bc 0f00 	cmp.w	ip, #0
 8009f18:	d000      	beq.n	8009f1c <_strtol_l.constprop.0+0xe8>
 8009f1a:	1e69      	subs	r1, r5, #1
 8009f1c:	6011      	str	r1, [r2, #0]
 8009f1e:	e7f3      	b.n	8009f08 <_strtol_l.constprop.0+0xd4>
 8009f20:	2430      	movs	r4, #48	; 0x30
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1b1      	bne.n	8009e8a <_strtol_l.constprop.0+0x56>
 8009f26:	2308      	movs	r3, #8
 8009f28:	e7af      	b.n	8009e8a <_strtol_l.constprop.0+0x56>
 8009f2a:	2c30      	cmp	r4, #48	; 0x30
 8009f2c:	d0a5      	beq.n	8009e7a <_strtol_l.constprop.0+0x46>
 8009f2e:	230a      	movs	r3, #10
 8009f30:	e7ab      	b.n	8009e8a <_strtol_l.constprop.0+0x56>
 8009f32:	bf00      	nop
 8009f34:	0800c225 	.word	0x0800c225

08009f38 <strtol>:
 8009f38:	4613      	mov	r3, r2
 8009f3a:	460a      	mov	r2, r1
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	4802      	ldr	r0, [pc, #8]	; (8009f48 <strtol+0x10>)
 8009f40:	6800      	ldr	r0, [r0, #0]
 8009f42:	f7ff bf77 	b.w	8009e34 <_strtol_l.constprop.0>
 8009f46:	bf00      	nop
 8009f48:	20000010 	.word	0x20000010

08009f4c <quorem>:
 8009f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f50:	6903      	ldr	r3, [r0, #16]
 8009f52:	690c      	ldr	r4, [r1, #16]
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	4607      	mov	r7, r0
 8009f58:	f2c0 8081 	blt.w	800a05e <quorem+0x112>
 8009f5c:	3c01      	subs	r4, #1
 8009f5e:	f101 0814 	add.w	r8, r1, #20
 8009f62:	f100 0514 	add.w	r5, r0, #20
 8009f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f74:	3301      	adds	r3, #1
 8009f76:	429a      	cmp	r2, r3
 8009f78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f80:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f84:	d331      	bcc.n	8009fea <quorem+0x9e>
 8009f86:	f04f 0e00 	mov.w	lr, #0
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	46ac      	mov	ip, r5
 8009f8e:	46f2      	mov	sl, lr
 8009f90:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f94:	b293      	uxth	r3, r2
 8009f96:	fb06 e303 	mla	r3, r6, r3, lr
 8009f9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	ebaa 0303 	sub.w	r3, sl, r3
 8009fa4:	f8dc a000 	ldr.w	sl, [ip]
 8009fa8:	0c12      	lsrs	r2, r2, #16
 8009faa:	fa13 f38a 	uxtah	r3, r3, sl
 8009fae:	fb06 e202 	mla	r2, r6, r2, lr
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	9b00      	ldr	r3, [sp, #0]
 8009fb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fba:	b292      	uxth	r2, r2
 8009fbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fc4:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fc8:	4581      	cmp	r9, r0
 8009fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fce:	f84c 3b04 	str.w	r3, [ip], #4
 8009fd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fd6:	d2db      	bcs.n	8009f90 <quorem+0x44>
 8009fd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fdc:	b92b      	cbnz	r3, 8009fea <quorem+0x9e>
 8009fde:	9b01      	ldr	r3, [sp, #4]
 8009fe0:	3b04      	subs	r3, #4
 8009fe2:	429d      	cmp	r5, r3
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	d32e      	bcc.n	800a046 <quorem+0xfa>
 8009fe8:	613c      	str	r4, [r7, #16]
 8009fea:	4638      	mov	r0, r7
 8009fec:	f001 f9c0 	bl	800b370 <__mcmp>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	db24      	blt.n	800a03e <quorem+0xf2>
 8009ff4:	3601      	adds	r6, #1
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f04f 0c00 	mov.w	ip, #0
 8009ffc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a000:	f8d0 e000 	ldr.w	lr, [r0]
 800a004:	b293      	uxth	r3, r2
 800a006:	ebac 0303 	sub.w	r3, ip, r3
 800a00a:	0c12      	lsrs	r2, r2, #16
 800a00c:	fa13 f38e 	uxtah	r3, r3, lr
 800a010:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a018:	b29b      	uxth	r3, r3
 800a01a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a01e:	45c1      	cmp	r9, r8
 800a020:	f840 3b04 	str.w	r3, [r0], #4
 800a024:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a028:	d2e8      	bcs.n	8009ffc <quorem+0xb0>
 800a02a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a02e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a032:	b922      	cbnz	r2, 800a03e <quorem+0xf2>
 800a034:	3b04      	subs	r3, #4
 800a036:	429d      	cmp	r5, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	d30a      	bcc.n	800a052 <quorem+0x106>
 800a03c:	613c      	str	r4, [r7, #16]
 800a03e:	4630      	mov	r0, r6
 800a040:	b003      	add	sp, #12
 800a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a046:	6812      	ldr	r2, [r2, #0]
 800a048:	3b04      	subs	r3, #4
 800a04a:	2a00      	cmp	r2, #0
 800a04c:	d1cc      	bne.n	8009fe8 <quorem+0x9c>
 800a04e:	3c01      	subs	r4, #1
 800a050:	e7c7      	b.n	8009fe2 <quorem+0x96>
 800a052:	6812      	ldr	r2, [r2, #0]
 800a054:	3b04      	subs	r3, #4
 800a056:	2a00      	cmp	r2, #0
 800a058:	d1f0      	bne.n	800a03c <quorem+0xf0>
 800a05a:	3c01      	subs	r4, #1
 800a05c:	e7eb      	b.n	800a036 <quorem+0xea>
 800a05e:	2000      	movs	r0, #0
 800a060:	e7ee      	b.n	800a040 <quorem+0xf4>
 800a062:	0000      	movs	r0, r0
 800a064:	0000      	movs	r0, r0
	...

0800a068 <_dtoa_r>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	ed2d 8b04 	vpush	{d8-d9}
 800a070:	ec57 6b10 	vmov	r6, r7, d0
 800a074:	b093      	sub	sp, #76	; 0x4c
 800a076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a078:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a07c:	9106      	str	r1, [sp, #24]
 800a07e:	ee10 aa10 	vmov	sl, s0
 800a082:	4604      	mov	r4, r0
 800a084:	9209      	str	r2, [sp, #36]	; 0x24
 800a086:	930c      	str	r3, [sp, #48]	; 0x30
 800a088:	46bb      	mov	fp, r7
 800a08a:	b975      	cbnz	r5, 800a0aa <_dtoa_r+0x42>
 800a08c:	2010      	movs	r0, #16
 800a08e:	f000 fed7 	bl	800ae40 <malloc>
 800a092:	4602      	mov	r2, r0
 800a094:	6260      	str	r0, [r4, #36]	; 0x24
 800a096:	b920      	cbnz	r0, 800a0a2 <_dtoa_r+0x3a>
 800a098:	4ba7      	ldr	r3, [pc, #668]	; (800a338 <_dtoa_r+0x2d0>)
 800a09a:	21ea      	movs	r1, #234	; 0xea
 800a09c:	48a7      	ldr	r0, [pc, #668]	; (800a33c <_dtoa_r+0x2d4>)
 800a09e:	f001 fddf 	bl	800bc60 <__assert_func>
 800a0a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0a6:	6005      	str	r5, [r0, #0]
 800a0a8:	60c5      	str	r5, [r0, #12]
 800a0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ac:	6819      	ldr	r1, [r3, #0]
 800a0ae:	b151      	cbz	r1, 800a0c6 <_dtoa_r+0x5e>
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	604a      	str	r2, [r1, #4]
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	4093      	lsls	r3, r2
 800a0b8:	608b      	str	r3, [r1, #8]
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 ff16 	bl	800aeec <_Bfree>
 800a0c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]
 800a0c6:	1e3b      	subs	r3, r7, #0
 800a0c8:	bfaa      	itet	ge
 800a0ca:	2300      	movge	r3, #0
 800a0cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a0d0:	f8c8 3000 	strge.w	r3, [r8]
 800a0d4:	4b9a      	ldr	r3, [pc, #616]	; (800a340 <_dtoa_r+0x2d8>)
 800a0d6:	bfbc      	itt	lt
 800a0d8:	2201      	movlt	r2, #1
 800a0da:	f8c8 2000 	strlt.w	r2, [r8]
 800a0de:	ea33 030b 	bics.w	r3, r3, fp
 800a0e2:	d11b      	bne.n	800a11c <_dtoa_r+0xb4>
 800a0e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0f0:	4333      	orrs	r3, r6
 800a0f2:	f000 8592 	beq.w	800ac1a <_dtoa_r+0xbb2>
 800a0f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0f8:	b963      	cbnz	r3, 800a114 <_dtoa_r+0xac>
 800a0fa:	4b92      	ldr	r3, [pc, #584]	; (800a344 <_dtoa_r+0x2dc>)
 800a0fc:	e022      	b.n	800a144 <_dtoa_r+0xdc>
 800a0fe:	4b92      	ldr	r3, [pc, #584]	; (800a348 <_dtoa_r+0x2e0>)
 800a100:	9301      	str	r3, [sp, #4]
 800a102:	3308      	adds	r3, #8
 800a104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	9801      	ldr	r0, [sp, #4]
 800a10a:	b013      	add	sp, #76	; 0x4c
 800a10c:	ecbd 8b04 	vpop	{d8-d9}
 800a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a114:	4b8b      	ldr	r3, [pc, #556]	; (800a344 <_dtoa_r+0x2dc>)
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	3303      	adds	r3, #3
 800a11a:	e7f3      	b.n	800a104 <_dtoa_r+0x9c>
 800a11c:	2200      	movs	r2, #0
 800a11e:	2300      	movs	r3, #0
 800a120:	4650      	mov	r0, sl
 800a122:	4659      	mov	r1, fp
 800a124:	f7f6 fcd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a128:	ec4b ab19 	vmov	d9, sl, fp
 800a12c:	4680      	mov	r8, r0
 800a12e:	b158      	cbz	r0, 800a148 <_dtoa_r+0xe0>
 800a130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a132:	2301      	movs	r3, #1
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 856b 	beq.w	800ac14 <_dtoa_r+0xbac>
 800a13e:	4883      	ldr	r0, [pc, #524]	; (800a34c <_dtoa_r+0x2e4>)
 800a140:	6018      	str	r0, [r3, #0]
 800a142:	1e43      	subs	r3, r0, #1
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	e7df      	b.n	800a108 <_dtoa_r+0xa0>
 800a148:	ec4b ab10 	vmov	d0, sl, fp
 800a14c:	aa10      	add	r2, sp, #64	; 0x40
 800a14e:	a911      	add	r1, sp, #68	; 0x44
 800a150:	4620      	mov	r0, r4
 800a152:	f001 f9b3 	bl	800b4bc <__d2b>
 800a156:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a15a:	ee08 0a10 	vmov	s16, r0
 800a15e:	2d00      	cmp	r5, #0
 800a160:	f000 8084 	beq.w	800a26c <_dtoa_r+0x204>
 800a164:	ee19 3a90 	vmov	r3, s19
 800a168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a16c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a170:	4656      	mov	r6, sl
 800a172:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a17a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a17e:	4b74      	ldr	r3, [pc, #464]	; (800a350 <_dtoa_r+0x2e8>)
 800a180:	2200      	movs	r2, #0
 800a182:	4630      	mov	r0, r6
 800a184:	4639      	mov	r1, r7
 800a186:	f7f6 f887 	bl	8000298 <__aeabi_dsub>
 800a18a:	a365      	add	r3, pc, #404	; (adr r3, 800a320 <_dtoa_r+0x2b8>)
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	f7f6 fa3a 	bl	8000608 <__aeabi_dmul>
 800a194:	a364      	add	r3, pc, #400	; (adr r3, 800a328 <_dtoa_r+0x2c0>)
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	f7f6 f87f 	bl	800029c <__adddf3>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	460f      	mov	r7, r1
 800a1a4:	f7f6 f9c6 	bl	8000534 <__aeabi_i2d>
 800a1a8:	a361      	add	r3, pc, #388	; (adr r3, 800a330 <_dtoa_r+0x2c8>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	f7f6 fa2b 	bl	8000608 <__aeabi_dmul>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	f7f6 f86f 	bl	800029c <__adddf3>
 800a1be:	4606      	mov	r6, r0
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	f7f6 fcd1 	bl	8000b68 <__aeabi_d2iz>
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	9000      	str	r0, [sp, #0]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 fc8c 	bl	8000aec <__aeabi_dcmplt>
 800a1d4:	b150      	cbz	r0, 800a1ec <_dtoa_r+0x184>
 800a1d6:	9800      	ldr	r0, [sp, #0]
 800a1d8:	f7f6 f9ac 	bl	8000534 <__aeabi_i2d>
 800a1dc:	4632      	mov	r2, r6
 800a1de:	463b      	mov	r3, r7
 800a1e0:	f7f6 fc7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1e4:	b910      	cbnz	r0, 800a1ec <_dtoa_r+0x184>
 800a1e6:	9b00      	ldr	r3, [sp, #0]
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	9b00      	ldr	r3, [sp, #0]
 800a1ee:	2b16      	cmp	r3, #22
 800a1f0:	d85a      	bhi.n	800a2a8 <_dtoa_r+0x240>
 800a1f2:	9a00      	ldr	r2, [sp, #0]
 800a1f4:	4b57      	ldr	r3, [pc, #348]	; (800a354 <_dtoa_r+0x2ec>)
 800a1f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	ec51 0b19 	vmov	r0, r1, d9
 800a202:	f7f6 fc73 	bl	8000aec <__aeabi_dcmplt>
 800a206:	2800      	cmp	r0, #0
 800a208:	d050      	beq.n	800a2ac <_dtoa_r+0x244>
 800a20a:	9b00      	ldr	r3, [sp, #0]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	2300      	movs	r3, #0
 800a212:	930b      	str	r3, [sp, #44]	; 0x2c
 800a214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a216:	1b5d      	subs	r5, r3, r5
 800a218:	1e6b      	subs	r3, r5, #1
 800a21a:	9305      	str	r3, [sp, #20]
 800a21c:	bf45      	ittet	mi
 800a21e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a222:	9304      	strmi	r3, [sp, #16]
 800a224:	2300      	movpl	r3, #0
 800a226:	2300      	movmi	r3, #0
 800a228:	bf4c      	ite	mi
 800a22a:	9305      	strmi	r3, [sp, #20]
 800a22c:	9304      	strpl	r3, [sp, #16]
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	db3d      	blt.n	800a2b0 <_dtoa_r+0x248>
 800a234:	9b05      	ldr	r3, [sp, #20]
 800a236:	9a00      	ldr	r2, [sp, #0]
 800a238:	920a      	str	r2, [sp, #40]	; 0x28
 800a23a:	4413      	add	r3, r2
 800a23c:	9305      	str	r3, [sp, #20]
 800a23e:	2300      	movs	r3, #0
 800a240:	9307      	str	r3, [sp, #28]
 800a242:	9b06      	ldr	r3, [sp, #24]
 800a244:	2b09      	cmp	r3, #9
 800a246:	f200 8089 	bhi.w	800a35c <_dtoa_r+0x2f4>
 800a24a:	2b05      	cmp	r3, #5
 800a24c:	bfc4      	itt	gt
 800a24e:	3b04      	subgt	r3, #4
 800a250:	9306      	strgt	r3, [sp, #24]
 800a252:	9b06      	ldr	r3, [sp, #24]
 800a254:	f1a3 0302 	sub.w	r3, r3, #2
 800a258:	bfcc      	ite	gt
 800a25a:	2500      	movgt	r5, #0
 800a25c:	2501      	movle	r5, #1
 800a25e:	2b03      	cmp	r3, #3
 800a260:	f200 8087 	bhi.w	800a372 <_dtoa_r+0x30a>
 800a264:	e8df f003 	tbb	[pc, r3]
 800a268:	59383a2d 	.word	0x59383a2d
 800a26c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a270:	441d      	add	r5, r3
 800a272:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a276:	2b20      	cmp	r3, #32
 800a278:	bfc1      	itttt	gt
 800a27a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a27e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a282:	fa0b f303 	lslgt.w	r3, fp, r3
 800a286:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a28a:	bfda      	itte	le
 800a28c:	f1c3 0320 	rsble	r3, r3, #32
 800a290:	fa06 f003 	lslle.w	r0, r6, r3
 800a294:	4318      	orrgt	r0, r3
 800a296:	f7f6 f93d 	bl	8000514 <__aeabi_ui2d>
 800a29a:	2301      	movs	r3, #1
 800a29c:	4606      	mov	r6, r0
 800a29e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2a2:	3d01      	subs	r5, #1
 800a2a4:	930e      	str	r3, [sp, #56]	; 0x38
 800a2a6:	e76a      	b.n	800a17e <_dtoa_r+0x116>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e7b2      	b.n	800a212 <_dtoa_r+0x1aa>
 800a2ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2ae:	e7b1      	b.n	800a214 <_dtoa_r+0x1ac>
 800a2b0:	9b04      	ldr	r3, [sp, #16]
 800a2b2:	9a00      	ldr	r2, [sp, #0]
 800a2b4:	1a9b      	subs	r3, r3, r2
 800a2b6:	9304      	str	r3, [sp, #16]
 800a2b8:	4253      	negs	r3, r2
 800a2ba:	9307      	str	r3, [sp, #28]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	930a      	str	r3, [sp, #40]	; 0x28
 800a2c0:	e7bf      	b.n	800a242 <_dtoa_r+0x1da>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9308      	str	r3, [sp, #32]
 800a2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dc55      	bgt.n	800a378 <_dtoa_r+0x310>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2d6:	e00c      	b.n	800a2f2 <_dtoa_r+0x28a>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e7f3      	b.n	800a2c4 <_dtoa_r+0x25c>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e0:	9308      	str	r3, [sp, #32]
 800a2e2:	9b00      	ldr	r3, [sp, #0]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	9303      	str	r3, [sp, #12]
 800a2ee:	bfb8      	it	lt
 800a2f0:	2301      	movlt	r3, #1
 800a2f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	6042      	str	r2, [r0, #4]
 800a2f8:	2204      	movs	r2, #4
 800a2fa:	f102 0614 	add.w	r6, r2, #20
 800a2fe:	429e      	cmp	r6, r3
 800a300:	6841      	ldr	r1, [r0, #4]
 800a302:	d93d      	bls.n	800a380 <_dtoa_r+0x318>
 800a304:	4620      	mov	r0, r4
 800a306:	f000 fdb1 	bl	800ae6c <_Balloc>
 800a30a:	9001      	str	r0, [sp, #4]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d13b      	bne.n	800a388 <_dtoa_r+0x320>
 800a310:	4b11      	ldr	r3, [pc, #68]	; (800a358 <_dtoa_r+0x2f0>)
 800a312:	4602      	mov	r2, r0
 800a314:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a318:	e6c0      	b.n	800a09c <_dtoa_r+0x34>
 800a31a:	2301      	movs	r3, #1
 800a31c:	e7df      	b.n	800a2de <_dtoa_r+0x276>
 800a31e:	bf00      	nop
 800a320:	636f4361 	.word	0x636f4361
 800a324:	3fd287a7 	.word	0x3fd287a7
 800a328:	8b60c8b3 	.word	0x8b60c8b3
 800a32c:	3fc68a28 	.word	0x3fc68a28
 800a330:	509f79fb 	.word	0x509f79fb
 800a334:	3fd34413 	.word	0x3fd34413
 800a338:	0800c332 	.word	0x0800c332
 800a33c:	0800c349 	.word	0x0800c349
 800a340:	7ff00000 	.word	0x7ff00000
 800a344:	0800c32e 	.word	0x0800c32e
 800a348:	0800c325 	.word	0x0800c325
 800a34c:	0800c201 	.word	0x0800c201
 800a350:	3ff80000 	.word	0x3ff80000
 800a354:	0800c4a0 	.word	0x0800c4a0
 800a358:	0800c3a4 	.word	0x0800c3a4
 800a35c:	2501      	movs	r5, #1
 800a35e:	2300      	movs	r3, #0
 800a360:	9306      	str	r3, [sp, #24]
 800a362:	9508      	str	r5, [sp, #32]
 800a364:	f04f 33ff 	mov.w	r3, #4294967295
 800a368:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a36c:	2200      	movs	r2, #0
 800a36e:	2312      	movs	r3, #18
 800a370:	e7b0      	b.n	800a2d4 <_dtoa_r+0x26c>
 800a372:	2301      	movs	r3, #1
 800a374:	9308      	str	r3, [sp, #32]
 800a376:	e7f5      	b.n	800a364 <_dtoa_r+0x2fc>
 800a378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a37a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a37e:	e7b8      	b.n	800a2f2 <_dtoa_r+0x28a>
 800a380:	3101      	adds	r1, #1
 800a382:	6041      	str	r1, [r0, #4]
 800a384:	0052      	lsls	r2, r2, #1
 800a386:	e7b8      	b.n	800a2fa <_dtoa_r+0x292>
 800a388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a38a:	9a01      	ldr	r2, [sp, #4]
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	2b0e      	cmp	r3, #14
 800a392:	f200 809d 	bhi.w	800a4d0 <_dtoa_r+0x468>
 800a396:	2d00      	cmp	r5, #0
 800a398:	f000 809a 	beq.w	800a4d0 <_dtoa_r+0x468>
 800a39c:	9b00      	ldr	r3, [sp, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	dd32      	ble.n	800a408 <_dtoa_r+0x3a0>
 800a3a2:	4ab7      	ldr	r2, [pc, #732]	; (800a680 <_dtoa_r+0x618>)
 800a3a4:	f003 030f 	and.w	r3, r3, #15
 800a3a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3b0:	9b00      	ldr	r3, [sp, #0]
 800a3b2:	05d8      	lsls	r0, r3, #23
 800a3b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a3b8:	d516      	bpl.n	800a3e8 <_dtoa_r+0x380>
 800a3ba:	4bb2      	ldr	r3, [pc, #712]	; (800a684 <_dtoa_r+0x61c>)
 800a3bc:	ec51 0b19 	vmov	r0, r1, d9
 800a3c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3c4:	f7f6 fa4a 	bl	800085c <__aeabi_ddiv>
 800a3c8:	f007 070f 	and.w	r7, r7, #15
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	468b      	mov	fp, r1
 800a3d0:	2503      	movs	r5, #3
 800a3d2:	4eac      	ldr	r6, [pc, #688]	; (800a684 <_dtoa_r+0x61c>)
 800a3d4:	b957      	cbnz	r7, 800a3ec <_dtoa_r+0x384>
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	464b      	mov	r3, r9
 800a3da:	4650      	mov	r0, sl
 800a3dc:	4659      	mov	r1, fp
 800a3de:	f7f6 fa3d 	bl	800085c <__aeabi_ddiv>
 800a3e2:	4682      	mov	sl, r0
 800a3e4:	468b      	mov	fp, r1
 800a3e6:	e028      	b.n	800a43a <_dtoa_r+0x3d2>
 800a3e8:	2502      	movs	r5, #2
 800a3ea:	e7f2      	b.n	800a3d2 <_dtoa_r+0x36a>
 800a3ec:	07f9      	lsls	r1, r7, #31
 800a3ee:	d508      	bpl.n	800a402 <_dtoa_r+0x39a>
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	4649      	mov	r1, r9
 800a3f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3f8:	f7f6 f906 	bl	8000608 <__aeabi_dmul>
 800a3fc:	3501      	adds	r5, #1
 800a3fe:	4680      	mov	r8, r0
 800a400:	4689      	mov	r9, r1
 800a402:	107f      	asrs	r7, r7, #1
 800a404:	3608      	adds	r6, #8
 800a406:	e7e5      	b.n	800a3d4 <_dtoa_r+0x36c>
 800a408:	f000 809b 	beq.w	800a542 <_dtoa_r+0x4da>
 800a40c:	9b00      	ldr	r3, [sp, #0]
 800a40e:	4f9d      	ldr	r7, [pc, #628]	; (800a684 <_dtoa_r+0x61c>)
 800a410:	425e      	negs	r6, r3
 800a412:	4b9b      	ldr	r3, [pc, #620]	; (800a680 <_dtoa_r+0x618>)
 800a414:	f006 020f 	and.w	r2, r6, #15
 800a418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	ec51 0b19 	vmov	r0, r1, d9
 800a424:	f7f6 f8f0 	bl	8000608 <__aeabi_dmul>
 800a428:	1136      	asrs	r6, r6, #4
 800a42a:	4682      	mov	sl, r0
 800a42c:	468b      	mov	fp, r1
 800a42e:	2300      	movs	r3, #0
 800a430:	2502      	movs	r5, #2
 800a432:	2e00      	cmp	r6, #0
 800a434:	d17a      	bne.n	800a52c <_dtoa_r+0x4c4>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1d3      	bne.n	800a3e2 <_dtoa_r+0x37a>
 800a43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 8082 	beq.w	800a546 <_dtoa_r+0x4de>
 800a442:	4b91      	ldr	r3, [pc, #580]	; (800a688 <_dtoa_r+0x620>)
 800a444:	2200      	movs	r2, #0
 800a446:	4650      	mov	r0, sl
 800a448:	4659      	mov	r1, fp
 800a44a:	f7f6 fb4f 	bl	8000aec <__aeabi_dcmplt>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d079      	beq.n	800a546 <_dtoa_r+0x4de>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d076      	beq.n	800a546 <_dtoa_r+0x4de>
 800a458:	9b02      	ldr	r3, [sp, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dd36      	ble.n	800a4cc <_dtoa_r+0x464>
 800a45e:	9b00      	ldr	r3, [sp, #0]
 800a460:	4650      	mov	r0, sl
 800a462:	4659      	mov	r1, fp
 800a464:	1e5f      	subs	r7, r3, #1
 800a466:	2200      	movs	r2, #0
 800a468:	4b88      	ldr	r3, [pc, #544]	; (800a68c <_dtoa_r+0x624>)
 800a46a:	f7f6 f8cd 	bl	8000608 <__aeabi_dmul>
 800a46e:	9e02      	ldr	r6, [sp, #8]
 800a470:	4682      	mov	sl, r0
 800a472:	468b      	mov	fp, r1
 800a474:	3501      	adds	r5, #1
 800a476:	4628      	mov	r0, r5
 800a478:	f7f6 f85c 	bl	8000534 <__aeabi_i2d>
 800a47c:	4652      	mov	r2, sl
 800a47e:	465b      	mov	r3, fp
 800a480:	f7f6 f8c2 	bl	8000608 <__aeabi_dmul>
 800a484:	4b82      	ldr	r3, [pc, #520]	; (800a690 <_dtoa_r+0x628>)
 800a486:	2200      	movs	r2, #0
 800a488:	f7f5 ff08 	bl	800029c <__adddf3>
 800a48c:	46d0      	mov	r8, sl
 800a48e:	46d9      	mov	r9, fp
 800a490:	4682      	mov	sl, r0
 800a492:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a496:	2e00      	cmp	r6, #0
 800a498:	d158      	bne.n	800a54c <_dtoa_r+0x4e4>
 800a49a:	4b7e      	ldr	r3, [pc, #504]	; (800a694 <_dtoa_r+0x62c>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	4640      	mov	r0, r8
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	f7f5 fef9 	bl	8000298 <__aeabi_dsub>
 800a4a6:	4652      	mov	r2, sl
 800a4a8:	465b      	mov	r3, fp
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	4689      	mov	r9, r1
 800a4ae:	f7f6 fb3b 	bl	8000b28 <__aeabi_dcmpgt>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	f040 8295 	bne.w	800a9e2 <_dtoa_r+0x97a>
 800a4b8:	4652      	mov	r2, sl
 800a4ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a4be:	4640      	mov	r0, r8
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	f7f6 fb13 	bl	8000aec <__aeabi_dcmplt>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	f040 8289 	bne.w	800a9de <_dtoa_r+0x976>
 800a4cc:	ec5b ab19 	vmov	sl, fp, d9
 800a4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f2c0 8148 	blt.w	800a768 <_dtoa_r+0x700>
 800a4d8:	9a00      	ldr	r2, [sp, #0]
 800a4da:	2a0e      	cmp	r2, #14
 800a4dc:	f300 8144 	bgt.w	800a768 <_dtoa_r+0x700>
 800a4e0:	4b67      	ldr	r3, [pc, #412]	; (800a680 <_dtoa_r+0x618>)
 800a4e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f280 80d5 	bge.w	800a69c <_dtoa_r+0x634>
 800a4f2:	9b03      	ldr	r3, [sp, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f300 80d1 	bgt.w	800a69c <_dtoa_r+0x634>
 800a4fa:	f040 826f 	bne.w	800a9dc <_dtoa_r+0x974>
 800a4fe:	4b65      	ldr	r3, [pc, #404]	; (800a694 <_dtoa_r+0x62c>)
 800a500:	2200      	movs	r2, #0
 800a502:	4640      	mov	r0, r8
 800a504:	4649      	mov	r1, r9
 800a506:	f7f6 f87f 	bl	8000608 <__aeabi_dmul>
 800a50a:	4652      	mov	r2, sl
 800a50c:	465b      	mov	r3, fp
 800a50e:	f7f6 fb01 	bl	8000b14 <__aeabi_dcmpge>
 800a512:	9e03      	ldr	r6, [sp, #12]
 800a514:	4637      	mov	r7, r6
 800a516:	2800      	cmp	r0, #0
 800a518:	f040 8245 	bne.w	800a9a6 <_dtoa_r+0x93e>
 800a51c:	9d01      	ldr	r5, [sp, #4]
 800a51e:	2331      	movs	r3, #49	; 0x31
 800a520:	f805 3b01 	strb.w	r3, [r5], #1
 800a524:	9b00      	ldr	r3, [sp, #0]
 800a526:	3301      	adds	r3, #1
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	e240      	b.n	800a9ae <_dtoa_r+0x946>
 800a52c:	07f2      	lsls	r2, r6, #31
 800a52e:	d505      	bpl.n	800a53c <_dtoa_r+0x4d4>
 800a530:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a534:	f7f6 f868 	bl	8000608 <__aeabi_dmul>
 800a538:	3501      	adds	r5, #1
 800a53a:	2301      	movs	r3, #1
 800a53c:	1076      	asrs	r6, r6, #1
 800a53e:	3708      	adds	r7, #8
 800a540:	e777      	b.n	800a432 <_dtoa_r+0x3ca>
 800a542:	2502      	movs	r5, #2
 800a544:	e779      	b.n	800a43a <_dtoa_r+0x3d2>
 800a546:	9f00      	ldr	r7, [sp, #0]
 800a548:	9e03      	ldr	r6, [sp, #12]
 800a54a:	e794      	b.n	800a476 <_dtoa_r+0x40e>
 800a54c:	9901      	ldr	r1, [sp, #4]
 800a54e:	4b4c      	ldr	r3, [pc, #304]	; (800a680 <_dtoa_r+0x618>)
 800a550:	4431      	add	r1, r6
 800a552:	910d      	str	r1, [sp, #52]	; 0x34
 800a554:	9908      	ldr	r1, [sp, #32]
 800a556:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a55a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a55e:	2900      	cmp	r1, #0
 800a560:	d043      	beq.n	800a5ea <_dtoa_r+0x582>
 800a562:	494d      	ldr	r1, [pc, #308]	; (800a698 <_dtoa_r+0x630>)
 800a564:	2000      	movs	r0, #0
 800a566:	f7f6 f979 	bl	800085c <__aeabi_ddiv>
 800a56a:	4652      	mov	r2, sl
 800a56c:	465b      	mov	r3, fp
 800a56e:	f7f5 fe93 	bl	8000298 <__aeabi_dsub>
 800a572:	9d01      	ldr	r5, [sp, #4]
 800a574:	4682      	mov	sl, r0
 800a576:	468b      	mov	fp, r1
 800a578:	4649      	mov	r1, r9
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7f6 faf4 	bl	8000b68 <__aeabi_d2iz>
 800a580:	4606      	mov	r6, r0
 800a582:	f7f5 ffd7 	bl	8000534 <__aeabi_i2d>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4640      	mov	r0, r8
 800a58c:	4649      	mov	r1, r9
 800a58e:	f7f5 fe83 	bl	8000298 <__aeabi_dsub>
 800a592:	3630      	adds	r6, #48	; 0x30
 800a594:	f805 6b01 	strb.w	r6, [r5], #1
 800a598:	4652      	mov	r2, sl
 800a59a:	465b      	mov	r3, fp
 800a59c:	4680      	mov	r8, r0
 800a59e:	4689      	mov	r9, r1
 800a5a0:	f7f6 faa4 	bl	8000aec <__aeabi_dcmplt>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d163      	bne.n	800a670 <_dtoa_r+0x608>
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	464b      	mov	r3, r9
 800a5ac:	4936      	ldr	r1, [pc, #216]	; (800a688 <_dtoa_r+0x620>)
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	f7f5 fe72 	bl	8000298 <__aeabi_dsub>
 800a5b4:	4652      	mov	r2, sl
 800a5b6:	465b      	mov	r3, fp
 800a5b8:	f7f6 fa98 	bl	8000aec <__aeabi_dcmplt>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f040 80b5 	bne.w	800a72c <_dtoa_r+0x6c4>
 800a5c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5c4:	429d      	cmp	r5, r3
 800a5c6:	d081      	beq.n	800a4cc <_dtoa_r+0x464>
 800a5c8:	4b30      	ldr	r3, [pc, #192]	; (800a68c <_dtoa_r+0x624>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	4650      	mov	r0, sl
 800a5ce:	4659      	mov	r1, fp
 800a5d0:	f7f6 f81a 	bl	8000608 <__aeabi_dmul>
 800a5d4:	4b2d      	ldr	r3, [pc, #180]	; (800a68c <_dtoa_r+0x624>)
 800a5d6:	4682      	mov	sl, r0
 800a5d8:	468b      	mov	fp, r1
 800a5da:	4640      	mov	r0, r8
 800a5dc:	4649      	mov	r1, r9
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f7f6 f812 	bl	8000608 <__aeabi_dmul>
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	4689      	mov	r9, r1
 800a5e8:	e7c6      	b.n	800a578 <_dtoa_r+0x510>
 800a5ea:	4650      	mov	r0, sl
 800a5ec:	4659      	mov	r1, fp
 800a5ee:	f7f6 f80b 	bl	8000608 <__aeabi_dmul>
 800a5f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5f4:	9d01      	ldr	r5, [sp, #4]
 800a5f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	468b      	mov	fp, r1
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	4640      	mov	r0, r8
 800a600:	f7f6 fab2 	bl	8000b68 <__aeabi_d2iz>
 800a604:	4606      	mov	r6, r0
 800a606:	f7f5 ff95 	bl	8000534 <__aeabi_i2d>
 800a60a:	3630      	adds	r6, #48	; 0x30
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f5 fe40 	bl	8000298 <__aeabi_dsub>
 800a618:	f805 6b01 	strb.w	r6, [r5], #1
 800a61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a61e:	429d      	cmp	r5, r3
 800a620:	4680      	mov	r8, r0
 800a622:	4689      	mov	r9, r1
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	d124      	bne.n	800a674 <_dtoa_r+0x60c>
 800a62a:	4b1b      	ldr	r3, [pc, #108]	; (800a698 <_dtoa_r+0x630>)
 800a62c:	4650      	mov	r0, sl
 800a62e:	4659      	mov	r1, fp
 800a630:	f7f5 fe34 	bl	800029c <__adddf3>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4640      	mov	r0, r8
 800a63a:	4649      	mov	r1, r9
 800a63c:	f7f6 fa74 	bl	8000b28 <__aeabi_dcmpgt>
 800a640:	2800      	cmp	r0, #0
 800a642:	d173      	bne.n	800a72c <_dtoa_r+0x6c4>
 800a644:	4652      	mov	r2, sl
 800a646:	465b      	mov	r3, fp
 800a648:	4913      	ldr	r1, [pc, #76]	; (800a698 <_dtoa_r+0x630>)
 800a64a:	2000      	movs	r0, #0
 800a64c:	f7f5 fe24 	bl	8000298 <__aeabi_dsub>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4640      	mov	r0, r8
 800a656:	4649      	mov	r1, r9
 800a658:	f7f6 fa48 	bl	8000aec <__aeabi_dcmplt>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f43f af35 	beq.w	800a4cc <_dtoa_r+0x464>
 800a662:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a664:	1e6b      	subs	r3, r5, #1
 800a666:	930f      	str	r3, [sp, #60]	; 0x3c
 800a668:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a66c:	2b30      	cmp	r3, #48	; 0x30
 800a66e:	d0f8      	beq.n	800a662 <_dtoa_r+0x5fa>
 800a670:	9700      	str	r7, [sp, #0]
 800a672:	e049      	b.n	800a708 <_dtoa_r+0x6a0>
 800a674:	4b05      	ldr	r3, [pc, #20]	; (800a68c <_dtoa_r+0x624>)
 800a676:	f7f5 ffc7 	bl	8000608 <__aeabi_dmul>
 800a67a:	4680      	mov	r8, r0
 800a67c:	4689      	mov	r9, r1
 800a67e:	e7bd      	b.n	800a5fc <_dtoa_r+0x594>
 800a680:	0800c4a0 	.word	0x0800c4a0
 800a684:	0800c478 	.word	0x0800c478
 800a688:	3ff00000 	.word	0x3ff00000
 800a68c:	40240000 	.word	0x40240000
 800a690:	401c0000 	.word	0x401c0000
 800a694:	40140000 	.word	0x40140000
 800a698:	3fe00000 	.word	0x3fe00000
 800a69c:	9d01      	ldr	r5, [sp, #4]
 800a69e:	4656      	mov	r6, sl
 800a6a0:	465f      	mov	r7, fp
 800a6a2:	4642      	mov	r2, r8
 800a6a4:	464b      	mov	r3, r9
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	f7f6 f8d7 	bl	800085c <__aeabi_ddiv>
 800a6ae:	f7f6 fa5b 	bl	8000b68 <__aeabi_d2iz>
 800a6b2:	4682      	mov	sl, r0
 800a6b4:	f7f5 ff3e 	bl	8000534 <__aeabi_i2d>
 800a6b8:	4642      	mov	r2, r8
 800a6ba:	464b      	mov	r3, r9
 800a6bc:	f7f5 ffa4 	bl	8000608 <__aeabi_dmul>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a6cc:	f7f5 fde4 	bl	8000298 <__aeabi_dsub>
 800a6d0:	f805 6b01 	strb.w	r6, [r5], #1
 800a6d4:	9e01      	ldr	r6, [sp, #4]
 800a6d6:	9f03      	ldr	r7, [sp, #12]
 800a6d8:	1bae      	subs	r6, r5, r6
 800a6da:	42b7      	cmp	r7, r6
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	d135      	bne.n	800a74e <_dtoa_r+0x6e6>
 800a6e2:	f7f5 fddb 	bl	800029c <__adddf3>
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	460f      	mov	r7, r1
 800a6ee:	f7f6 fa1b 	bl	8000b28 <__aeabi_dcmpgt>
 800a6f2:	b9d0      	cbnz	r0, 800a72a <_dtoa_r+0x6c2>
 800a6f4:	4642      	mov	r2, r8
 800a6f6:	464b      	mov	r3, r9
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	f7f6 f9ec 	bl	8000ad8 <__aeabi_dcmpeq>
 800a700:	b110      	cbz	r0, 800a708 <_dtoa_r+0x6a0>
 800a702:	f01a 0f01 	tst.w	sl, #1
 800a706:	d110      	bne.n	800a72a <_dtoa_r+0x6c2>
 800a708:	4620      	mov	r0, r4
 800a70a:	ee18 1a10 	vmov	r1, s16
 800a70e:	f000 fbed 	bl	800aeec <_Bfree>
 800a712:	2300      	movs	r3, #0
 800a714:	9800      	ldr	r0, [sp, #0]
 800a716:	702b      	strb	r3, [r5, #0]
 800a718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a71a:	3001      	adds	r0, #1
 800a71c:	6018      	str	r0, [r3, #0]
 800a71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a720:	2b00      	cmp	r3, #0
 800a722:	f43f acf1 	beq.w	800a108 <_dtoa_r+0xa0>
 800a726:	601d      	str	r5, [r3, #0]
 800a728:	e4ee      	b.n	800a108 <_dtoa_r+0xa0>
 800a72a:	9f00      	ldr	r7, [sp, #0]
 800a72c:	462b      	mov	r3, r5
 800a72e:	461d      	mov	r5, r3
 800a730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a734:	2a39      	cmp	r2, #57	; 0x39
 800a736:	d106      	bne.n	800a746 <_dtoa_r+0x6de>
 800a738:	9a01      	ldr	r2, [sp, #4]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d1f7      	bne.n	800a72e <_dtoa_r+0x6c6>
 800a73e:	9901      	ldr	r1, [sp, #4]
 800a740:	2230      	movs	r2, #48	; 0x30
 800a742:	3701      	adds	r7, #1
 800a744:	700a      	strb	r2, [r1, #0]
 800a746:	781a      	ldrb	r2, [r3, #0]
 800a748:	3201      	adds	r2, #1
 800a74a:	701a      	strb	r2, [r3, #0]
 800a74c:	e790      	b.n	800a670 <_dtoa_r+0x608>
 800a74e:	4ba6      	ldr	r3, [pc, #664]	; (800a9e8 <_dtoa_r+0x980>)
 800a750:	2200      	movs	r2, #0
 800a752:	f7f5 ff59 	bl	8000608 <__aeabi_dmul>
 800a756:	2200      	movs	r2, #0
 800a758:	2300      	movs	r3, #0
 800a75a:	4606      	mov	r6, r0
 800a75c:	460f      	mov	r7, r1
 800a75e:	f7f6 f9bb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a762:	2800      	cmp	r0, #0
 800a764:	d09d      	beq.n	800a6a2 <_dtoa_r+0x63a>
 800a766:	e7cf      	b.n	800a708 <_dtoa_r+0x6a0>
 800a768:	9a08      	ldr	r2, [sp, #32]
 800a76a:	2a00      	cmp	r2, #0
 800a76c:	f000 80d7 	beq.w	800a91e <_dtoa_r+0x8b6>
 800a770:	9a06      	ldr	r2, [sp, #24]
 800a772:	2a01      	cmp	r2, #1
 800a774:	f300 80ba 	bgt.w	800a8ec <_dtoa_r+0x884>
 800a778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	f000 80b2 	beq.w	800a8e4 <_dtoa_r+0x87c>
 800a780:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a784:	9e07      	ldr	r6, [sp, #28]
 800a786:	9d04      	ldr	r5, [sp, #16]
 800a788:	9a04      	ldr	r2, [sp, #16]
 800a78a:	441a      	add	r2, r3
 800a78c:	9204      	str	r2, [sp, #16]
 800a78e:	9a05      	ldr	r2, [sp, #20]
 800a790:	2101      	movs	r1, #1
 800a792:	441a      	add	r2, r3
 800a794:	4620      	mov	r0, r4
 800a796:	9205      	str	r2, [sp, #20]
 800a798:	f000 fc60 	bl	800b05c <__i2b>
 800a79c:	4607      	mov	r7, r0
 800a79e:	2d00      	cmp	r5, #0
 800a7a0:	dd0c      	ble.n	800a7bc <_dtoa_r+0x754>
 800a7a2:	9b05      	ldr	r3, [sp, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd09      	ble.n	800a7bc <_dtoa_r+0x754>
 800a7a8:	42ab      	cmp	r3, r5
 800a7aa:	9a04      	ldr	r2, [sp, #16]
 800a7ac:	bfa8      	it	ge
 800a7ae:	462b      	movge	r3, r5
 800a7b0:	1ad2      	subs	r2, r2, r3
 800a7b2:	9204      	str	r2, [sp, #16]
 800a7b4:	9a05      	ldr	r2, [sp, #20]
 800a7b6:	1aed      	subs	r5, r5, r3
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	9305      	str	r3, [sp, #20]
 800a7bc:	9b07      	ldr	r3, [sp, #28]
 800a7be:	b31b      	cbz	r3, 800a808 <_dtoa_r+0x7a0>
 800a7c0:	9b08      	ldr	r3, [sp, #32]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 80af 	beq.w	800a926 <_dtoa_r+0x8be>
 800a7c8:	2e00      	cmp	r6, #0
 800a7ca:	dd13      	ble.n	800a7f4 <_dtoa_r+0x78c>
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	4632      	mov	r2, r6
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 fd03 	bl	800b1dc <__pow5mult>
 800a7d6:	ee18 2a10 	vmov	r2, s16
 800a7da:	4601      	mov	r1, r0
 800a7dc:	4607      	mov	r7, r0
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 fc52 	bl	800b088 <__multiply>
 800a7e4:	ee18 1a10 	vmov	r1, s16
 800a7e8:	4680      	mov	r8, r0
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 fb7e 	bl	800aeec <_Bfree>
 800a7f0:	ee08 8a10 	vmov	s16, r8
 800a7f4:	9b07      	ldr	r3, [sp, #28]
 800a7f6:	1b9a      	subs	r2, r3, r6
 800a7f8:	d006      	beq.n	800a808 <_dtoa_r+0x7a0>
 800a7fa:	ee18 1a10 	vmov	r1, s16
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 fcec 	bl	800b1dc <__pow5mult>
 800a804:	ee08 0a10 	vmov	s16, r0
 800a808:	2101      	movs	r1, #1
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 fc26 	bl	800b05c <__i2b>
 800a810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a812:	2b00      	cmp	r3, #0
 800a814:	4606      	mov	r6, r0
 800a816:	f340 8088 	ble.w	800a92a <_dtoa_r+0x8c2>
 800a81a:	461a      	mov	r2, r3
 800a81c:	4601      	mov	r1, r0
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 fcdc 	bl	800b1dc <__pow5mult>
 800a824:	9b06      	ldr	r3, [sp, #24]
 800a826:	2b01      	cmp	r3, #1
 800a828:	4606      	mov	r6, r0
 800a82a:	f340 8081 	ble.w	800a930 <_dtoa_r+0x8c8>
 800a82e:	f04f 0800 	mov.w	r8, #0
 800a832:	6933      	ldr	r3, [r6, #16]
 800a834:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a838:	6918      	ldr	r0, [r3, #16]
 800a83a:	f000 fbbf 	bl	800afbc <__hi0bits>
 800a83e:	f1c0 0020 	rsb	r0, r0, #32
 800a842:	9b05      	ldr	r3, [sp, #20]
 800a844:	4418      	add	r0, r3
 800a846:	f010 001f 	ands.w	r0, r0, #31
 800a84a:	f000 8092 	beq.w	800a972 <_dtoa_r+0x90a>
 800a84e:	f1c0 0320 	rsb	r3, r0, #32
 800a852:	2b04      	cmp	r3, #4
 800a854:	f340 808a 	ble.w	800a96c <_dtoa_r+0x904>
 800a858:	f1c0 001c 	rsb	r0, r0, #28
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	4403      	add	r3, r0
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	9b05      	ldr	r3, [sp, #20]
 800a864:	4403      	add	r3, r0
 800a866:	4405      	add	r5, r0
 800a868:	9305      	str	r3, [sp, #20]
 800a86a:	9b04      	ldr	r3, [sp, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dd07      	ble.n	800a880 <_dtoa_r+0x818>
 800a870:	ee18 1a10 	vmov	r1, s16
 800a874:	461a      	mov	r2, r3
 800a876:	4620      	mov	r0, r4
 800a878:	f000 fd0a 	bl	800b290 <__lshift>
 800a87c:	ee08 0a10 	vmov	s16, r0
 800a880:	9b05      	ldr	r3, [sp, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	dd05      	ble.n	800a892 <_dtoa_r+0x82a>
 800a886:	4631      	mov	r1, r6
 800a888:	461a      	mov	r2, r3
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 fd00 	bl	800b290 <__lshift>
 800a890:	4606      	mov	r6, r0
 800a892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d06e      	beq.n	800a976 <_dtoa_r+0x90e>
 800a898:	ee18 0a10 	vmov	r0, s16
 800a89c:	4631      	mov	r1, r6
 800a89e:	f000 fd67 	bl	800b370 <__mcmp>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	da67      	bge.n	800a976 <_dtoa_r+0x90e>
 800a8a6:	9b00      	ldr	r3, [sp, #0]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	ee18 1a10 	vmov	r1, s16
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	220a      	movs	r2, #10
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 fb3b 	bl	800af30 <__multadd>
 800a8ba:	9b08      	ldr	r3, [sp, #32]
 800a8bc:	ee08 0a10 	vmov	s16, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 81b1 	beq.w	800ac28 <_dtoa_r+0xbc0>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	220a      	movs	r2, #10
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 fb2f 	bl	800af30 <__multadd>
 800a8d2:	9b02      	ldr	r3, [sp, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	f300 808e 	bgt.w	800a9f8 <_dtoa_r+0x990>
 800a8dc:	9b06      	ldr	r3, [sp, #24]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	dc51      	bgt.n	800a986 <_dtoa_r+0x91e>
 800a8e2:	e089      	b.n	800a9f8 <_dtoa_r+0x990>
 800a8e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8ea:	e74b      	b.n	800a784 <_dtoa_r+0x71c>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	1e5e      	subs	r6, r3, #1
 800a8f0:	9b07      	ldr	r3, [sp, #28]
 800a8f2:	42b3      	cmp	r3, r6
 800a8f4:	bfbf      	itttt	lt
 800a8f6:	9b07      	ldrlt	r3, [sp, #28]
 800a8f8:	9607      	strlt	r6, [sp, #28]
 800a8fa:	1af2      	sublt	r2, r6, r3
 800a8fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a8fe:	bfb6      	itet	lt
 800a900:	189b      	addlt	r3, r3, r2
 800a902:	1b9e      	subge	r6, r3, r6
 800a904:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a906:	9b03      	ldr	r3, [sp, #12]
 800a908:	bfb8      	it	lt
 800a90a:	2600      	movlt	r6, #0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	bfb7      	itett	lt
 800a910:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a914:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a918:	1a9d      	sublt	r5, r3, r2
 800a91a:	2300      	movlt	r3, #0
 800a91c:	e734      	b.n	800a788 <_dtoa_r+0x720>
 800a91e:	9e07      	ldr	r6, [sp, #28]
 800a920:	9d04      	ldr	r5, [sp, #16]
 800a922:	9f08      	ldr	r7, [sp, #32]
 800a924:	e73b      	b.n	800a79e <_dtoa_r+0x736>
 800a926:	9a07      	ldr	r2, [sp, #28]
 800a928:	e767      	b.n	800a7fa <_dtoa_r+0x792>
 800a92a:	9b06      	ldr	r3, [sp, #24]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	dc18      	bgt.n	800a962 <_dtoa_r+0x8fa>
 800a930:	f1ba 0f00 	cmp.w	sl, #0
 800a934:	d115      	bne.n	800a962 <_dtoa_r+0x8fa>
 800a936:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a93a:	b993      	cbnz	r3, 800a962 <_dtoa_r+0x8fa>
 800a93c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a940:	0d1b      	lsrs	r3, r3, #20
 800a942:	051b      	lsls	r3, r3, #20
 800a944:	b183      	cbz	r3, 800a968 <_dtoa_r+0x900>
 800a946:	9b04      	ldr	r3, [sp, #16]
 800a948:	3301      	adds	r3, #1
 800a94a:	9304      	str	r3, [sp, #16]
 800a94c:	9b05      	ldr	r3, [sp, #20]
 800a94e:	3301      	adds	r3, #1
 800a950:	9305      	str	r3, [sp, #20]
 800a952:	f04f 0801 	mov.w	r8, #1
 800a956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f47f af6a 	bne.w	800a832 <_dtoa_r+0x7ca>
 800a95e:	2001      	movs	r0, #1
 800a960:	e76f      	b.n	800a842 <_dtoa_r+0x7da>
 800a962:	f04f 0800 	mov.w	r8, #0
 800a966:	e7f6      	b.n	800a956 <_dtoa_r+0x8ee>
 800a968:	4698      	mov	r8, r3
 800a96a:	e7f4      	b.n	800a956 <_dtoa_r+0x8ee>
 800a96c:	f43f af7d 	beq.w	800a86a <_dtoa_r+0x802>
 800a970:	4618      	mov	r0, r3
 800a972:	301c      	adds	r0, #28
 800a974:	e772      	b.n	800a85c <_dtoa_r+0x7f4>
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	dc37      	bgt.n	800a9ec <_dtoa_r+0x984>
 800a97c:	9b06      	ldr	r3, [sp, #24]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	dd34      	ble.n	800a9ec <_dtoa_r+0x984>
 800a982:	9b03      	ldr	r3, [sp, #12]
 800a984:	9302      	str	r3, [sp, #8]
 800a986:	9b02      	ldr	r3, [sp, #8]
 800a988:	b96b      	cbnz	r3, 800a9a6 <_dtoa_r+0x93e>
 800a98a:	4631      	mov	r1, r6
 800a98c:	2205      	movs	r2, #5
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 face 	bl	800af30 <__multadd>
 800a994:	4601      	mov	r1, r0
 800a996:	4606      	mov	r6, r0
 800a998:	ee18 0a10 	vmov	r0, s16
 800a99c:	f000 fce8 	bl	800b370 <__mcmp>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	f73f adbb 	bgt.w	800a51c <_dtoa_r+0x4b4>
 800a9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a8:	9d01      	ldr	r5, [sp, #4]
 800a9aa:	43db      	mvns	r3, r3
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	f04f 0800 	mov.w	r8, #0
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 fa99 	bl	800aeec <_Bfree>
 800a9ba:	2f00      	cmp	r7, #0
 800a9bc:	f43f aea4 	beq.w	800a708 <_dtoa_r+0x6a0>
 800a9c0:	f1b8 0f00 	cmp.w	r8, #0
 800a9c4:	d005      	beq.n	800a9d2 <_dtoa_r+0x96a>
 800a9c6:	45b8      	cmp	r8, r7
 800a9c8:	d003      	beq.n	800a9d2 <_dtoa_r+0x96a>
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f000 fa8d 	bl	800aeec <_Bfree>
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 fa89 	bl	800aeec <_Bfree>
 800a9da:	e695      	b.n	800a708 <_dtoa_r+0x6a0>
 800a9dc:	2600      	movs	r6, #0
 800a9de:	4637      	mov	r7, r6
 800a9e0:	e7e1      	b.n	800a9a6 <_dtoa_r+0x93e>
 800a9e2:	9700      	str	r7, [sp, #0]
 800a9e4:	4637      	mov	r7, r6
 800a9e6:	e599      	b.n	800a51c <_dtoa_r+0x4b4>
 800a9e8:	40240000 	.word	0x40240000
 800a9ec:	9b08      	ldr	r3, [sp, #32]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 80ca 	beq.w	800ab88 <_dtoa_r+0xb20>
 800a9f4:	9b03      	ldr	r3, [sp, #12]
 800a9f6:	9302      	str	r3, [sp, #8]
 800a9f8:	2d00      	cmp	r5, #0
 800a9fa:	dd05      	ble.n	800aa08 <_dtoa_r+0x9a0>
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	462a      	mov	r2, r5
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 fc45 	bl	800b290 <__lshift>
 800aa06:	4607      	mov	r7, r0
 800aa08:	f1b8 0f00 	cmp.w	r8, #0
 800aa0c:	d05b      	beq.n	800aac6 <_dtoa_r+0xa5e>
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fa2b 	bl	800ae6c <_Balloc>
 800aa16:	4605      	mov	r5, r0
 800aa18:	b928      	cbnz	r0, 800aa26 <_dtoa_r+0x9be>
 800aa1a:	4b87      	ldr	r3, [pc, #540]	; (800ac38 <_dtoa_r+0xbd0>)
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa22:	f7ff bb3b 	b.w	800a09c <_dtoa_r+0x34>
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	3202      	adds	r2, #2
 800aa2a:	0092      	lsls	r2, r2, #2
 800aa2c:	f107 010c 	add.w	r1, r7, #12
 800aa30:	300c      	adds	r0, #12
 800aa32:	f000 fa0d 	bl	800ae50 <memcpy>
 800aa36:	2201      	movs	r2, #1
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 fc28 	bl	800b290 <__lshift>
 800aa40:	9b01      	ldr	r3, [sp, #4]
 800aa42:	f103 0901 	add.w	r9, r3, #1
 800aa46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	9305      	str	r3, [sp, #20]
 800aa4e:	f00a 0301 	and.w	r3, sl, #1
 800aa52:	46b8      	mov	r8, r7
 800aa54:	9304      	str	r3, [sp, #16]
 800aa56:	4607      	mov	r7, r0
 800aa58:	4631      	mov	r1, r6
 800aa5a:	ee18 0a10 	vmov	r0, s16
 800aa5e:	f7ff fa75 	bl	8009f4c <quorem>
 800aa62:	4641      	mov	r1, r8
 800aa64:	9002      	str	r0, [sp, #8]
 800aa66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa6a:	ee18 0a10 	vmov	r0, s16
 800aa6e:	f000 fc7f 	bl	800b370 <__mcmp>
 800aa72:	463a      	mov	r2, r7
 800aa74:	9003      	str	r0, [sp, #12]
 800aa76:	4631      	mov	r1, r6
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 fc95 	bl	800b3a8 <__mdiff>
 800aa7e:	68c2      	ldr	r2, [r0, #12]
 800aa80:	f109 3bff 	add.w	fp, r9, #4294967295
 800aa84:	4605      	mov	r5, r0
 800aa86:	bb02      	cbnz	r2, 800aaca <_dtoa_r+0xa62>
 800aa88:	4601      	mov	r1, r0
 800aa8a:	ee18 0a10 	vmov	r0, s16
 800aa8e:	f000 fc6f 	bl	800b370 <__mcmp>
 800aa92:	4602      	mov	r2, r0
 800aa94:	4629      	mov	r1, r5
 800aa96:	4620      	mov	r0, r4
 800aa98:	9207      	str	r2, [sp, #28]
 800aa9a:	f000 fa27 	bl	800aeec <_Bfree>
 800aa9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aaa2:	ea43 0102 	orr.w	r1, r3, r2
 800aaa6:	9b04      	ldr	r3, [sp, #16]
 800aaa8:	430b      	orrs	r3, r1
 800aaaa:	464d      	mov	r5, r9
 800aaac:	d10f      	bne.n	800aace <_dtoa_r+0xa66>
 800aaae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aab2:	d02a      	beq.n	800ab0a <_dtoa_r+0xaa2>
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	dd02      	ble.n	800aac0 <_dtoa_r+0xa58>
 800aaba:	9b02      	ldr	r3, [sp, #8]
 800aabc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aac0:	f88b a000 	strb.w	sl, [fp]
 800aac4:	e775      	b.n	800a9b2 <_dtoa_r+0x94a>
 800aac6:	4638      	mov	r0, r7
 800aac8:	e7ba      	b.n	800aa40 <_dtoa_r+0x9d8>
 800aaca:	2201      	movs	r2, #1
 800aacc:	e7e2      	b.n	800aa94 <_dtoa_r+0xa2c>
 800aace:	9b03      	ldr	r3, [sp, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	db04      	blt.n	800aade <_dtoa_r+0xa76>
 800aad4:	9906      	ldr	r1, [sp, #24]
 800aad6:	430b      	orrs	r3, r1
 800aad8:	9904      	ldr	r1, [sp, #16]
 800aada:	430b      	orrs	r3, r1
 800aadc:	d122      	bne.n	800ab24 <_dtoa_r+0xabc>
 800aade:	2a00      	cmp	r2, #0
 800aae0:	ddee      	ble.n	800aac0 <_dtoa_r+0xa58>
 800aae2:	ee18 1a10 	vmov	r1, s16
 800aae6:	2201      	movs	r2, #1
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 fbd1 	bl	800b290 <__lshift>
 800aaee:	4631      	mov	r1, r6
 800aaf0:	ee08 0a10 	vmov	s16, r0
 800aaf4:	f000 fc3c 	bl	800b370 <__mcmp>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	dc03      	bgt.n	800ab04 <_dtoa_r+0xa9c>
 800aafc:	d1e0      	bne.n	800aac0 <_dtoa_r+0xa58>
 800aafe:	f01a 0f01 	tst.w	sl, #1
 800ab02:	d0dd      	beq.n	800aac0 <_dtoa_r+0xa58>
 800ab04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab08:	d1d7      	bne.n	800aaba <_dtoa_r+0xa52>
 800ab0a:	2339      	movs	r3, #57	; 0x39
 800ab0c:	f88b 3000 	strb.w	r3, [fp]
 800ab10:	462b      	mov	r3, r5
 800ab12:	461d      	mov	r5, r3
 800ab14:	3b01      	subs	r3, #1
 800ab16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab1a:	2a39      	cmp	r2, #57	; 0x39
 800ab1c:	d071      	beq.n	800ac02 <_dtoa_r+0xb9a>
 800ab1e:	3201      	adds	r2, #1
 800ab20:	701a      	strb	r2, [r3, #0]
 800ab22:	e746      	b.n	800a9b2 <_dtoa_r+0x94a>
 800ab24:	2a00      	cmp	r2, #0
 800ab26:	dd07      	ble.n	800ab38 <_dtoa_r+0xad0>
 800ab28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab2c:	d0ed      	beq.n	800ab0a <_dtoa_r+0xaa2>
 800ab2e:	f10a 0301 	add.w	r3, sl, #1
 800ab32:	f88b 3000 	strb.w	r3, [fp]
 800ab36:	e73c      	b.n	800a9b2 <_dtoa_r+0x94a>
 800ab38:	9b05      	ldr	r3, [sp, #20]
 800ab3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab3e:	4599      	cmp	r9, r3
 800ab40:	d047      	beq.n	800abd2 <_dtoa_r+0xb6a>
 800ab42:	ee18 1a10 	vmov	r1, s16
 800ab46:	2300      	movs	r3, #0
 800ab48:	220a      	movs	r2, #10
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 f9f0 	bl	800af30 <__multadd>
 800ab50:	45b8      	cmp	r8, r7
 800ab52:	ee08 0a10 	vmov	s16, r0
 800ab56:	f04f 0300 	mov.w	r3, #0
 800ab5a:	f04f 020a 	mov.w	r2, #10
 800ab5e:	4641      	mov	r1, r8
 800ab60:	4620      	mov	r0, r4
 800ab62:	d106      	bne.n	800ab72 <_dtoa_r+0xb0a>
 800ab64:	f000 f9e4 	bl	800af30 <__multadd>
 800ab68:	4680      	mov	r8, r0
 800ab6a:	4607      	mov	r7, r0
 800ab6c:	f109 0901 	add.w	r9, r9, #1
 800ab70:	e772      	b.n	800aa58 <_dtoa_r+0x9f0>
 800ab72:	f000 f9dd 	bl	800af30 <__multadd>
 800ab76:	4639      	mov	r1, r7
 800ab78:	4680      	mov	r8, r0
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	220a      	movs	r2, #10
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 f9d6 	bl	800af30 <__multadd>
 800ab84:	4607      	mov	r7, r0
 800ab86:	e7f1      	b.n	800ab6c <_dtoa_r+0xb04>
 800ab88:	9b03      	ldr	r3, [sp, #12]
 800ab8a:	9302      	str	r3, [sp, #8]
 800ab8c:	9d01      	ldr	r5, [sp, #4]
 800ab8e:	ee18 0a10 	vmov	r0, s16
 800ab92:	4631      	mov	r1, r6
 800ab94:	f7ff f9da 	bl	8009f4c <quorem>
 800ab98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab9c:	9b01      	ldr	r3, [sp, #4]
 800ab9e:	f805 ab01 	strb.w	sl, [r5], #1
 800aba2:	1aea      	subs	r2, r5, r3
 800aba4:	9b02      	ldr	r3, [sp, #8]
 800aba6:	4293      	cmp	r3, r2
 800aba8:	dd09      	ble.n	800abbe <_dtoa_r+0xb56>
 800abaa:	ee18 1a10 	vmov	r1, s16
 800abae:	2300      	movs	r3, #0
 800abb0:	220a      	movs	r2, #10
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 f9bc 	bl	800af30 <__multadd>
 800abb8:	ee08 0a10 	vmov	s16, r0
 800abbc:	e7e7      	b.n	800ab8e <_dtoa_r+0xb26>
 800abbe:	9b02      	ldr	r3, [sp, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bfc8      	it	gt
 800abc4:	461d      	movgt	r5, r3
 800abc6:	9b01      	ldr	r3, [sp, #4]
 800abc8:	bfd8      	it	le
 800abca:	2501      	movle	r5, #1
 800abcc:	441d      	add	r5, r3
 800abce:	f04f 0800 	mov.w	r8, #0
 800abd2:	ee18 1a10 	vmov	r1, s16
 800abd6:	2201      	movs	r2, #1
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fb59 	bl	800b290 <__lshift>
 800abde:	4631      	mov	r1, r6
 800abe0:	ee08 0a10 	vmov	s16, r0
 800abe4:	f000 fbc4 	bl	800b370 <__mcmp>
 800abe8:	2800      	cmp	r0, #0
 800abea:	dc91      	bgt.n	800ab10 <_dtoa_r+0xaa8>
 800abec:	d102      	bne.n	800abf4 <_dtoa_r+0xb8c>
 800abee:	f01a 0f01 	tst.w	sl, #1
 800abf2:	d18d      	bne.n	800ab10 <_dtoa_r+0xaa8>
 800abf4:	462b      	mov	r3, r5
 800abf6:	461d      	mov	r5, r3
 800abf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abfc:	2a30      	cmp	r2, #48	; 0x30
 800abfe:	d0fa      	beq.n	800abf6 <_dtoa_r+0xb8e>
 800ac00:	e6d7      	b.n	800a9b2 <_dtoa_r+0x94a>
 800ac02:	9a01      	ldr	r2, [sp, #4]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d184      	bne.n	800ab12 <_dtoa_r+0xaaa>
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	2331      	movs	r3, #49	; 0x31
 800ac10:	7013      	strb	r3, [r2, #0]
 800ac12:	e6ce      	b.n	800a9b2 <_dtoa_r+0x94a>
 800ac14:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <_dtoa_r+0xbd4>)
 800ac16:	f7ff ba95 	b.w	800a144 <_dtoa_r+0xdc>
 800ac1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f47f aa6e 	bne.w	800a0fe <_dtoa_r+0x96>
 800ac22:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <_dtoa_r+0xbd8>)
 800ac24:	f7ff ba8e 	b.w	800a144 <_dtoa_r+0xdc>
 800ac28:	9b02      	ldr	r3, [sp, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dcae      	bgt.n	800ab8c <_dtoa_r+0xb24>
 800ac2e:	9b06      	ldr	r3, [sp, #24]
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	f73f aea8 	bgt.w	800a986 <_dtoa_r+0x91e>
 800ac36:	e7a9      	b.n	800ab8c <_dtoa_r+0xb24>
 800ac38:	0800c3a4 	.word	0x0800c3a4
 800ac3c:	0800c200 	.word	0x0800c200
 800ac40:	0800c325 	.word	0x0800c325

0800ac44 <std>:
 800ac44:	2300      	movs	r3, #0
 800ac46:	b510      	push	{r4, lr}
 800ac48:	4604      	mov	r4, r0
 800ac4a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac52:	6083      	str	r3, [r0, #8]
 800ac54:	8181      	strh	r1, [r0, #12]
 800ac56:	6643      	str	r3, [r0, #100]	; 0x64
 800ac58:	81c2      	strh	r2, [r0, #14]
 800ac5a:	6183      	str	r3, [r0, #24]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	2208      	movs	r2, #8
 800ac60:	305c      	adds	r0, #92	; 0x5c
 800ac62:	f7fe fc5d 	bl	8009520 <memset>
 800ac66:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <std+0x38>)
 800ac68:	6263      	str	r3, [r4, #36]	; 0x24
 800ac6a:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <std+0x3c>)
 800ac6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac6e:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <std+0x40>)
 800ac70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <std+0x44>)
 800ac74:	6224      	str	r4, [r4, #32]
 800ac76:	6323      	str	r3, [r4, #48]	; 0x30
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	bf00      	nop
 800ac7c:	0800ba35 	.word	0x0800ba35
 800ac80:	0800ba57 	.word	0x0800ba57
 800ac84:	0800ba8f 	.word	0x0800ba8f
 800ac88:	0800bab3 	.word	0x0800bab3

0800ac8c <_cleanup_r>:
 800ac8c:	4901      	ldr	r1, [pc, #4]	; (800ac94 <_cleanup_r+0x8>)
 800ac8e:	f000 b8af 	b.w	800adf0 <_fwalk_reent>
 800ac92:	bf00      	nop
 800ac94:	0800bdc9 	.word	0x0800bdc9

0800ac98 <__sfmoreglue>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	2268      	movs	r2, #104	; 0x68
 800ac9c:	1e4d      	subs	r5, r1, #1
 800ac9e:	4355      	muls	r5, r2
 800aca0:	460e      	mov	r6, r1
 800aca2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aca6:	f000 fce7 	bl	800b678 <_malloc_r>
 800acaa:	4604      	mov	r4, r0
 800acac:	b140      	cbz	r0, 800acc0 <__sfmoreglue+0x28>
 800acae:	2100      	movs	r1, #0
 800acb0:	e9c0 1600 	strd	r1, r6, [r0]
 800acb4:	300c      	adds	r0, #12
 800acb6:	60a0      	str	r0, [r4, #8]
 800acb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acbc:	f7fe fc30 	bl	8009520 <memset>
 800acc0:	4620      	mov	r0, r4
 800acc2:	bd70      	pop	{r4, r5, r6, pc}

0800acc4 <__sfp_lock_acquire>:
 800acc4:	4801      	ldr	r0, [pc, #4]	; (800accc <__sfp_lock_acquire+0x8>)
 800acc6:	f000 b8b8 	b.w	800ae3a <__retarget_lock_acquire_recursive>
 800acca:	bf00      	nop
 800accc:	200005b5 	.word	0x200005b5

0800acd0 <__sfp_lock_release>:
 800acd0:	4801      	ldr	r0, [pc, #4]	; (800acd8 <__sfp_lock_release+0x8>)
 800acd2:	f000 b8b3 	b.w	800ae3c <__retarget_lock_release_recursive>
 800acd6:	bf00      	nop
 800acd8:	200005b5 	.word	0x200005b5

0800acdc <__sinit_lock_acquire>:
 800acdc:	4801      	ldr	r0, [pc, #4]	; (800ace4 <__sinit_lock_acquire+0x8>)
 800acde:	f000 b8ac 	b.w	800ae3a <__retarget_lock_acquire_recursive>
 800ace2:	bf00      	nop
 800ace4:	200005b6 	.word	0x200005b6

0800ace8 <__sinit_lock_release>:
 800ace8:	4801      	ldr	r0, [pc, #4]	; (800acf0 <__sinit_lock_release+0x8>)
 800acea:	f000 b8a7 	b.w	800ae3c <__retarget_lock_release_recursive>
 800acee:	bf00      	nop
 800acf0:	200005b6 	.word	0x200005b6

0800acf4 <__sinit>:
 800acf4:	b510      	push	{r4, lr}
 800acf6:	4604      	mov	r4, r0
 800acf8:	f7ff fff0 	bl	800acdc <__sinit_lock_acquire>
 800acfc:	69a3      	ldr	r3, [r4, #24]
 800acfe:	b11b      	cbz	r3, 800ad08 <__sinit+0x14>
 800ad00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad04:	f7ff bff0 	b.w	800ace8 <__sinit_lock_release>
 800ad08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad0c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad0e:	4b13      	ldr	r3, [pc, #76]	; (800ad5c <__sinit+0x68>)
 800ad10:	4a13      	ldr	r2, [pc, #76]	; (800ad60 <__sinit+0x6c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad16:	42a3      	cmp	r3, r4
 800ad18:	bf04      	itt	eq
 800ad1a:	2301      	moveq	r3, #1
 800ad1c:	61a3      	streq	r3, [r4, #24]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 f820 	bl	800ad64 <__sfp>
 800ad24:	6060      	str	r0, [r4, #4]
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 f81c 	bl	800ad64 <__sfp>
 800ad2c:	60a0      	str	r0, [r4, #8]
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 f818 	bl	800ad64 <__sfp>
 800ad34:	2200      	movs	r2, #0
 800ad36:	60e0      	str	r0, [r4, #12]
 800ad38:	2104      	movs	r1, #4
 800ad3a:	6860      	ldr	r0, [r4, #4]
 800ad3c:	f7ff ff82 	bl	800ac44 <std>
 800ad40:	68a0      	ldr	r0, [r4, #8]
 800ad42:	2201      	movs	r2, #1
 800ad44:	2109      	movs	r1, #9
 800ad46:	f7ff ff7d 	bl	800ac44 <std>
 800ad4a:	68e0      	ldr	r0, [r4, #12]
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	2112      	movs	r1, #18
 800ad50:	f7ff ff78 	bl	800ac44 <std>
 800ad54:	2301      	movs	r3, #1
 800ad56:	61a3      	str	r3, [r4, #24]
 800ad58:	e7d2      	b.n	800ad00 <__sinit+0xc>
 800ad5a:	bf00      	nop
 800ad5c:	0800c1ec 	.word	0x0800c1ec
 800ad60:	0800ac8d 	.word	0x0800ac8d

0800ad64 <__sfp>:
 800ad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad66:	4607      	mov	r7, r0
 800ad68:	f7ff ffac 	bl	800acc4 <__sfp_lock_acquire>
 800ad6c:	4b1e      	ldr	r3, [pc, #120]	; (800ade8 <__sfp+0x84>)
 800ad6e:	681e      	ldr	r6, [r3, #0]
 800ad70:	69b3      	ldr	r3, [r6, #24]
 800ad72:	b913      	cbnz	r3, 800ad7a <__sfp+0x16>
 800ad74:	4630      	mov	r0, r6
 800ad76:	f7ff ffbd 	bl	800acf4 <__sinit>
 800ad7a:	3648      	adds	r6, #72	; 0x48
 800ad7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	d503      	bpl.n	800ad8c <__sfp+0x28>
 800ad84:	6833      	ldr	r3, [r6, #0]
 800ad86:	b30b      	cbz	r3, 800adcc <__sfp+0x68>
 800ad88:	6836      	ldr	r6, [r6, #0]
 800ad8a:	e7f7      	b.n	800ad7c <__sfp+0x18>
 800ad8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad90:	b9d5      	cbnz	r5, 800adc8 <__sfp+0x64>
 800ad92:	4b16      	ldr	r3, [pc, #88]	; (800adec <__sfp+0x88>)
 800ad94:	60e3      	str	r3, [r4, #12]
 800ad96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad9a:	6665      	str	r5, [r4, #100]	; 0x64
 800ad9c:	f000 f84c 	bl	800ae38 <__retarget_lock_init_recursive>
 800ada0:	f7ff ff96 	bl	800acd0 <__sfp_lock_release>
 800ada4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ada8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adac:	6025      	str	r5, [r4, #0]
 800adae:	61a5      	str	r5, [r4, #24]
 800adb0:	2208      	movs	r2, #8
 800adb2:	4629      	mov	r1, r5
 800adb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adb8:	f7fe fbb2 	bl	8009520 <memset>
 800adbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adc4:	4620      	mov	r0, r4
 800adc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adc8:	3468      	adds	r4, #104	; 0x68
 800adca:	e7d9      	b.n	800ad80 <__sfp+0x1c>
 800adcc:	2104      	movs	r1, #4
 800adce:	4638      	mov	r0, r7
 800add0:	f7ff ff62 	bl	800ac98 <__sfmoreglue>
 800add4:	4604      	mov	r4, r0
 800add6:	6030      	str	r0, [r6, #0]
 800add8:	2800      	cmp	r0, #0
 800adda:	d1d5      	bne.n	800ad88 <__sfp+0x24>
 800addc:	f7ff ff78 	bl	800acd0 <__sfp_lock_release>
 800ade0:	230c      	movs	r3, #12
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	e7ee      	b.n	800adc4 <__sfp+0x60>
 800ade6:	bf00      	nop
 800ade8:	0800c1ec 	.word	0x0800c1ec
 800adec:	ffff0001 	.word	0xffff0001

0800adf0 <_fwalk_reent>:
 800adf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf4:	4606      	mov	r6, r0
 800adf6:	4688      	mov	r8, r1
 800adf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adfc:	2700      	movs	r7, #0
 800adfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae02:	f1b9 0901 	subs.w	r9, r9, #1
 800ae06:	d505      	bpl.n	800ae14 <_fwalk_reent+0x24>
 800ae08:	6824      	ldr	r4, [r4, #0]
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	d1f7      	bne.n	800adfe <_fwalk_reent+0xe>
 800ae0e:	4638      	mov	r0, r7
 800ae10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae14:	89ab      	ldrh	r3, [r5, #12]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d907      	bls.n	800ae2a <_fwalk_reent+0x3a>
 800ae1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	d003      	beq.n	800ae2a <_fwalk_reent+0x3a>
 800ae22:	4629      	mov	r1, r5
 800ae24:	4630      	mov	r0, r6
 800ae26:	47c0      	blx	r8
 800ae28:	4307      	orrs	r7, r0
 800ae2a:	3568      	adds	r5, #104	; 0x68
 800ae2c:	e7e9      	b.n	800ae02 <_fwalk_reent+0x12>
	...

0800ae30 <_localeconv_r>:
 800ae30:	4800      	ldr	r0, [pc, #0]	; (800ae34 <_localeconv_r+0x4>)
 800ae32:	4770      	bx	lr
 800ae34:	20000164 	.word	0x20000164

0800ae38 <__retarget_lock_init_recursive>:
 800ae38:	4770      	bx	lr

0800ae3a <__retarget_lock_acquire_recursive>:
 800ae3a:	4770      	bx	lr

0800ae3c <__retarget_lock_release_recursive>:
 800ae3c:	4770      	bx	lr
	...

0800ae40 <malloc>:
 800ae40:	4b02      	ldr	r3, [pc, #8]	; (800ae4c <malloc+0xc>)
 800ae42:	4601      	mov	r1, r0
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	f000 bc17 	b.w	800b678 <_malloc_r>
 800ae4a:	bf00      	nop
 800ae4c:	20000010 	.word	0x20000010

0800ae50 <memcpy>:
 800ae50:	440a      	add	r2, r1
 800ae52:	4291      	cmp	r1, r2
 800ae54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae58:	d100      	bne.n	800ae5c <memcpy+0xc>
 800ae5a:	4770      	bx	lr
 800ae5c:	b510      	push	{r4, lr}
 800ae5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae66:	4291      	cmp	r1, r2
 800ae68:	d1f9      	bne.n	800ae5e <memcpy+0xe>
 800ae6a:	bd10      	pop	{r4, pc}

0800ae6c <_Balloc>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae70:	4604      	mov	r4, r0
 800ae72:	460d      	mov	r5, r1
 800ae74:	b976      	cbnz	r6, 800ae94 <_Balloc+0x28>
 800ae76:	2010      	movs	r0, #16
 800ae78:	f7ff ffe2 	bl	800ae40 <malloc>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	6260      	str	r0, [r4, #36]	; 0x24
 800ae80:	b920      	cbnz	r0, 800ae8c <_Balloc+0x20>
 800ae82:	4b18      	ldr	r3, [pc, #96]	; (800aee4 <_Balloc+0x78>)
 800ae84:	4818      	ldr	r0, [pc, #96]	; (800aee8 <_Balloc+0x7c>)
 800ae86:	2166      	movs	r1, #102	; 0x66
 800ae88:	f000 feea 	bl	800bc60 <__assert_func>
 800ae8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae90:	6006      	str	r6, [r0, #0]
 800ae92:	60c6      	str	r6, [r0, #12]
 800ae94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae96:	68f3      	ldr	r3, [r6, #12]
 800ae98:	b183      	cbz	r3, 800aebc <_Balloc+0x50>
 800ae9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aea2:	b9b8      	cbnz	r0, 800aed4 <_Balloc+0x68>
 800aea4:	2101      	movs	r1, #1
 800aea6:	fa01 f605 	lsl.w	r6, r1, r5
 800aeaa:	1d72      	adds	r2, r6, #5
 800aeac:	0092      	lsls	r2, r2, #2
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 fb60 	bl	800b574 <_calloc_r>
 800aeb4:	b160      	cbz	r0, 800aed0 <_Balloc+0x64>
 800aeb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aeba:	e00e      	b.n	800aeda <_Balloc+0x6e>
 800aebc:	2221      	movs	r2, #33	; 0x21
 800aebe:	2104      	movs	r1, #4
 800aec0:	4620      	mov	r0, r4
 800aec2:	f000 fb57 	bl	800b574 <_calloc_r>
 800aec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aec8:	60f0      	str	r0, [r6, #12]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e4      	bne.n	800ae9a <_Balloc+0x2e>
 800aed0:	2000      	movs	r0, #0
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	6802      	ldr	r2, [r0, #0]
 800aed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aeda:	2300      	movs	r3, #0
 800aedc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aee0:	e7f7      	b.n	800aed2 <_Balloc+0x66>
 800aee2:	bf00      	nop
 800aee4:	0800c332 	.word	0x0800c332
 800aee8:	0800c418 	.word	0x0800c418

0800aeec <_Bfree>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aef0:	4605      	mov	r5, r0
 800aef2:	460c      	mov	r4, r1
 800aef4:	b976      	cbnz	r6, 800af14 <_Bfree+0x28>
 800aef6:	2010      	movs	r0, #16
 800aef8:	f7ff ffa2 	bl	800ae40 <malloc>
 800aefc:	4602      	mov	r2, r0
 800aefe:	6268      	str	r0, [r5, #36]	; 0x24
 800af00:	b920      	cbnz	r0, 800af0c <_Bfree+0x20>
 800af02:	4b09      	ldr	r3, [pc, #36]	; (800af28 <_Bfree+0x3c>)
 800af04:	4809      	ldr	r0, [pc, #36]	; (800af2c <_Bfree+0x40>)
 800af06:	218a      	movs	r1, #138	; 0x8a
 800af08:	f000 feaa 	bl	800bc60 <__assert_func>
 800af0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af10:	6006      	str	r6, [r0, #0]
 800af12:	60c6      	str	r6, [r0, #12]
 800af14:	b13c      	cbz	r4, 800af26 <_Bfree+0x3a>
 800af16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af18:	6862      	ldr	r2, [r4, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af20:	6021      	str	r1, [r4, #0]
 800af22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	0800c332 	.word	0x0800c332
 800af2c:	0800c418 	.word	0x0800c418

0800af30 <__multadd>:
 800af30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af34:	690d      	ldr	r5, [r1, #16]
 800af36:	4607      	mov	r7, r0
 800af38:	460c      	mov	r4, r1
 800af3a:	461e      	mov	r6, r3
 800af3c:	f101 0c14 	add.w	ip, r1, #20
 800af40:	2000      	movs	r0, #0
 800af42:	f8dc 3000 	ldr.w	r3, [ip]
 800af46:	b299      	uxth	r1, r3
 800af48:	fb02 6101 	mla	r1, r2, r1, r6
 800af4c:	0c1e      	lsrs	r6, r3, #16
 800af4e:	0c0b      	lsrs	r3, r1, #16
 800af50:	fb02 3306 	mla	r3, r2, r6, r3
 800af54:	b289      	uxth	r1, r1
 800af56:	3001      	adds	r0, #1
 800af58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af5c:	4285      	cmp	r5, r0
 800af5e:	f84c 1b04 	str.w	r1, [ip], #4
 800af62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af66:	dcec      	bgt.n	800af42 <__multadd+0x12>
 800af68:	b30e      	cbz	r6, 800afae <__multadd+0x7e>
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	42ab      	cmp	r3, r5
 800af6e:	dc19      	bgt.n	800afa4 <__multadd+0x74>
 800af70:	6861      	ldr	r1, [r4, #4]
 800af72:	4638      	mov	r0, r7
 800af74:	3101      	adds	r1, #1
 800af76:	f7ff ff79 	bl	800ae6c <_Balloc>
 800af7a:	4680      	mov	r8, r0
 800af7c:	b928      	cbnz	r0, 800af8a <__multadd+0x5a>
 800af7e:	4602      	mov	r2, r0
 800af80:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <__multadd+0x84>)
 800af82:	480d      	ldr	r0, [pc, #52]	; (800afb8 <__multadd+0x88>)
 800af84:	21b5      	movs	r1, #181	; 0xb5
 800af86:	f000 fe6b 	bl	800bc60 <__assert_func>
 800af8a:	6922      	ldr	r2, [r4, #16]
 800af8c:	3202      	adds	r2, #2
 800af8e:	f104 010c 	add.w	r1, r4, #12
 800af92:	0092      	lsls	r2, r2, #2
 800af94:	300c      	adds	r0, #12
 800af96:	f7ff ff5b 	bl	800ae50 <memcpy>
 800af9a:	4621      	mov	r1, r4
 800af9c:	4638      	mov	r0, r7
 800af9e:	f7ff ffa5 	bl	800aeec <_Bfree>
 800afa2:	4644      	mov	r4, r8
 800afa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afa8:	3501      	adds	r5, #1
 800afaa:	615e      	str	r6, [r3, #20]
 800afac:	6125      	str	r5, [r4, #16]
 800afae:	4620      	mov	r0, r4
 800afb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb4:	0800c3a4 	.word	0x0800c3a4
 800afb8:	0800c418 	.word	0x0800c418

0800afbc <__hi0bits>:
 800afbc:	0c03      	lsrs	r3, r0, #16
 800afbe:	041b      	lsls	r3, r3, #16
 800afc0:	b9d3      	cbnz	r3, 800aff8 <__hi0bits+0x3c>
 800afc2:	0400      	lsls	r0, r0, #16
 800afc4:	2310      	movs	r3, #16
 800afc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afca:	bf04      	itt	eq
 800afcc:	0200      	lsleq	r0, r0, #8
 800afce:	3308      	addeq	r3, #8
 800afd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afd4:	bf04      	itt	eq
 800afd6:	0100      	lsleq	r0, r0, #4
 800afd8:	3304      	addeq	r3, #4
 800afda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afde:	bf04      	itt	eq
 800afe0:	0080      	lsleq	r0, r0, #2
 800afe2:	3302      	addeq	r3, #2
 800afe4:	2800      	cmp	r0, #0
 800afe6:	db05      	blt.n	800aff4 <__hi0bits+0x38>
 800afe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afec:	f103 0301 	add.w	r3, r3, #1
 800aff0:	bf08      	it	eq
 800aff2:	2320      	moveq	r3, #32
 800aff4:	4618      	mov	r0, r3
 800aff6:	4770      	bx	lr
 800aff8:	2300      	movs	r3, #0
 800affa:	e7e4      	b.n	800afc6 <__hi0bits+0xa>

0800affc <__lo0bits>:
 800affc:	6803      	ldr	r3, [r0, #0]
 800affe:	f013 0207 	ands.w	r2, r3, #7
 800b002:	4601      	mov	r1, r0
 800b004:	d00b      	beq.n	800b01e <__lo0bits+0x22>
 800b006:	07da      	lsls	r2, r3, #31
 800b008:	d423      	bmi.n	800b052 <__lo0bits+0x56>
 800b00a:	0798      	lsls	r0, r3, #30
 800b00c:	bf49      	itett	mi
 800b00e:	085b      	lsrmi	r3, r3, #1
 800b010:	089b      	lsrpl	r3, r3, #2
 800b012:	2001      	movmi	r0, #1
 800b014:	600b      	strmi	r3, [r1, #0]
 800b016:	bf5c      	itt	pl
 800b018:	600b      	strpl	r3, [r1, #0]
 800b01a:	2002      	movpl	r0, #2
 800b01c:	4770      	bx	lr
 800b01e:	b298      	uxth	r0, r3
 800b020:	b9a8      	cbnz	r0, 800b04e <__lo0bits+0x52>
 800b022:	0c1b      	lsrs	r3, r3, #16
 800b024:	2010      	movs	r0, #16
 800b026:	b2da      	uxtb	r2, r3
 800b028:	b90a      	cbnz	r2, 800b02e <__lo0bits+0x32>
 800b02a:	3008      	adds	r0, #8
 800b02c:	0a1b      	lsrs	r3, r3, #8
 800b02e:	071a      	lsls	r2, r3, #28
 800b030:	bf04      	itt	eq
 800b032:	091b      	lsreq	r3, r3, #4
 800b034:	3004      	addeq	r0, #4
 800b036:	079a      	lsls	r2, r3, #30
 800b038:	bf04      	itt	eq
 800b03a:	089b      	lsreq	r3, r3, #2
 800b03c:	3002      	addeq	r0, #2
 800b03e:	07da      	lsls	r2, r3, #31
 800b040:	d403      	bmi.n	800b04a <__lo0bits+0x4e>
 800b042:	085b      	lsrs	r3, r3, #1
 800b044:	f100 0001 	add.w	r0, r0, #1
 800b048:	d005      	beq.n	800b056 <__lo0bits+0x5a>
 800b04a:	600b      	str	r3, [r1, #0]
 800b04c:	4770      	bx	lr
 800b04e:	4610      	mov	r0, r2
 800b050:	e7e9      	b.n	800b026 <__lo0bits+0x2a>
 800b052:	2000      	movs	r0, #0
 800b054:	4770      	bx	lr
 800b056:	2020      	movs	r0, #32
 800b058:	4770      	bx	lr
	...

0800b05c <__i2b>:
 800b05c:	b510      	push	{r4, lr}
 800b05e:	460c      	mov	r4, r1
 800b060:	2101      	movs	r1, #1
 800b062:	f7ff ff03 	bl	800ae6c <_Balloc>
 800b066:	4602      	mov	r2, r0
 800b068:	b928      	cbnz	r0, 800b076 <__i2b+0x1a>
 800b06a:	4b05      	ldr	r3, [pc, #20]	; (800b080 <__i2b+0x24>)
 800b06c:	4805      	ldr	r0, [pc, #20]	; (800b084 <__i2b+0x28>)
 800b06e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b072:	f000 fdf5 	bl	800bc60 <__assert_func>
 800b076:	2301      	movs	r3, #1
 800b078:	6144      	str	r4, [r0, #20]
 800b07a:	6103      	str	r3, [r0, #16]
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop
 800b080:	0800c3a4 	.word	0x0800c3a4
 800b084:	0800c418 	.word	0x0800c418

0800b088 <__multiply>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	4691      	mov	r9, r2
 800b08e:	690a      	ldr	r2, [r1, #16]
 800b090:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b094:	429a      	cmp	r2, r3
 800b096:	bfb8      	it	lt
 800b098:	460b      	movlt	r3, r1
 800b09a:	460c      	mov	r4, r1
 800b09c:	bfbc      	itt	lt
 800b09e:	464c      	movlt	r4, r9
 800b0a0:	4699      	movlt	r9, r3
 800b0a2:	6927      	ldr	r7, [r4, #16]
 800b0a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0a8:	68a3      	ldr	r3, [r4, #8]
 800b0aa:	6861      	ldr	r1, [r4, #4]
 800b0ac:	eb07 060a 	add.w	r6, r7, sl
 800b0b0:	42b3      	cmp	r3, r6
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	bfb8      	it	lt
 800b0b6:	3101      	addlt	r1, #1
 800b0b8:	f7ff fed8 	bl	800ae6c <_Balloc>
 800b0bc:	b930      	cbnz	r0, 800b0cc <__multiply+0x44>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b44      	ldr	r3, [pc, #272]	; (800b1d4 <__multiply+0x14c>)
 800b0c2:	4845      	ldr	r0, [pc, #276]	; (800b1d8 <__multiply+0x150>)
 800b0c4:	f240 115d 	movw	r1, #349	; 0x15d
 800b0c8:	f000 fdca 	bl	800bc60 <__assert_func>
 800b0cc:	f100 0514 	add.w	r5, r0, #20
 800b0d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	4543      	cmp	r3, r8
 800b0da:	d321      	bcc.n	800b120 <__multiply+0x98>
 800b0dc:	f104 0314 	add.w	r3, r4, #20
 800b0e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0e4:	f109 0314 	add.w	r3, r9, #20
 800b0e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0ec:	9202      	str	r2, [sp, #8]
 800b0ee:	1b3a      	subs	r2, r7, r4
 800b0f0:	3a15      	subs	r2, #21
 800b0f2:	f022 0203 	bic.w	r2, r2, #3
 800b0f6:	3204      	adds	r2, #4
 800b0f8:	f104 0115 	add.w	r1, r4, #21
 800b0fc:	428f      	cmp	r7, r1
 800b0fe:	bf38      	it	cc
 800b100:	2204      	movcc	r2, #4
 800b102:	9201      	str	r2, [sp, #4]
 800b104:	9a02      	ldr	r2, [sp, #8]
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d80c      	bhi.n	800b126 <__multiply+0x9e>
 800b10c:	2e00      	cmp	r6, #0
 800b10e:	dd03      	ble.n	800b118 <__multiply+0x90>
 800b110:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b114:	2b00      	cmp	r3, #0
 800b116:	d05a      	beq.n	800b1ce <__multiply+0x146>
 800b118:	6106      	str	r6, [r0, #16]
 800b11a:	b005      	add	sp, #20
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b120:	f843 2b04 	str.w	r2, [r3], #4
 800b124:	e7d8      	b.n	800b0d8 <__multiply+0x50>
 800b126:	f8b3 a000 	ldrh.w	sl, [r3]
 800b12a:	f1ba 0f00 	cmp.w	sl, #0
 800b12e:	d024      	beq.n	800b17a <__multiply+0xf2>
 800b130:	f104 0e14 	add.w	lr, r4, #20
 800b134:	46a9      	mov	r9, r5
 800b136:	f04f 0c00 	mov.w	ip, #0
 800b13a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b13e:	f8d9 1000 	ldr.w	r1, [r9]
 800b142:	fa1f fb82 	uxth.w	fp, r2
 800b146:	b289      	uxth	r1, r1
 800b148:	fb0a 110b 	mla	r1, sl, fp, r1
 800b14c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b150:	f8d9 2000 	ldr.w	r2, [r9]
 800b154:	4461      	add	r1, ip
 800b156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b15a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b15e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b162:	b289      	uxth	r1, r1
 800b164:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b168:	4577      	cmp	r7, lr
 800b16a:	f849 1b04 	str.w	r1, [r9], #4
 800b16e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b172:	d8e2      	bhi.n	800b13a <__multiply+0xb2>
 800b174:	9a01      	ldr	r2, [sp, #4]
 800b176:	f845 c002 	str.w	ip, [r5, r2]
 800b17a:	9a03      	ldr	r2, [sp, #12]
 800b17c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b180:	3304      	adds	r3, #4
 800b182:	f1b9 0f00 	cmp.w	r9, #0
 800b186:	d020      	beq.n	800b1ca <__multiply+0x142>
 800b188:	6829      	ldr	r1, [r5, #0]
 800b18a:	f104 0c14 	add.w	ip, r4, #20
 800b18e:	46ae      	mov	lr, r5
 800b190:	f04f 0a00 	mov.w	sl, #0
 800b194:	f8bc b000 	ldrh.w	fp, [ip]
 800b198:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b19c:	fb09 220b 	mla	r2, r9, fp, r2
 800b1a0:	4492      	add	sl, r2
 800b1a2:	b289      	uxth	r1, r1
 800b1a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b1a8:	f84e 1b04 	str.w	r1, [lr], #4
 800b1ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b1b0:	f8be 1000 	ldrh.w	r1, [lr]
 800b1b4:	0c12      	lsrs	r2, r2, #16
 800b1b6:	fb09 1102 	mla	r1, r9, r2, r1
 800b1ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b1be:	4567      	cmp	r7, ip
 800b1c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1c4:	d8e6      	bhi.n	800b194 <__multiply+0x10c>
 800b1c6:	9a01      	ldr	r2, [sp, #4]
 800b1c8:	50a9      	str	r1, [r5, r2]
 800b1ca:	3504      	adds	r5, #4
 800b1cc:	e79a      	b.n	800b104 <__multiply+0x7c>
 800b1ce:	3e01      	subs	r6, #1
 800b1d0:	e79c      	b.n	800b10c <__multiply+0x84>
 800b1d2:	bf00      	nop
 800b1d4:	0800c3a4 	.word	0x0800c3a4
 800b1d8:	0800c418 	.word	0x0800c418

0800b1dc <__pow5mult>:
 800b1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	f012 0203 	ands.w	r2, r2, #3
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	460f      	mov	r7, r1
 800b1ea:	d007      	beq.n	800b1fc <__pow5mult+0x20>
 800b1ec:	4c25      	ldr	r4, [pc, #148]	; (800b284 <__pow5mult+0xa8>)
 800b1ee:	3a01      	subs	r2, #1
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1f6:	f7ff fe9b 	bl	800af30 <__multadd>
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	10ad      	asrs	r5, r5, #2
 800b1fe:	d03d      	beq.n	800b27c <__pow5mult+0xa0>
 800b200:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b202:	b97c      	cbnz	r4, 800b224 <__pow5mult+0x48>
 800b204:	2010      	movs	r0, #16
 800b206:	f7ff fe1b 	bl	800ae40 <malloc>
 800b20a:	4602      	mov	r2, r0
 800b20c:	6270      	str	r0, [r6, #36]	; 0x24
 800b20e:	b928      	cbnz	r0, 800b21c <__pow5mult+0x40>
 800b210:	4b1d      	ldr	r3, [pc, #116]	; (800b288 <__pow5mult+0xac>)
 800b212:	481e      	ldr	r0, [pc, #120]	; (800b28c <__pow5mult+0xb0>)
 800b214:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b218:	f000 fd22 	bl	800bc60 <__assert_func>
 800b21c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b220:	6004      	str	r4, [r0, #0]
 800b222:	60c4      	str	r4, [r0, #12]
 800b224:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b228:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b22c:	b94c      	cbnz	r4, 800b242 <__pow5mult+0x66>
 800b22e:	f240 2171 	movw	r1, #625	; 0x271
 800b232:	4630      	mov	r0, r6
 800b234:	f7ff ff12 	bl	800b05c <__i2b>
 800b238:	2300      	movs	r3, #0
 800b23a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b23e:	4604      	mov	r4, r0
 800b240:	6003      	str	r3, [r0, #0]
 800b242:	f04f 0900 	mov.w	r9, #0
 800b246:	07eb      	lsls	r3, r5, #31
 800b248:	d50a      	bpl.n	800b260 <__pow5mult+0x84>
 800b24a:	4639      	mov	r1, r7
 800b24c:	4622      	mov	r2, r4
 800b24e:	4630      	mov	r0, r6
 800b250:	f7ff ff1a 	bl	800b088 <__multiply>
 800b254:	4639      	mov	r1, r7
 800b256:	4680      	mov	r8, r0
 800b258:	4630      	mov	r0, r6
 800b25a:	f7ff fe47 	bl	800aeec <_Bfree>
 800b25e:	4647      	mov	r7, r8
 800b260:	106d      	asrs	r5, r5, #1
 800b262:	d00b      	beq.n	800b27c <__pow5mult+0xa0>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	b938      	cbnz	r0, 800b278 <__pow5mult+0x9c>
 800b268:	4622      	mov	r2, r4
 800b26a:	4621      	mov	r1, r4
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7ff ff0b 	bl	800b088 <__multiply>
 800b272:	6020      	str	r0, [r4, #0]
 800b274:	f8c0 9000 	str.w	r9, [r0]
 800b278:	4604      	mov	r4, r0
 800b27a:	e7e4      	b.n	800b246 <__pow5mult+0x6a>
 800b27c:	4638      	mov	r0, r7
 800b27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b282:	bf00      	nop
 800b284:	0800c568 	.word	0x0800c568
 800b288:	0800c332 	.word	0x0800c332
 800b28c:	0800c418 	.word	0x0800c418

0800b290 <__lshift>:
 800b290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b294:	460c      	mov	r4, r1
 800b296:	6849      	ldr	r1, [r1, #4]
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b29e:	68a3      	ldr	r3, [r4, #8]
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	4691      	mov	r9, r2
 800b2a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2a8:	f108 0601 	add.w	r6, r8, #1
 800b2ac:	42b3      	cmp	r3, r6
 800b2ae:	db0b      	blt.n	800b2c8 <__lshift+0x38>
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f7ff fddb 	bl	800ae6c <_Balloc>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	b948      	cbnz	r0, 800b2ce <__lshift+0x3e>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	4b2a      	ldr	r3, [pc, #168]	; (800b368 <__lshift+0xd8>)
 800b2be:	482b      	ldr	r0, [pc, #172]	; (800b36c <__lshift+0xdc>)
 800b2c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2c4:	f000 fccc 	bl	800bc60 <__assert_func>
 800b2c8:	3101      	adds	r1, #1
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	e7ee      	b.n	800b2ac <__lshift+0x1c>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f100 0114 	add.w	r1, r0, #20
 800b2d4:	f100 0210 	add.w	r2, r0, #16
 800b2d8:	4618      	mov	r0, r3
 800b2da:	4553      	cmp	r3, sl
 800b2dc:	db37      	blt.n	800b34e <__lshift+0xbe>
 800b2de:	6920      	ldr	r0, [r4, #16]
 800b2e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2e4:	f104 0314 	add.w	r3, r4, #20
 800b2e8:	f019 091f 	ands.w	r9, r9, #31
 800b2ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2f4:	d02f      	beq.n	800b356 <__lshift+0xc6>
 800b2f6:	f1c9 0e20 	rsb	lr, r9, #32
 800b2fa:	468a      	mov	sl, r1
 800b2fc:	f04f 0c00 	mov.w	ip, #0
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	fa02 f209 	lsl.w	r2, r2, r9
 800b306:	ea42 020c 	orr.w	r2, r2, ip
 800b30a:	f84a 2b04 	str.w	r2, [sl], #4
 800b30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b312:	4298      	cmp	r0, r3
 800b314:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b318:	d8f2      	bhi.n	800b300 <__lshift+0x70>
 800b31a:	1b03      	subs	r3, r0, r4
 800b31c:	3b15      	subs	r3, #21
 800b31e:	f023 0303 	bic.w	r3, r3, #3
 800b322:	3304      	adds	r3, #4
 800b324:	f104 0215 	add.w	r2, r4, #21
 800b328:	4290      	cmp	r0, r2
 800b32a:	bf38      	it	cc
 800b32c:	2304      	movcc	r3, #4
 800b32e:	f841 c003 	str.w	ip, [r1, r3]
 800b332:	f1bc 0f00 	cmp.w	ip, #0
 800b336:	d001      	beq.n	800b33c <__lshift+0xac>
 800b338:	f108 0602 	add.w	r6, r8, #2
 800b33c:	3e01      	subs	r6, #1
 800b33e:	4638      	mov	r0, r7
 800b340:	612e      	str	r6, [r5, #16]
 800b342:	4621      	mov	r1, r4
 800b344:	f7ff fdd2 	bl	800aeec <_Bfree>
 800b348:	4628      	mov	r0, r5
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b352:	3301      	adds	r3, #1
 800b354:	e7c1      	b.n	800b2da <__lshift+0x4a>
 800b356:	3904      	subs	r1, #4
 800b358:	f853 2b04 	ldr.w	r2, [r3], #4
 800b35c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b360:	4298      	cmp	r0, r3
 800b362:	d8f9      	bhi.n	800b358 <__lshift+0xc8>
 800b364:	e7ea      	b.n	800b33c <__lshift+0xac>
 800b366:	bf00      	nop
 800b368:	0800c3a4 	.word	0x0800c3a4
 800b36c:	0800c418 	.word	0x0800c418

0800b370 <__mcmp>:
 800b370:	b530      	push	{r4, r5, lr}
 800b372:	6902      	ldr	r2, [r0, #16]
 800b374:	690c      	ldr	r4, [r1, #16]
 800b376:	1b12      	subs	r2, r2, r4
 800b378:	d10e      	bne.n	800b398 <__mcmp+0x28>
 800b37a:	f100 0314 	add.w	r3, r0, #20
 800b37e:	3114      	adds	r1, #20
 800b380:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b384:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b388:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b38c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b390:	42a5      	cmp	r5, r4
 800b392:	d003      	beq.n	800b39c <__mcmp+0x2c>
 800b394:	d305      	bcc.n	800b3a2 <__mcmp+0x32>
 800b396:	2201      	movs	r2, #1
 800b398:	4610      	mov	r0, r2
 800b39a:	bd30      	pop	{r4, r5, pc}
 800b39c:	4283      	cmp	r3, r0
 800b39e:	d3f3      	bcc.n	800b388 <__mcmp+0x18>
 800b3a0:	e7fa      	b.n	800b398 <__mcmp+0x28>
 800b3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a6:	e7f7      	b.n	800b398 <__mcmp+0x28>

0800b3a8 <__mdiff>:
 800b3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	4690      	mov	r8, r2
 800b3b6:	f7ff ffdb 	bl	800b370 <__mcmp>
 800b3ba:	1e05      	subs	r5, r0, #0
 800b3bc:	d110      	bne.n	800b3e0 <__mdiff+0x38>
 800b3be:	4629      	mov	r1, r5
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7ff fd53 	bl	800ae6c <_Balloc>
 800b3c6:	b930      	cbnz	r0, 800b3d6 <__mdiff+0x2e>
 800b3c8:	4b3a      	ldr	r3, [pc, #232]	; (800b4b4 <__mdiff+0x10c>)
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	f240 2132 	movw	r1, #562	; 0x232
 800b3d0:	4839      	ldr	r0, [pc, #228]	; (800b4b8 <__mdiff+0x110>)
 800b3d2:	f000 fc45 	bl	800bc60 <__assert_func>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e0:	bfa4      	itt	ge
 800b3e2:	4643      	movge	r3, r8
 800b3e4:	46a0      	movge	r8, r4
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3ec:	bfa6      	itte	ge
 800b3ee:	461c      	movge	r4, r3
 800b3f0:	2500      	movge	r5, #0
 800b3f2:	2501      	movlt	r5, #1
 800b3f4:	f7ff fd3a 	bl	800ae6c <_Balloc>
 800b3f8:	b920      	cbnz	r0, 800b404 <__mdiff+0x5c>
 800b3fa:	4b2e      	ldr	r3, [pc, #184]	; (800b4b4 <__mdiff+0x10c>)
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b402:	e7e5      	b.n	800b3d0 <__mdiff+0x28>
 800b404:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b408:	6926      	ldr	r6, [r4, #16]
 800b40a:	60c5      	str	r5, [r0, #12]
 800b40c:	f104 0914 	add.w	r9, r4, #20
 800b410:	f108 0514 	add.w	r5, r8, #20
 800b414:	f100 0e14 	add.w	lr, r0, #20
 800b418:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b41c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b420:	f108 0210 	add.w	r2, r8, #16
 800b424:	46f2      	mov	sl, lr
 800b426:	2100      	movs	r1, #0
 800b428:	f859 3b04 	ldr.w	r3, [r9], #4
 800b42c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b430:	fa1f f883 	uxth.w	r8, r3
 800b434:	fa11 f18b 	uxtah	r1, r1, fp
 800b438:	0c1b      	lsrs	r3, r3, #16
 800b43a:	eba1 0808 	sub.w	r8, r1, r8
 800b43e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b442:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b446:	fa1f f888 	uxth.w	r8, r8
 800b44a:	1419      	asrs	r1, r3, #16
 800b44c:	454e      	cmp	r6, r9
 800b44e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b452:	f84a 3b04 	str.w	r3, [sl], #4
 800b456:	d8e7      	bhi.n	800b428 <__mdiff+0x80>
 800b458:	1b33      	subs	r3, r6, r4
 800b45a:	3b15      	subs	r3, #21
 800b45c:	f023 0303 	bic.w	r3, r3, #3
 800b460:	3304      	adds	r3, #4
 800b462:	3415      	adds	r4, #21
 800b464:	42a6      	cmp	r6, r4
 800b466:	bf38      	it	cc
 800b468:	2304      	movcc	r3, #4
 800b46a:	441d      	add	r5, r3
 800b46c:	4473      	add	r3, lr
 800b46e:	469e      	mov	lr, r3
 800b470:	462e      	mov	r6, r5
 800b472:	4566      	cmp	r6, ip
 800b474:	d30e      	bcc.n	800b494 <__mdiff+0xec>
 800b476:	f10c 0203 	add.w	r2, ip, #3
 800b47a:	1b52      	subs	r2, r2, r5
 800b47c:	f022 0203 	bic.w	r2, r2, #3
 800b480:	3d03      	subs	r5, #3
 800b482:	45ac      	cmp	ip, r5
 800b484:	bf38      	it	cc
 800b486:	2200      	movcc	r2, #0
 800b488:	441a      	add	r2, r3
 800b48a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b48e:	b17b      	cbz	r3, 800b4b0 <__mdiff+0x108>
 800b490:	6107      	str	r7, [r0, #16]
 800b492:	e7a3      	b.n	800b3dc <__mdiff+0x34>
 800b494:	f856 8b04 	ldr.w	r8, [r6], #4
 800b498:	fa11 f288 	uxtah	r2, r1, r8
 800b49c:	1414      	asrs	r4, r2, #16
 800b49e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4a2:	b292      	uxth	r2, r2
 800b4a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b4a8:	f84e 2b04 	str.w	r2, [lr], #4
 800b4ac:	1421      	asrs	r1, r4, #16
 800b4ae:	e7e0      	b.n	800b472 <__mdiff+0xca>
 800b4b0:	3f01      	subs	r7, #1
 800b4b2:	e7ea      	b.n	800b48a <__mdiff+0xe2>
 800b4b4:	0800c3a4 	.word	0x0800c3a4
 800b4b8:	0800c418 	.word	0x0800c418

0800b4bc <__d2b>:
 800b4bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4c0:	4689      	mov	r9, r1
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	ec57 6b10 	vmov	r6, r7, d0
 800b4c8:	4690      	mov	r8, r2
 800b4ca:	f7ff fccf 	bl	800ae6c <_Balloc>
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	b930      	cbnz	r0, 800b4e0 <__d2b+0x24>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	4b25      	ldr	r3, [pc, #148]	; (800b56c <__d2b+0xb0>)
 800b4d6:	4826      	ldr	r0, [pc, #152]	; (800b570 <__d2b+0xb4>)
 800b4d8:	f240 310a 	movw	r1, #778	; 0x30a
 800b4dc:	f000 fbc0 	bl	800bc60 <__assert_func>
 800b4e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4e8:	bb35      	cbnz	r5, 800b538 <__d2b+0x7c>
 800b4ea:	2e00      	cmp	r6, #0
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	d028      	beq.n	800b542 <__d2b+0x86>
 800b4f0:	4668      	mov	r0, sp
 800b4f2:	9600      	str	r6, [sp, #0]
 800b4f4:	f7ff fd82 	bl	800affc <__lo0bits>
 800b4f8:	9900      	ldr	r1, [sp, #0]
 800b4fa:	b300      	cbz	r0, 800b53e <__d2b+0x82>
 800b4fc:	9a01      	ldr	r2, [sp, #4]
 800b4fe:	f1c0 0320 	rsb	r3, r0, #32
 800b502:	fa02 f303 	lsl.w	r3, r2, r3
 800b506:	430b      	orrs	r3, r1
 800b508:	40c2      	lsrs	r2, r0
 800b50a:	6163      	str	r3, [r4, #20]
 800b50c:	9201      	str	r2, [sp, #4]
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	61a3      	str	r3, [r4, #24]
 800b512:	2b00      	cmp	r3, #0
 800b514:	bf14      	ite	ne
 800b516:	2202      	movne	r2, #2
 800b518:	2201      	moveq	r2, #1
 800b51a:	6122      	str	r2, [r4, #16]
 800b51c:	b1d5      	cbz	r5, 800b554 <__d2b+0x98>
 800b51e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b522:	4405      	add	r5, r0
 800b524:	f8c9 5000 	str.w	r5, [r9]
 800b528:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b52c:	f8c8 0000 	str.w	r0, [r8]
 800b530:	4620      	mov	r0, r4
 800b532:	b003      	add	sp, #12
 800b534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b53c:	e7d5      	b.n	800b4ea <__d2b+0x2e>
 800b53e:	6161      	str	r1, [r4, #20]
 800b540:	e7e5      	b.n	800b50e <__d2b+0x52>
 800b542:	a801      	add	r0, sp, #4
 800b544:	f7ff fd5a 	bl	800affc <__lo0bits>
 800b548:	9b01      	ldr	r3, [sp, #4]
 800b54a:	6163      	str	r3, [r4, #20]
 800b54c:	2201      	movs	r2, #1
 800b54e:	6122      	str	r2, [r4, #16]
 800b550:	3020      	adds	r0, #32
 800b552:	e7e3      	b.n	800b51c <__d2b+0x60>
 800b554:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b558:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b55c:	f8c9 0000 	str.w	r0, [r9]
 800b560:	6918      	ldr	r0, [r3, #16]
 800b562:	f7ff fd2b 	bl	800afbc <__hi0bits>
 800b566:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b56a:	e7df      	b.n	800b52c <__d2b+0x70>
 800b56c:	0800c3a4 	.word	0x0800c3a4
 800b570:	0800c418 	.word	0x0800c418

0800b574 <_calloc_r>:
 800b574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b576:	fba1 2402 	umull	r2, r4, r1, r2
 800b57a:	b94c      	cbnz	r4, 800b590 <_calloc_r+0x1c>
 800b57c:	4611      	mov	r1, r2
 800b57e:	9201      	str	r2, [sp, #4]
 800b580:	f000 f87a 	bl	800b678 <_malloc_r>
 800b584:	9a01      	ldr	r2, [sp, #4]
 800b586:	4605      	mov	r5, r0
 800b588:	b930      	cbnz	r0, 800b598 <_calloc_r+0x24>
 800b58a:	4628      	mov	r0, r5
 800b58c:	b003      	add	sp, #12
 800b58e:	bd30      	pop	{r4, r5, pc}
 800b590:	220c      	movs	r2, #12
 800b592:	6002      	str	r2, [r0, #0]
 800b594:	2500      	movs	r5, #0
 800b596:	e7f8      	b.n	800b58a <_calloc_r+0x16>
 800b598:	4621      	mov	r1, r4
 800b59a:	f7fd ffc1 	bl	8009520 <memset>
 800b59e:	e7f4      	b.n	800b58a <_calloc_r+0x16>

0800b5a0 <_free_r>:
 800b5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5a2:	2900      	cmp	r1, #0
 800b5a4:	d044      	beq.n	800b630 <_free_r+0x90>
 800b5a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5aa:	9001      	str	r0, [sp, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b5b2:	bfb8      	it	lt
 800b5b4:	18e4      	addlt	r4, r4, r3
 800b5b6:	f000 fcdf 	bl	800bf78 <__malloc_lock>
 800b5ba:	4a1e      	ldr	r2, [pc, #120]	; (800b634 <_free_r+0x94>)
 800b5bc:	9801      	ldr	r0, [sp, #4]
 800b5be:	6813      	ldr	r3, [r2, #0]
 800b5c0:	b933      	cbnz	r3, 800b5d0 <_free_r+0x30>
 800b5c2:	6063      	str	r3, [r4, #4]
 800b5c4:	6014      	str	r4, [r2, #0]
 800b5c6:	b003      	add	sp, #12
 800b5c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5cc:	f000 bcda 	b.w	800bf84 <__malloc_unlock>
 800b5d0:	42a3      	cmp	r3, r4
 800b5d2:	d908      	bls.n	800b5e6 <_free_r+0x46>
 800b5d4:	6825      	ldr	r5, [r4, #0]
 800b5d6:	1961      	adds	r1, r4, r5
 800b5d8:	428b      	cmp	r3, r1
 800b5da:	bf01      	itttt	eq
 800b5dc:	6819      	ldreq	r1, [r3, #0]
 800b5de:	685b      	ldreq	r3, [r3, #4]
 800b5e0:	1949      	addeq	r1, r1, r5
 800b5e2:	6021      	streq	r1, [r4, #0]
 800b5e4:	e7ed      	b.n	800b5c2 <_free_r+0x22>
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	b10b      	cbz	r3, 800b5f0 <_free_r+0x50>
 800b5ec:	42a3      	cmp	r3, r4
 800b5ee:	d9fa      	bls.n	800b5e6 <_free_r+0x46>
 800b5f0:	6811      	ldr	r1, [r2, #0]
 800b5f2:	1855      	adds	r5, r2, r1
 800b5f4:	42a5      	cmp	r5, r4
 800b5f6:	d10b      	bne.n	800b610 <_free_r+0x70>
 800b5f8:	6824      	ldr	r4, [r4, #0]
 800b5fa:	4421      	add	r1, r4
 800b5fc:	1854      	adds	r4, r2, r1
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	6011      	str	r1, [r2, #0]
 800b602:	d1e0      	bne.n	800b5c6 <_free_r+0x26>
 800b604:	681c      	ldr	r4, [r3, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	6053      	str	r3, [r2, #4]
 800b60a:	4421      	add	r1, r4
 800b60c:	6011      	str	r1, [r2, #0]
 800b60e:	e7da      	b.n	800b5c6 <_free_r+0x26>
 800b610:	d902      	bls.n	800b618 <_free_r+0x78>
 800b612:	230c      	movs	r3, #12
 800b614:	6003      	str	r3, [r0, #0]
 800b616:	e7d6      	b.n	800b5c6 <_free_r+0x26>
 800b618:	6825      	ldr	r5, [r4, #0]
 800b61a:	1961      	adds	r1, r4, r5
 800b61c:	428b      	cmp	r3, r1
 800b61e:	bf04      	itt	eq
 800b620:	6819      	ldreq	r1, [r3, #0]
 800b622:	685b      	ldreq	r3, [r3, #4]
 800b624:	6063      	str	r3, [r4, #4]
 800b626:	bf04      	itt	eq
 800b628:	1949      	addeq	r1, r1, r5
 800b62a:	6021      	streq	r1, [r4, #0]
 800b62c:	6054      	str	r4, [r2, #4]
 800b62e:	e7ca      	b.n	800b5c6 <_free_r+0x26>
 800b630:	b003      	add	sp, #12
 800b632:	bd30      	pop	{r4, r5, pc}
 800b634:	200005b8 	.word	0x200005b8

0800b638 <sbrk_aligned>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	4e0e      	ldr	r6, [pc, #56]	; (800b674 <sbrk_aligned+0x3c>)
 800b63c:	460c      	mov	r4, r1
 800b63e:	6831      	ldr	r1, [r6, #0]
 800b640:	4605      	mov	r5, r0
 800b642:	b911      	cbnz	r1, 800b64a <sbrk_aligned+0x12>
 800b644:	f000 f9e6 	bl	800ba14 <_sbrk_r>
 800b648:	6030      	str	r0, [r6, #0]
 800b64a:	4621      	mov	r1, r4
 800b64c:	4628      	mov	r0, r5
 800b64e:	f000 f9e1 	bl	800ba14 <_sbrk_r>
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	d00a      	beq.n	800b66c <sbrk_aligned+0x34>
 800b656:	1cc4      	adds	r4, r0, #3
 800b658:	f024 0403 	bic.w	r4, r4, #3
 800b65c:	42a0      	cmp	r0, r4
 800b65e:	d007      	beq.n	800b670 <sbrk_aligned+0x38>
 800b660:	1a21      	subs	r1, r4, r0
 800b662:	4628      	mov	r0, r5
 800b664:	f000 f9d6 	bl	800ba14 <_sbrk_r>
 800b668:	3001      	adds	r0, #1
 800b66a:	d101      	bne.n	800b670 <sbrk_aligned+0x38>
 800b66c:	f04f 34ff 	mov.w	r4, #4294967295
 800b670:	4620      	mov	r0, r4
 800b672:	bd70      	pop	{r4, r5, r6, pc}
 800b674:	200005bc 	.word	0x200005bc

0800b678 <_malloc_r>:
 800b678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b67c:	1ccd      	adds	r5, r1, #3
 800b67e:	f025 0503 	bic.w	r5, r5, #3
 800b682:	3508      	adds	r5, #8
 800b684:	2d0c      	cmp	r5, #12
 800b686:	bf38      	it	cc
 800b688:	250c      	movcc	r5, #12
 800b68a:	2d00      	cmp	r5, #0
 800b68c:	4607      	mov	r7, r0
 800b68e:	db01      	blt.n	800b694 <_malloc_r+0x1c>
 800b690:	42a9      	cmp	r1, r5
 800b692:	d905      	bls.n	800b6a0 <_malloc_r+0x28>
 800b694:	230c      	movs	r3, #12
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	2600      	movs	r6, #0
 800b69a:	4630      	mov	r0, r6
 800b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a0:	4e2e      	ldr	r6, [pc, #184]	; (800b75c <_malloc_r+0xe4>)
 800b6a2:	f000 fc69 	bl	800bf78 <__malloc_lock>
 800b6a6:	6833      	ldr	r3, [r6, #0]
 800b6a8:	461c      	mov	r4, r3
 800b6aa:	bb34      	cbnz	r4, 800b6fa <_malloc_r+0x82>
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f7ff ffc2 	bl	800b638 <sbrk_aligned>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	d14d      	bne.n	800b756 <_malloc_r+0xde>
 800b6ba:	6834      	ldr	r4, [r6, #0]
 800b6bc:	4626      	mov	r6, r4
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	d140      	bne.n	800b744 <_malloc_r+0xcc>
 800b6c2:	6823      	ldr	r3, [r4, #0]
 800b6c4:	4631      	mov	r1, r6
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	eb04 0803 	add.w	r8, r4, r3
 800b6cc:	f000 f9a2 	bl	800ba14 <_sbrk_r>
 800b6d0:	4580      	cmp	r8, r0
 800b6d2:	d13a      	bne.n	800b74a <_malloc_r+0xd2>
 800b6d4:	6821      	ldr	r1, [r4, #0]
 800b6d6:	3503      	adds	r5, #3
 800b6d8:	1a6d      	subs	r5, r5, r1
 800b6da:	f025 0503 	bic.w	r5, r5, #3
 800b6de:	3508      	adds	r5, #8
 800b6e0:	2d0c      	cmp	r5, #12
 800b6e2:	bf38      	it	cc
 800b6e4:	250c      	movcc	r5, #12
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	f7ff ffa5 	bl	800b638 <sbrk_aligned>
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	d02b      	beq.n	800b74a <_malloc_r+0xd2>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	442b      	add	r3, r5
 800b6f6:	6023      	str	r3, [r4, #0]
 800b6f8:	e00e      	b.n	800b718 <_malloc_r+0xa0>
 800b6fa:	6822      	ldr	r2, [r4, #0]
 800b6fc:	1b52      	subs	r2, r2, r5
 800b6fe:	d41e      	bmi.n	800b73e <_malloc_r+0xc6>
 800b700:	2a0b      	cmp	r2, #11
 800b702:	d916      	bls.n	800b732 <_malloc_r+0xba>
 800b704:	1961      	adds	r1, r4, r5
 800b706:	42a3      	cmp	r3, r4
 800b708:	6025      	str	r5, [r4, #0]
 800b70a:	bf18      	it	ne
 800b70c:	6059      	strne	r1, [r3, #4]
 800b70e:	6863      	ldr	r3, [r4, #4]
 800b710:	bf08      	it	eq
 800b712:	6031      	streq	r1, [r6, #0]
 800b714:	5162      	str	r2, [r4, r5]
 800b716:	604b      	str	r3, [r1, #4]
 800b718:	4638      	mov	r0, r7
 800b71a:	f104 060b 	add.w	r6, r4, #11
 800b71e:	f000 fc31 	bl	800bf84 <__malloc_unlock>
 800b722:	f026 0607 	bic.w	r6, r6, #7
 800b726:	1d23      	adds	r3, r4, #4
 800b728:	1af2      	subs	r2, r6, r3
 800b72a:	d0b6      	beq.n	800b69a <_malloc_r+0x22>
 800b72c:	1b9b      	subs	r3, r3, r6
 800b72e:	50a3      	str	r3, [r4, r2]
 800b730:	e7b3      	b.n	800b69a <_malloc_r+0x22>
 800b732:	6862      	ldr	r2, [r4, #4]
 800b734:	42a3      	cmp	r3, r4
 800b736:	bf0c      	ite	eq
 800b738:	6032      	streq	r2, [r6, #0]
 800b73a:	605a      	strne	r2, [r3, #4]
 800b73c:	e7ec      	b.n	800b718 <_malloc_r+0xa0>
 800b73e:	4623      	mov	r3, r4
 800b740:	6864      	ldr	r4, [r4, #4]
 800b742:	e7b2      	b.n	800b6aa <_malloc_r+0x32>
 800b744:	4634      	mov	r4, r6
 800b746:	6876      	ldr	r6, [r6, #4]
 800b748:	e7b9      	b.n	800b6be <_malloc_r+0x46>
 800b74a:	230c      	movs	r3, #12
 800b74c:	603b      	str	r3, [r7, #0]
 800b74e:	4638      	mov	r0, r7
 800b750:	f000 fc18 	bl	800bf84 <__malloc_unlock>
 800b754:	e7a1      	b.n	800b69a <_malloc_r+0x22>
 800b756:	6025      	str	r5, [r4, #0]
 800b758:	e7de      	b.n	800b718 <_malloc_r+0xa0>
 800b75a:	bf00      	nop
 800b75c:	200005b8 	.word	0x200005b8

0800b760 <__sfputc_r>:
 800b760:	6893      	ldr	r3, [r2, #8]
 800b762:	3b01      	subs	r3, #1
 800b764:	2b00      	cmp	r3, #0
 800b766:	b410      	push	{r4}
 800b768:	6093      	str	r3, [r2, #8]
 800b76a:	da08      	bge.n	800b77e <__sfputc_r+0x1e>
 800b76c:	6994      	ldr	r4, [r2, #24]
 800b76e:	42a3      	cmp	r3, r4
 800b770:	db01      	blt.n	800b776 <__sfputc_r+0x16>
 800b772:	290a      	cmp	r1, #10
 800b774:	d103      	bne.n	800b77e <__sfputc_r+0x1e>
 800b776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b77a:	f000 b99f 	b.w	800babc <__swbuf_r>
 800b77e:	6813      	ldr	r3, [r2, #0]
 800b780:	1c58      	adds	r0, r3, #1
 800b782:	6010      	str	r0, [r2, #0]
 800b784:	7019      	strb	r1, [r3, #0]
 800b786:	4608      	mov	r0, r1
 800b788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <__sfputs_r>:
 800b78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b790:	4606      	mov	r6, r0
 800b792:	460f      	mov	r7, r1
 800b794:	4614      	mov	r4, r2
 800b796:	18d5      	adds	r5, r2, r3
 800b798:	42ac      	cmp	r4, r5
 800b79a:	d101      	bne.n	800b7a0 <__sfputs_r+0x12>
 800b79c:	2000      	movs	r0, #0
 800b79e:	e007      	b.n	800b7b0 <__sfputs_r+0x22>
 800b7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a4:	463a      	mov	r2, r7
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f7ff ffda 	bl	800b760 <__sfputc_r>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d1f3      	bne.n	800b798 <__sfputs_r+0xa>
 800b7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7b4 <_vfiprintf_r>:
 800b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	460d      	mov	r5, r1
 800b7ba:	b09d      	sub	sp, #116	; 0x74
 800b7bc:	4614      	mov	r4, r2
 800b7be:	4698      	mov	r8, r3
 800b7c0:	4606      	mov	r6, r0
 800b7c2:	b118      	cbz	r0, 800b7cc <_vfiprintf_r+0x18>
 800b7c4:	6983      	ldr	r3, [r0, #24]
 800b7c6:	b90b      	cbnz	r3, 800b7cc <_vfiprintf_r+0x18>
 800b7c8:	f7ff fa94 	bl	800acf4 <__sinit>
 800b7cc:	4b89      	ldr	r3, [pc, #548]	; (800b9f4 <_vfiprintf_r+0x240>)
 800b7ce:	429d      	cmp	r5, r3
 800b7d0:	d11b      	bne.n	800b80a <_vfiprintf_r+0x56>
 800b7d2:	6875      	ldr	r5, [r6, #4]
 800b7d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7d6:	07d9      	lsls	r1, r3, #31
 800b7d8:	d405      	bmi.n	800b7e6 <_vfiprintf_r+0x32>
 800b7da:	89ab      	ldrh	r3, [r5, #12]
 800b7dc:	059a      	lsls	r2, r3, #22
 800b7de:	d402      	bmi.n	800b7e6 <_vfiprintf_r+0x32>
 800b7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7e2:	f7ff fb2a 	bl	800ae3a <__retarget_lock_acquire_recursive>
 800b7e6:	89ab      	ldrh	r3, [r5, #12]
 800b7e8:	071b      	lsls	r3, r3, #28
 800b7ea:	d501      	bpl.n	800b7f0 <_vfiprintf_r+0x3c>
 800b7ec:	692b      	ldr	r3, [r5, #16]
 800b7ee:	b9eb      	cbnz	r3, 800b82c <_vfiprintf_r+0x78>
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f000 f9c6 	bl	800bb84 <__swsetup_r>
 800b7f8:	b1c0      	cbz	r0, 800b82c <_vfiprintf_r+0x78>
 800b7fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7fc:	07dc      	lsls	r4, r3, #31
 800b7fe:	d50e      	bpl.n	800b81e <_vfiprintf_r+0x6a>
 800b800:	f04f 30ff 	mov.w	r0, #4294967295
 800b804:	b01d      	add	sp, #116	; 0x74
 800b806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80a:	4b7b      	ldr	r3, [pc, #492]	; (800b9f8 <_vfiprintf_r+0x244>)
 800b80c:	429d      	cmp	r5, r3
 800b80e:	d101      	bne.n	800b814 <_vfiprintf_r+0x60>
 800b810:	68b5      	ldr	r5, [r6, #8]
 800b812:	e7df      	b.n	800b7d4 <_vfiprintf_r+0x20>
 800b814:	4b79      	ldr	r3, [pc, #484]	; (800b9fc <_vfiprintf_r+0x248>)
 800b816:	429d      	cmp	r5, r3
 800b818:	bf08      	it	eq
 800b81a:	68f5      	ldreq	r5, [r6, #12]
 800b81c:	e7da      	b.n	800b7d4 <_vfiprintf_r+0x20>
 800b81e:	89ab      	ldrh	r3, [r5, #12]
 800b820:	0598      	lsls	r0, r3, #22
 800b822:	d4ed      	bmi.n	800b800 <_vfiprintf_r+0x4c>
 800b824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b826:	f7ff fb09 	bl	800ae3c <__retarget_lock_release_recursive>
 800b82a:	e7e9      	b.n	800b800 <_vfiprintf_r+0x4c>
 800b82c:	2300      	movs	r3, #0
 800b82e:	9309      	str	r3, [sp, #36]	; 0x24
 800b830:	2320      	movs	r3, #32
 800b832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b836:	f8cd 800c 	str.w	r8, [sp, #12]
 800b83a:	2330      	movs	r3, #48	; 0x30
 800b83c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba00 <_vfiprintf_r+0x24c>
 800b840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b844:	f04f 0901 	mov.w	r9, #1
 800b848:	4623      	mov	r3, r4
 800b84a:	469a      	mov	sl, r3
 800b84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b850:	b10a      	cbz	r2, 800b856 <_vfiprintf_r+0xa2>
 800b852:	2a25      	cmp	r2, #37	; 0x25
 800b854:	d1f9      	bne.n	800b84a <_vfiprintf_r+0x96>
 800b856:	ebba 0b04 	subs.w	fp, sl, r4
 800b85a:	d00b      	beq.n	800b874 <_vfiprintf_r+0xc0>
 800b85c:	465b      	mov	r3, fp
 800b85e:	4622      	mov	r2, r4
 800b860:	4629      	mov	r1, r5
 800b862:	4630      	mov	r0, r6
 800b864:	f7ff ff93 	bl	800b78e <__sfputs_r>
 800b868:	3001      	adds	r0, #1
 800b86a:	f000 80aa 	beq.w	800b9c2 <_vfiprintf_r+0x20e>
 800b86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b870:	445a      	add	r2, fp
 800b872:	9209      	str	r2, [sp, #36]	; 0x24
 800b874:	f89a 3000 	ldrb.w	r3, [sl]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 80a2 	beq.w	800b9c2 <_vfiprintf_r+0x20e>
 800b87e:	2300      	movs	r3, #0
 800b880:	f04f 32ff 	mov.w	r2, #4294967295
 800b884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b888:	f10a 0a01 	add.w	sl, sl, #1
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	9307      	str	r3, [sp, #28]
 800b890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b894:	931a      	str	r3, [sp, #104]	; 0x68
 800b896:	4654      	mov	r4, sl
 800b898:	2205      	movs	r2, #5
 800b89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89e:	4858      	ldr	r0, [pc, #352]	; (800ba00 <_vfiprintf_r+0x24c>)
 800b8a0:	f7f4 fca6 	bl	80001f0 <memchr>
 800b8a4:	9a04      	ldr	r2, [sp, #16]
 800b8a6:	b9d8      	cbnz	r0, 800b8e0 <_vfiprintf_r+0x12c>
 800b8a8:	06d1      	lsls	r1, r2, #27
 800b8aa:	bf44      	itt	mi
 800b8ac:	2320      	movmi	r3, #32
 800b8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b2:	0713      	lsls	r3, r2, #28
 800b8b4:	bf44      	itt	mi
 800b8b6:	232b      	movmi	r3, #43	; 0x2b
 800b8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c2:	d015      	beq.n	800b8f0 <_vfiprintf_r+0x13c>
 800b8c4:	9a07      	ldr	r2, [sp, #28]
 800b8c6:	4654      	mov	r4, sl
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	f04f 0c0a 	mov.w	ip, #10
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d4:	3b30      	subs	r3, #48	; 0x30
 800b8d6:	2b09      	cmp	r3, #9
 800b8d8:	d94e      	bls.n	800b978 <_vfiprintf_r+0x1c4>
 800b8da:	b1b0      	cbz	r0, 800b90a <_vfiprintf_r+0x156>
 800b8dc:	9207      	str	r2, [sp, #28]
 800b8de:	e014      	b.n	800b90a <_vfiprintf_r+0x156>
 800b8e0:	eba0 0308 	sub.w	r3, r0, r8
 800b8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	46a2      	mov	sl, r4
 800b8ee:	e7d2      	b.n	800b896 <_vfiprintf_r+0xe2>
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	1d19      	adds	r1, r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	9103      	str	r1, [sp, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bfbb      	ittet	lt
 800b8fc:	425b      	neglt	r3, r3
 800b8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b902:	9307      	strge	r3, [sp, #28]
 800b904:	9307      	strlt	r3, [sp, #28]
 800b906:	bfb8      	it	lt
 800b908:	9204      	strlt	r2, [sp, #16]
 800b90a:	7823      	ldrb	r3, [r4, #0]
 800b90c:	2b2e      	cmp	r3, #46	; 0x2e
 800b90e:	d10c      	bne.n	800b92a <_vfiprintf_r+0x176>
 800b910:	7863      	ldrb	r3, [r4, #1]
 800b912:	2b2a      	cmp	r3, #42	; 0x2a
 800b914:	d135      	bne.n	800b982 <_vfiprintf_r+0x1ce>
 800b916:	9b03      	ldr	r3, [sp, #12]
 800b918:	1d1a      	adds	r2, r3, #4
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	9203      	str	r2, [sp, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	bfb8      	it	lt
 800b922:	f04f 33ff 	movlt.w	r3, #4294967295
 800b926:	3402      	adds	r4, #2
 800b928:	9305      	str	r3, [sp, #20]
 800b92a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba10 <_vfiprintf_r+0x25c>
 800b92e:	7821      	ldrb	r1, [r4, #0]
 800b930:	2203      	movs	r2, #3
 800b932:	4650      	mov	r0, sl
 800b934:	f7f4 fc5c 	bl	80001f0 <memchr>
 800b938:	b140      	cbz	r0, 800b94c <_vfiprintf_r+0x198>
 800b93a:	2340      	movs	r3, #64	; 0x40
 800b93c:	eba0 000a 	sub.w	r0, r0, sl
 800b940:	fa03 f000 	lsl.w	r0, r3, r0
 800b944:	9b04      	ldr	r3, [sp, #16]
 800b946:	4303      	orrs	r3, r0
 800b948:	3401      	adds	r4, #1
 800b94a:	9304      	str	r3, [sp, #16]
 800b94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b950:	482c      	ldr	r0, [pc, #176]	; (800ba04 <_vfiprintf_r+0x250>)
 800b952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b956:	2206      	movs	r2, #6
 800b958:	f7f4 fc4a 	bl	80001f0 <memchr>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d03f      	beq.n	800b9e0 <_vfiprintf_r+0x22c>
 800b960:	4b29      	ldr	r3, [pc, #164]	; (800ba08 <_vfiprintf_r+0x254>)
 800b962:	bb1b      	cbnz	r3, 800b9ac <_vfiprintf_r+0x1f8>
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	3307      	adds	r3, #7
 800b968:	f023 0307 	bic.w	r3, r3, #7
 800b96c:	3308      	adds	r3, #8
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b972:	443b      	add	r3, r7
 800b974:	9309      	str	r3, [sp, #36]	; 0x24
 800b976:	e767      	b.n	800b848 <_vfiprintf_r+0x94>
 800b978:	fb0c 3202 	mla	r2, ip, r2, r3
 800b97c:	460c      	mov	r4, r1
 800b97e:	2001      	movs	r0, #1
 800b980:	e7a5      	b.n	800b8ce <_vfiprintf_r+0x11a>
 800b982:	2300      	movs	r3, #0
 800b984:	3401      	adds	r4, #1
 800b986:	9305      	str	r3, [sp, #20]
 800b988:	4619      	mov	r1, r3
 800b98a:	f04f 0c0a 	mov.w	ip, #10
 800b98e:	4620      	mov	r0, r4
 800b990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b994:	3a30      	subs	r2, #48	; 0x30
 800b996:	2a09      	cmp	r2, #9
 800b998:	d903      	bls.n	800b9a2 <_vfiprintf_r+0x1ee>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d0c5      	beq.n	800b92a <_vfiprintf_r+0x176>
 800b99e:	9105      	str	r1, [sp, #20]
 800b9a0:	e7c3      	b.n	800b92a <_vfiprintf_r+0x176>
 800b9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e7f0      	b.n	800b98e <_vfiprintf_r+0x1da>
 800b9ac:	ab03      	add	r3, sp, #12
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	462a      	mov	r2, r5
 800b9b2:	4b16      	ldr	r3, [pc, #88]	; (800ba0c <_vfiprintf_r+0x258>)
 800b9b4:	a904      	add	r1, sp, #16
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7fd fe5a 	bl	8009670 <_printf_float>
 800b9bc:	4607      	mov	r7, r0
 800b9be:	1c78      	adds	r0, r7, #1
 800b9c0:	d1d6      	bne.n	800b970 <_vfiprintf_r+0x1bc>
 800b9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c4:	07d9      	lsls	r1, r3, #31
 800b9c6:	d405      	bmi.n	800b9d4 <_vfiprintf_r+0x220>
 800b9c8:	89ab      	ldrh	r3, [r5, #12]
 800b9ca:	059a      	lsls	r2, r3, #22
 800b9cc:	d402      	bmi.n	800b9d4 <_vfiprintf_r+0x220>
 800b9ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9d0:	f7ff fa34 	bl	800ae3c <__retarget_lock_release_recursive>
 800b9d4:	89ab      	ldrh	r3, [r5, #12]
 800b9d6:	065b      	lsls	r3, r3, #25
 800b9d8:	f53f af12 	bmi.w	800b800 <_vfiprintf_r+0x4c>
 800b9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9de:	e711      	b.n	800b804 <_vfiprintf_r+0x50>
 800b9e0:	ab03      	add	r3, sp, #12
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	462a      	mov	r2, r5
 800b9e6:	4b09      	ldr	r3, [pc, #36]	; (800ba0c <_vfiprintf_r+0x258>)
 800b9e8:	a904      	add	r1, sp, #16
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7fe f8e4 	bl	8009bb8 <_printf_i>
 800b9f0:	e7e4      	b.n	800b9bc <_vfiprintf_r+0x208>
 800b9f2:	bf00      	nop
 800b9f4:	0800c3d8 	.word	0x0800c3d8
 800b9f8:	0800c3f8 	.word	0x0800c3f8
 800b9fc:	0800c3b8 	.word	0x0800c3b8
 800ba00:	0800c574 	.word	0x0800c574
 800ba04:	0800c57e 	.word	0x0800c57e
 800ba08:	08009671 	.word	0x08009671
 800ba0c:	0800b78f 	.word	0x0800b78f
 800ba10:	0800c57a 	.word	0x0800c57a

0800ba14 <_sbrk_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d06      	ldr	r5, [pc, #24]	; (800ba30 <_sbrk_r+0x1c>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	602b      	str	r3, [r5, #0]
 800ba20:	f7f6 fadc 	bl	8001fdc <_sbrk>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_sbrk_r+0x1a>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_sbrk_r+0x1a>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	200005c0 	.word	0x200005c0

0800ba34 <__sread>:
 800ba34:	b510      	push	{r4, lr}
 800ba36:	460c      	mov	r4, r1
 800ba38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3c:	f000 faa8 	bl	800bf90 <_read_r>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	bfab      	itete	ge
 800ba44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba46:	89a3      	ldrhlt	r3, [r4, #12]
 800ba48:	181b      	addge	r3, r3, r0
 800ba4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba4e:	bfac      	ite	ge
 800ba50:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba52:	81a3      	strhlt	r3, [r4, #12]
 800ba54:	bd10      	pop	{r4, pc}

0800ba56 <__swrite>:
 800ba56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5a:	461f      	mov	r7, r3
 800ba5c:	898b      	ldrh	r3, [r1, #12]
 800ba5e:	05db      	lsls	r3, r3, #23
 800ba60:	4605      	mov	r5, r0
 800ba62:	460c      	mov	r4, r1
 800ba64:	4616      	mov	r6, r2
 800ba66:	d505      	bpl.n	800ba74 <__swrite+0x1e>
 800ba68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f000 f9f8 	bl	800be64 <_lseek_r>
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba7e:	81a3      	strh	r3, [r4, #12]
 800ba80:	4632      	mov	r2, r6
 800ba82:	463b      	mov	r3, r7
 800ba84:	4628      	mov	r0, r5
 800ba86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8a:	f000 b869 	b.w	800bb60 <_write_r>

0800ba8e <__sseek>:
 800ba8e:	b510      	push	{r4, lr}
 800ba90:	460c      	mov	r4, r1
 800ba92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba96:	f000 f9e5 	bl	800be64 <_lseek_r>
 800ba9a:	1c43      	adds	r3, r0, #1
 800ba9c:	89a3      	ldrh	r3, [r4, #12]
 800ba9e:	bf15      	itete	ne
 800baa0:	6560      	strne	r0, [r4, #84]	; 0x54
 800baa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800baa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baaa:	81a3      	strheq	r3, [r4, #12]
 800baac:	bf18      	it	ne
 800baae:	81a3      	strhne	r3, [r4, #12]
 800bab0:	bd10      	pop	{r4, pc}

0800bab2 <__sclose>:
 800bab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab6:	f000 b8f1 	b.w	800bc9c <_close_r>
	...

0800babc <__swbuf_r>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	460e      	mov	r6, r1
 800bac0:	4614      	mov	r4, r2
 800bac2:	4605      	mov	r5, r0
 800bac4:	b118      	cbz	r0, 800bace <__swbuf_r+0x12>
 800bac6:	6983      	ldr	r3, [r0, #24]
 800bac8:	b90b      	cbnz	r3, 800bace <__swbuf_r+0x12>
 800baca:	f7ff f913 	bl	800acf4 <__sinit>
 800bace:	4b21      	ldr	r3, [pc, #132]	; (800bb54 <__swbuf_r+0x98>)
 800bad0:	429c      	cmp	r4, r3
 800bad2:	d12b      	bne.n	800bb2c <__swbuf_r+0x70>
 800bad4:	686c      	ldr	r4, [r5, #4]
 800bad6:	69a3      	ldr	r3, [r4, #24]
 800bad8:	60a3      	str	r3, [r4, #8]
 800bada:	89a3      	ldrh	r3, [r4, #12]
 800badc:	071a      	lsls	r2, r3, #28
 800bade:	d52f      	bpl.n	800bb40 <__swbuf_r+0x84>
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	b36b      	cbz	r3, 800bb40 <__swbuf_r+0x84>
 800bae4:	6923      	ldr	r3, [r4, #16]
 800bae6:	6820      	ldr	r0, [r4, #0]
 800bae8:	1ac0      	subs	r0, r0, r3
 800baea:	6963      	ldr	r3, [r4, #20]
 800baec:	b2f6      	uxtb	r6, r6
 800baee:	4283      	cmp	r3, r0
 800baf0:	4637      	mov	r7, r6
 800baf2:	dc04      	bgt.n	800bafe <__swbuf_r+0x42>
 800baf4:	4621      	mov	r1, r4
 800baf6:	4628      	mov	r0, r5
 800baf8:	f000 f966 	bl	800bdc8 <_fflush_r>
 800bafc:	bb30      	cbnz	r0, 800bb4c <__swbuf_r+0x90>
 800bafe:	68a3      	ldr	r3, [r4, #8]
 800bb00:	3b01      	subs	r3, #1
 800bb02:	60a3      	str	r3, [r4, #8]
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	6022      	str	r2, [r4, #0]
 800bb0a:	701e      	strb	r6, [r3, #0]
 800bb0c:	6963      	ldr	r3, [r4, #20]
 800bb0e:	3001      	adds	r0, #1
 800bb10:	4283      	cmp	r3, r0
 800bb12:	d004      	beq.n	800bb1e <__swbuf_r+0x62>
 800bb14:	89a3      	ldrh	r3, [r4, #12]
 800bb16:	07db      	lsls	r3, r3, #31
 800bb18:	d506      	bpl.n	800bb28 <__swbuf_r+0x6c>
 800bb1a:	2e0a      	cmp	r6, #10
 800bb1c:	d104      	bne.n	800bb28 <__swbuf_r+0x6c>
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4628      	mov	r0, r5
 800bb22:	f000 f951 	bl	800bdc8 <_fflush_r>
 800bb26:	b988      	cbnz	r0, 800bb4c <__swbuf_r+0x90>
 800bb28:	4638      	mov	r0, r7
 800bb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <__swbuf_r+0x9c>)
 800bb2e:	429c      	cmp	r4, r3
 800bb30:	d101      	bne.n	800bb36 <__swbuf_r+0x7a>
 800bb32:	68ac      	ldr	r4, [r5, #8]
 800bb34:	e7cf      	b.n	800bad6 <__swbuf_r+0x1a>
 800bb36:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <__swbuf_r+0xa0>)
 800bb38:	429c      	cmp	r4, r3
 800bb3a:	bf08      	it	eq
 800bb3c:	68ec      	ldreq	r4, [r5, #12]
 800bb3e:	e7ca      	b.n	800bad6 <__swbuf_r+0x1a>
 800bb40:	4621      	mov	r1, r4
 800bb42:	4628      	mov	r0, r5
 800bb44:	f000 f81e 	bl	800bb84 <__swsetup_r>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d0cb      	beq.n	800bae4 <__swbuf_r+0x28>
 800bb4c:	f04f 37ff 	mov.w	r7, #4294967295
 800bb50:	e7ea      	b.n	800bb28 <__swbuf_r+0x6c>
 800bb52:	bf00      	nop
 800bb54:	0800c3d8 	.word	0x0800c3d8
 800bb58:	0800c3f8 	.word	0x0800c3f8
 800bb5c:	0800c3b8 	.word	0x0800c3b8

0800bb60 <_write_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d07      	ldr	r5, [pc, #28]	; (800bb80 <_write_r+0x20>)
 800bb64:	4604      	mov	r4, r0
 800bb66:	4608      	mov	r0, r1
 800bb68:	4611      	mov	r1, r2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	602a      	str	r2, [r5, #0]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f7f6 f9e3 	bl	8001f3a <_write>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	d102      	bne.n	800bb7e <_write_r+0x1e>
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	b103      	cbz	r3, 800bb7e <_write_r+0x1e>
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	200005c0 	.word	0x200005c0

0800bb84 <__swsetup_r>:
 800bb84:	4b32      	ldr	r3, [pc, #200]	; (800bc50 <__swsetup_r+0xcc>)
 800bb86:	b570      	push	{r4, r5, r6, lr}
 800bb88:	681d      	ldr	r5, [r3, #0]
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	b125      	cbz	r5, 800bb9a <__swsetup_r+0x16>
 800bb90:	69ab      	ldr	r3, [r5, #24]
 800bb92:	b913      	cbnz	r3, 800bb9a <__swsetup_r+0x16>
 800bb94:	4628      	mov	r0, r5
 800bb96:	f7ff f8ad 	bl	800acf4 <__sinit>
 800bb9a:	4b2e      	ldr	r3, [pc, #184]	; (800bc54 <__swsetup_r+0xd0>)
 800bb9c:	429c      	cmp	r4, r3
 800bb9e:	d10f      	bne.n	800bbc0 <__swsetup_r+0x3c>
 800bba0:	686c      	ldr	r4, [r5, #4]
 800bba2:	89a3      	ldrh	r3, [r4, #12]
 800bba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bba8:	0719      	lsls	r1, r3, #28
 800bbaa:	d42c      	bmi.n	800bc06 <__swsetup_r+0x82>
 800bbac:	06dd      	lsls	r5, r3, #27
 800bbae:	d411      	bmi.n	800bbd4 <__swsetup_r+0x50>
 800bbb0:	2309      	movs	r3, #9
 800bbb2:	6033      	str	r3, [r6, #0]
 800bbb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbb8:	81a3      	strh	r3, [r4, #12]
 800bbba:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbe:	e03e      	b.n	800bc3e <__swsetup_r+0xba>
 800bbc0:	4b25      	ldr	r3, [pc, #148]	; (800bc58 <__swsetup_r+0xd4>)
 800bbc2:	429c      	cmp	r4, r3
 800bbc4:	d101      	bne.n	800bbca <__swsetup_r+0x46>
 800bbc6:	68ac      	ldr	r4, [r5, #8]
 800bbc8:	e7eb      	b.n	800bba2 <__swsetup_r+0x1e>
 800bbca:	4b24      	ldr	r3, [pc, #144]	; (800bc5c <__swsetup_r+0xd8>)
 800bbcc:	429c      	cmp	r4, r3
 800bbce:	bf08      	it	eq
 800bbd0:	68ec      	ldreq	r4, [r5, #12]
 800bbd2:	e7e6      	b.n	800bba2 <__swsetup_r+0x1e>
 800bbd4:	0758      	lsls	r0, r3, #29
 800bbd6:	d512      	bpl.n	800bbfe <__swsetup_r+0x7a>
 800bbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbda:	b141      	cbz	r1, 800bbee <__swsetup_r+0x6a>
 800bbdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbe0:	4299      	cmp	r1, r3
 800bbe2:	d002      	beq.n	800bbea <__swsetup_r+0x66>
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f7ff fcdb 	bl	800b5a0 <_free_r>
 800bbea:	2300      	movs	r3, #0
 800bbec:	6363      	str	r3, [r4, #52]	; 0x34
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbf4:	81a3      	strh	r3, [r4, #12]
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	6063      	str	r3, [r4, #4]
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	f043 0308 	orr.w	r3, r3, #8
 800bc04:	81a3      	strh	r3, [r4, #12]
 800bc06:	6923      	ldr	r3, [r4, #16]
 800bc08:	b94b      	cbnz	r3, 800bc1e <__swsetup_r+0x9a>
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc14:	d003      	beq.n	800bc1e <__swsetup_r+0x9a>
 800bc16:	4621      	mov	r1, r4
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f000 f95b 	bl	800bed4 <__smakebuf_r>
 800bc1e:	89a0      	ldrh	r0, [r4, #12]
 800bc20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc24:	f010 0301 	ands.w	r3, r0, #1
 800bc28:	d00a      	beq.n	800bc40 <__swsetup_r+0xbc>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	60a3      	str	r3, [r4, #8]
 800bc2e:	6963      	ldr	r3, [r4, #20]
 800bc30:	425b      	negs	r3, r3
 800bc32:	61a3      	str	r3, [r4, #24]
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	b943      	cbnz	r3, 800bc4a <__swsetup_r+0xc6>
 800bc38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc3c:	d1ba      	bne.n	800bbb4 <__swsetup_r+0x30>
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}
 800bc40:	0781      	lsls	r1, r0, #30
 800bc42:	bf58      	it	pl
 800bc44:	6963      	ldrpl	r3, [r4, #20]
 800bc46:	60a3      	str	r3, [r4, #8]
 800bc48:	e7f4      	b.n	800bc34 <__swsetup_r+0xb0>
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	e7f7      	b.n	800bc3e <__swsetup_r+0xba>
 800bc4e:	bf00      	nop
 800bc50:	20000010 	.word	0x20000010
 800bc54:	0800c3d8 	.word	0x0800c3d8
 800bc58:	0800c3f8 	.word	0x0800c3f8
 800bc5c:	0800c3b8 	.word	0x0800c3b8

0800bc60 <__assert_func>:
 800bc60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc62:	4614      	mov	r4, r2
 800bc64:	461a      	mov	r2, r3
 800bc66:	4b09      	ldr	r3, [pc, #36]	; (800bc8c <__assert_func+0x2c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	68d8      	ldr	r0, [r3, #12]
 800bc6e:	b14c      	cbz	r4, 800bc84 <__assert_func+0x24>
 800bc70:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <__assert_func+0x30>)
 800bc72:	9100      	str	r1, [sp, #0]
 800bc74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc78:	4906      	ldr	r1, [pc, #24]	; (800bc94 <__assert_func+0x34>)
 800bc7a:	462b      	mov	r3, r5
 800bc7c:	f000 f8e0 	bl	800be40 <fiprintf>
 800bc80:	f000 f9a5 	bl	800bfce <abort>
 800bc84:	4b04      	ldr	r3, [pc, #16]	; (800bc98 <__assert_func+0x38>)
 800bc86:	461c      	mov	r4, r3
 800bc88:	e7f3      	b.n	800bc72 <__assert_func+0x12>
 800bc8a:	bf00      	nop
 800bc8c:	20000010 	.word	0x20000010
 800bc90:	0800c585 	.word	0x0800c585
 800bc94:	0800c592 	.word	0x0800c592
 800bc98:	0800c5c0 	.word	0x0800c5c0

0800bc9c <_close_r>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	4d06      	ldr	r5, [pc, #24]	; (800bcb8 <_close_r+0x1c>)
 800bca0:	2300      	movs	r3, #0
 800bca2:	4604      	mov	r4, r0
 800bca4:	4608      	mov	r0, r1
 800bca6:	602b      	str	r3, [r5, #0]
 800bca8:	f7f6 f963 	bl	8001f72 <_close>
 800bcac:	1c43      	adds	r3, r0, #1
 800bcae:	d102      	bne.n	800bcb6 <_close_r+0x1a>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	b103      	cbz	r3, 800bcb6 <_close_r+0x1a>
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	200005c0 	.word	0x200005c0

0800bcbc <__sflush_r>:
 800bcbc:	898a      	ldrh	r2, [r1, #12]
 800bcbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	4605      	mov	r5, r0
 800bcc4:	0710      	lsls	r0, r2, #28
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	d458      	bmi.n	800bd7c <__sflush_r+0xc0>
 800bcca:	684b      	ldr	r3, [r1, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	dc05      	bgt.n	800bcdc <__sflush_r+0x20>
 800bcd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	dc02      	bgt.n	800bcdc <__sflush_r+0x20>
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcde:	2e00      	cmp	r6, #0
 800bce0:	d0f9      	beq.n	800bcd6 <__sflush_r+0x1a>
 800bce2:	2300      	movs	r3, #0
 800bce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bce8:	682f      	ldr	r7, [r5, #0]
 800bcea:	602b      	str	r3, [r5, #0]
 800bcec:	d032      	beq.n	800bd54 <__sflush_r+0x98>
 800bcee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	075a      	lsls	r2, r3, #29
 800bcf4:	d505      	bpl.n	800bd02 <__sflush_r+0x46>
 800bcf6:	6863      	ldr	r3, [r4, #4]
 800bcf8:	1ac0      	subs	r0, r0, r3
 800bcfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcfc:	b10b      	cbz	r3, 800bd02 <__sflush_r+0x46>
 800bcfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd00:	1ac0      	subs	r0, r0, r3
 800bd02:	2300      	movs	r3, #0
 800bd04:	4602      	mov	r2, r0
 800bd06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd08:	6a21      	ldr	r1, [r4, #32]
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	47b0      	blx	r6
 800bd0e:	1c43      	adds	r3, r0, #1
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	d106      	bne.n	800bd22 <__sflush_r+0x66>
 800bd14:	6829      	ldr	r1, [r5, #0]
 800bd16:	291d      	cmp	r1, #29
 800bd18:	d82c      	bhi.n	800bd74 <__sflush_r+0xb8>
 800bd1a:	4a2a      	ldr	r2, [pc, #168]	; (800bdc4 <__sflush_r+0x108>)
 800bd1c:	40ca      	lsrs	r2, r1
 800bd1e:	07d6      	lsls	r6, r2, #31
 800bd20:	d528      	bpl.n	800bd74 <__sflush_r+0xb8>
 800bd22:	2200      	movs	r2, #0
 800bd24:	6062      	str	r2, [r4, #4]
 800bd26:	04d9      	lsls	r1, r3, #19
 800bd28:	6922      	ldr	r2, [r4, #16]
 800bd2a:	6022      	str	r2, [r4, #0]
 800bd2c:	d504      	bpl.n	800bd38 <__sflush_r+0x7c>
 800bd2e:	1c42      	adds	r2, r0, #1
 800bd30:	d101      	bne.n	800bd36 <__sflush_r+0x7a>
 800bd32:	682b      	ldr	r3, [r5, #0]
 800bd34:	b903      	cbnz	r3, 800bd38 <__sflush_r+0x7c>
 800bd36:	6560      	str	r0, [r4, #84]	; 0x54
 800bd38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd3a:	602f      	str	r7, [r5, #0]
 800bd3c:	2900      	cmp	r1, #0
 800bd3e:	d0ca      	beq.n	800bcd6 <__sflush_r+0x1a>
 800bd40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd44:	4299      	cmp	r1, r3
 800bd46:	d002      	beq.n	800bd4e <__sflush_r+0x92>
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f7ff fc29 	bl	800b5a0 <_free_r>
 800bd4e:	2000      	movs	r0, #0
 800bd50:	6360      	str	r0, [r4, #52]	; 0x34
 800bd52:	e7c1      	b.n	800bcd8 <__sflush_r+0x1c>
 800bd54:	6a21      	ldr	r1, [r4, #32]
 800bd56:	2301      	movs	r3, #1
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b0      	blx	r6
 800bd5c:	1c41      	adds	r1, r0, #1
 800bd5e:	d1c7      	bne.n	800bcf0 <__sflush_r+0x34>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0c4      	beq.n	800bcf0 <__sflush_r+0x34>
 800bd66:	2b1d      	cmp	r3, #29
 800bd68:	d001      	beq.n	800bd6e <__sflush_r+0xb2>
 800bd6a:	2b16      	cmp	r3, #22
 800bd6c:	d101      	bne.n	800bd72 <__sflush_r+0xb6>
 800bd6e:	602f      	str	r7, [r5, #0]
 800bd70:	e7b1      	b.n	800bcd6 <__sflush_r+0x1a>
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd78:	81a3      	strh	r3, [r4, #12]
 800bd7a:	e7ad      	b.n	800bcd8 <__sflush_r+0x1c>
 800bd7c:	690f      	ldr	r7, [r1, #16]
 800bd7e:	2f00      	cmp	r7, #0
 800bd80:	d0a9      	beq.n	800bcd6 <__sflush_r+0x1a>
 800bd82:	0793      	lsls	r3, r2, #30
 800bd84:	680e      	ldr	r6, [r1, #0]
 800bd86:	bf08      	it	eq
 800bd88:	694b      	ldreq	r3, [r1, #20]
 800bd8a:	600f      	str	r7, [r1, #0]
 800bd8c:	bf18      	it	ne
 800bd8e:	2300      	movne	r3, #0
 800bd90:	eba6 0807 	sub.w	r8, r6, r7
 800bd94:	608b      	str	r3, [r1, #8]
 800bd96:	f1b8 0f00 	cmp.w	r8, #0
 800bd9a:	dd9c      	ble.n	800bcd6 <__sflush_r+0x1a>
 800bd9c:	6a21      	ldr	r1, [r4, #32]
 800bd9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bda0:	4643      	mov	r3, r8
 800bda2:	463a      	mov	r2, r7
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b0      	blx	r6
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	dc06      	bgt.n	800bdba <__sflush_r+0xfe>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb2:	81a3      	strh	r3, [r4, #12]
 800bdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb8:	e78e      	b.n	800bcd8 <__sflush_r+0x1c>
 800bdba:	4407      	add	r7, r0
 800bdbc:	eba8 0800 	sub.w	r8, r8, r0
 800bdc0:	e7e9      	b.n	800bd96 <__sflush_r+0xda>
 800bdc2:	bf00      	nop
 800bdc4:	20400001 	.word	0x20400001

0800bdc8 <_fflush_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	690b      	ldr	r3, [r1, #16]
 800bdcc:	4605      	mov	r5, r0
 800bdce:	460c      	mov	r4, r1
 800bdd0:	b913      	cbnz	r3, 800bdd8 <_fflush_r+0x10>
 800bdd2:	2500      	movs	r5, #0
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	b118      	cbz	r0, 800bde2 <_fflush_r+0x1a>
 800bdda:	6983      	ldr	r3, [r0, #24]
 800bddc:	b90b      	cbnz	r3, 800bde2 <_fflush_r+0x1a>
 800bdde:	f7fe ff89 	bl	800acf4 <__sinit>
 800bde2:	4b14      	ldr	r3, [pc, #80]	; (800be34 <_fflush_r+0x6c>)
 800bde4:	429c      	cmp	r4, r3
 800bde6:	d11b      	bne.n	800be20 <_fflush_r+0x58>
 800bde8:	686c      	ldr	r4, [r5, #4]
 800bdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0ef      	beq.n	800bdd2 <_fflush_r+0xa>
 800bdf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdf4:	07d0      	lsls	r0, r2, #31
 800bdf6:	d404      	bmi.n	800be02 <_fflush_r+0x3a>
 800bdf8:	0599      	lsls	r1, r3, #22
 800bdfa:	d402      	bmi.n	800be02 <_fflush_r+0x3a>
 800bdfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdfe:	f7ff f81c 	bl	800ae3a <__retarget_lock_acquire_recursive>
 800be02:	4628      	mov	r0, r5
 800be04:	4621      	mov	r1, r4
 800be06:	f7ff ff59 	bl	800bcbc <__sflush_r>
 800be0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be0c:	07da      	lsls	r2, r3, #31
 800be0e:	4605      	mov	r5, r0
 800be10:	d4e0      	bmi.n	800bdd4 <_fflush_r+0xc>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	059b      	lsls	r3, r3, #22
 800be16:	d4dd      	bmi.n	800bdd4 <_fflush_r+0xc>
 800be18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be1a:	f7ff f80f 	bl	800ae3c <__retarget_lock_release_recursive>
 800be1e:	e7d9      	b.n	800bdd4 <_fflush_r+0xc>
 800be20:	4b05      	ldr	r3, [pc, #20]	; (800be38 <_fflush_r+0x70>)
 800be22:	429c      	cmp	r4, r3
 800be24:	d101      	bne.n	800be2a <_fflush_r+0x62>
 800be26:	68ac      	ldr	r4, [r5, #8]
 800be28:	e7df      	b.n	800bdea <_fflush_r+0x22>
 800be2a:	4b04      	ldr	r3, [pc, #16]	; (800be3c <_fflush_r+0x74>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	bf08      	it	eq
 800be30:	68ec      	ldreq	r4, [r5, #12]
 800be32:	e7da      	b.n	800bdea <_fflush_r+0x22>
 800be34:	0800c3d8 	.word	0x0800c3d8
 800be38:	0800c3f8 	.word	0x0800c3f8
 800be3c:	0800c3b8 	.word	0x0800c3b8

0800be40 <fiprintf>:
 800be40:	b40e      	push	{r1, r2, r3}
 800be42:	b503      	push	{r0, r1, lr}
 800be44:	4601      	mov	r1, r0
 800be46:	ab03      	add	r3, sp, #12
 800be48:	4805      	ldr	r0, [pc, #20]	; (800be60 <fiprintf+0x20>)
 800be4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be4e:	6800      	ldr	r0, [r0, #0]
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	f7ff fcaf 	bl	800b7b4 <_vfiprintf_r>
 800be56:	b002      	add	sp, #8
 800be58:	f85d eb04 	ldr.w	lr, [sp], #4
 800be5c:	b003      	add	sp, #12
 800be5e:	4770      	bx	lr
 800be60:	20000010 	.word	0x20000010

0800be64 <_lseek_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4d07      	ldr	r5, [pc, #28]	; (800be84 <_lseek_r+0x20>)
 800be68:	4604      	mov	r4, r0
 800be6a:	4608      	mov	r0, r1
 800be6c:	4611      	mov	r1, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	602a      	str	r2, [r5, #0]
 800be72:	461a      	mov	r2, r3
 800be74:	f7f6 f8a4 	bl	8001fc0 <_lseek>
 800be78:	1c43      	adds	r3, r0, #1
 800be7a:	d102      	bne.n	800be82 <_lseek_r+0x1e>
 800be7c:	682b      	ldr	r3, [r5, #0]
 800be7e:	b103      	cbz	r3, 800be82 <_lseek_r+0x1e>
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	bd38      	pop	{r3, r4, r5, pc}
 800be84:	200005c0 	.word	0x200005c0

0800be88 <__swhatbuf_r>:
 800be88:	b570      	push	{r4, r5, r6, lr}
 800be8a:	460e      	mov	r6, r1
 800be8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be90:	2900      	cmp	r1, #0
 800be92:	b096      	sub	sp, #88	; 0x58
 800be94:	4614      	mov	r4, r2
 800be96:	461d      	mov	r5, r3
 800be98:	da08      	bge.n	800beac <__swhatbuf_r+0x24>
 800be9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	602a      	str	r2, [r5, #0]
 800bea2:	061a      	lsls	r2, r3, #24
 800bea4:	d410      	bmi.n	800bec8 <__swhatbuf_r+0x40>
 800bea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beaa:	e00e      	b.n	800beca <__swhatbuf_r+0x42>
 800beac:	466a      	mov	r2, sp
 800beae:	f000 f895 	bl	800bfdc <_fstat_r>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	dbf1      	blt.n	800be9a <__swhatbuf_r+0x12>
 800beb6:	9a01      	ldr	r2, [sp, #4]
 800beb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bebc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bec0:	425a      	negs	r2, r3
 800bec2:	415a      	adcs	r2, r3
 800bec4:	602a      	str	r2, [r5, #0]
 800bec6:	e7ee      	b.n	800bea6 <__swhatbuf_r+0x1e>
 800bec8:	2340      	movs	r3, #64	; 0x40
 800beca:	2000      	movs	r0, #0
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	b016      	add	sp, #88	; 0x58
 800bed0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bed4 <__smakebuf_r>:
 800bed4:	898b      	ldrh	r3, [r1, #12]
 800bed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bed8:	079d      	lsls	r5, r3, #30
 800beda:	4606      	mov	r6, r0
 800bedc:	460c      	mov	r4, r1
 800bede:	d507      	bpl.n	800bef0 <__smakebuf_r+0x1c>
 800bee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	6123      	str	r3, [r4, #16]
 800bee8:	2301      	movs	r3, #1
 800beea:	6163      	str	r3, [r4, #20]
 800beec:	b002      	add	sp, #8
 800beee:	bd70      	pop	{r4, r5, r6, pc}
 800bef0:	ab01      	add	r3, sp, #4
 800bef2:	466a      	mov	r2, sp
 800bef4:	f7ff ffc8 	bl	800be88 <__swhatbuf_r>
 800bef8:	9900      	ldr	r1, [sp, #0]
 800befa:	4605      	mov	r5, r0
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff fbbb 	bl	800b678 <_malloc_r>
 800bf02:	b948      	cbnz	r0, 800bf18 <__smakebuf_r+0x44>
 800bf04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf08:	059a      	lsls	r2, r3, #22
 800bf0a:	d4ef      	bmi.n	800beec <__smakebuf_r+0x18>
 800bf0c:	f023 0303 	bic.w	r3, r3, #3
 800bf10:	f043 0302 	orr.w	r3, r3, #2
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	e7e3      	b.n	800bee0 <__smakebuf_r+0xc>
 800bf18:	4b0d      	ldr	r3, [pc, #52]	; (800bf50 <__smakebuf_r+0x7c>)
 800bf1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	6020      	str	r0, [r4, #0]
 800bf20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf24:	81a3      	strh	r3, [r4, #12]
 800bf26:	9b00      	ldr	r3, [sp, #0]
 800bf28:	6163      	str	r3, [r4, #20]
 800bf2a:	9b01      	ldr	r3, [sp, #4]
 800bf2c:	6120      	str	r0, [r4, #16]
 800bf2e:	b15b      	cbz	r3, 800bf48 <__smakebuf_r+0x74>
 800bf30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf34:	4630      	mov	r0, r6
 800bf36:	f000 f863 	bl	800c000 <_isatty_r>
 800bf3a:	b128      	cbz	r0, 800bf48 <__smakebuf_r+0x74>
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	f023 0303 	bic.w	r3, r3, #3
 800bf42:	f043 0301 	orr.w	r3, r3, #1
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	89a0      	ldrh	r0, [r4, #12]
 800bf4a:	4305      	orrs	r5, r0
 800bf4c:	81a5      	strh	r5, [r4, #12]
 800bf4e:	e7cd      	b.n	800beec <__smakebuf_r+0x18>
 800bf50:	0800ac8d 	.word	0x0800ac8d

0800bf54 <__ascii_mbtowc>:
 800bf54:	b082      	sub	sp, #8
 800bf56:	b901      	cbnz	r1, 800bf5a <__ascii_mbtowc+0x6>
 800bf58:	a901      	add	r1, sp, #4
 800bf5a:	b142      	cbz	r2, 800bf6e <__ascii_mbtowc+0x1a>
 800bf5c:	b14b      	cbz	r3, 800bf72 <__ascii_mbtowc+0x1e>
 800bf5e:	7813      	ldrb	r3, [r2, #0]
 800bf60:	600b      	str	r3, [r1, #0]
 800bf62:	7812      	ldrb	r2, [r2, #0]
 800bf64:	1e10      	subs	r0, r2, #0
 800bf66:	bf18      	it	ne
 800bf68:	2001      	movne	r0, #1
 800bf6a:	b002      	add	sp, #8
 800bf6c:	4770      	bx	lr
 800bf6e:	4610      	mov	r0, r2
 800bf70:	e7fb      	b.n	800bf6a <__ascii_mbtowc+0x16>
 800bf72:	f06f 0001 	mvn.w	r0, #1
 800bf76:	e7f8      	b.n	800bf6a <__ascii_mbtowc+0x16>

0800bf78 <__malloc_lock>:
 800bf78:	4801      	ldr	r0, [pc, #4]	; (800bf80 <__malloc_lock+0x8>)
 800bf7a:	f7fe bf5e 	b.w	800ae3a <__retarget_lock_acquire_recursive>
 800bf7e:	bf00      	nop
 800bf80:	200005b4 	.word	0x200005b4

0800bf84 <__malloc_unlock>:
 800bf84:	4801      	ldr	r0, [pc, #4]	; (800bf8c <__malloc_unlock+0x8>)
 800bf86:	f7fe bf59 	b.w	800ae3c <__retarget_lock_release_recursive>
 800bf8a:	bf00      	nop
 800bf8c:	200005b4 	.word	0x200005b4

0800bf90 <_read_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4d07      	ldr	r5, [pc, #28]	; (800bfb0 <_read_r+0x20>)
 800bf94:	4604      	mov	r4, r0
 800bf96:	4608      	mov	r0, r1
 800bf98:	4611      	mov	r1, r2
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	602a      	str	r2, [r5, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	f7f5 ffae 	bl	8001f00 <_read>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d102      	bne.n	800bfae <_read_r+0x1e>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	b103      	cbz	r3, 800bfae <_read_r+0x1e>
 800bfac:	6023      	str	r3, [r4, #0]
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	200005c0 	.word	0x200005c0

0800bfb4 <__ascii_wctomb>:
 800bfb4:	b149      	cbz	r1, 800bfca <__ascii_wctomb+0x16>
 800bfb6:	2aff      	cmp	r2, #255	; 0xff
 800bfb8:	bf85      	ittet	hi
 800bfba:	238a      	movhi	r3, #138	; 0x8a
 800bfbc:	6003      	strhi	r3, [r0, #0]
 800bfbe:	700a      	strbls	r2, [r1, #0]
 800bfc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfc4:	bf98      	it	ls
 800bfc6:	2001      	movls	r0, #1
 800bfc8:	4770      	bx	lr
 800bfca:	4608      	mov	r0, r1
 800bfcc:	4770      	bx	lr

0800bfce <abort>:
 800bfce:	b508      	push	{r3, lr}
 800bfd0:	2006      	movs	r0, #6
 800bfd2:	f000 f84d 	bl	800c070 <raise>
 800bfd6:	2001      	movs	r0, #1
 800bfd8:	f7f5 ff88 	bl	8001eec <_exit>

0800bfdc <_fstat_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d07      	ldr	r5, [pc, #28]	; (800bffc <_fstat_r+0x20>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	602b      	str	r3, [r5, #0]
 800bfea:	f7f5 ffce 	bl	8001f8a <_fstat>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	d102      	bne.n	800bff8 <_fstat_r+0x1c>
 800bff2:	682b      	ldr	r3, [r5, #0]
 800bff4:	b103      	cbz	r3, 800bff8 <_fstat_r+0x1c>
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	bd38      	pop	{r3, r4, r5, pc}
 800bffa:	bf00      	nop
 800bffc:	200005c0 	.word	0x200005c0

0800c000 <_isatty_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4d06      	ldr	r5, [pc, #24]	; (800c01c <_isatty_r+0x1c>)
 800c004:	2300      	movs	r3, #0
 800c006:	4604      	mov	r4, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	602b      	str	r3, [r5, #0]
 800c00c:	f7f5 ffcd 	bl	8001faa <_isatty>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_isatty_r+0x1a>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	b103      	cbz	r3, 800c01a <_isatty_r+0x1a>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	200005c0 	.word	0x200005c0

0800c020 <_raise_r>:
 800c020:	291f      	cmp	r1, #31
 800c022:	b538      	push	{r3, r4, r5, lr}
 800c024:	4604      	mov	r4, r0
 800c026:	460d      	mov	r5, r1
 800c028:	d904      	bls.n	800c034 <_raise_r+0x14>
 800c02a:	2316      	movs	r3, #22
 800c02c:	6003      	str	r3, [r0, #0]
 800c02e:	f04f 30ff 	mov.w	r0, #4294967295
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c036:	b112      	cbz	r2, 800c03e <_raise_r+0x1e>
 800c038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c03c:	b94b      	cbnz	r3, 800c052 <_raise_r+0x32>
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 f830 	bl	800c0a4 <_getpid_r>
 800c044:	462a      	mov	r2, r5
 800c046:	4601      	mov	r1, r0
 800c048:	4620      	mov	r0, r4
 800c04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c04e:	f000 b817 	b.w	800c080 <_kill_r>
 800c052:	2b01      	cmp	r3, #1
 800c054:	d00a      	beq.n	800c06c <_raise_r+0x4c>
 800c056:	1c59      	adds	r1, r3, #1
 800c058:	d103      	bne.n	800c062 <_raise_r+0x42>
 800c05a:	2316      	movs	r3, #22
 800c05c:	6003      	str	r3, [r0, #0]
 800c05e:	2001      	movs	r0, #1
 800c060:	e7e7      	b.n	800c032 <_raise_r+0x12>
 800c062:	2400      	movs	r4, #0
 800c064:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c068:	4628      	mov	r0, r5
 800c06a:	4798      	blx	r3
 800c06c:	2000      	movs	r0, #0
 800c06e:	e7e0      	b.n	800c032 <_raise_r+0x12>

0800c070 <raise>:
 800c070:	4b02      	ldr	r3, [pc, #8]	; (800c07c <raise+0xc>)
 800c072:	4601      	mov	r1, r0
 800c074:	6818      	ldr	r0, [r3, #0]
 800c076:	f7ff bfd3 	b.w	800c020 <_raise_r>
 800c07a:	bf00      	nop
 800c07c:	20000010 	.word	0x20000010

0800c080 <_kill_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	4d07      	ldr	r5, [pc, #28]	; (800c0a0 <_kill_r+0x20>)
 800c084:	2300      	movs	r3, #0
 800c086:	4604      	mov	r4, r0
 800c088:	4608      	mov	r0, r1
 800c08a:	4611      	mov	r1, r2
 800c08c:	602b      	str	r3, [r5, #0]
 800c08e:	f7f5 ff1d 	bl	8001ecc <_kill>
 800c092:	1c43      	adds	r3, r0, #1
 800c094:	d102      	bne.n	800c09c <_kill_r+0x1c>
 800c096:	682b      	ldr	r3, [r5, #0]
 800c098:	b103      	cbz	r3, 800c09c <_kill_r+0x1c>
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	bd38      	pop	{r3, r4, r5, pc}
 800c09e:	bf00      	nop
 800c0a0:	200005c0 	.word	0x200005c0

0800c0a4 <_getpid_r>:
 800c0a4:	f7f5 bf0a 	b.w	8001ebc <_getpid>

0800c0a8 <_init>:
 800c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0aa:	bf00      	nop
 800c0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ae:	bc08      	pop	{r3}
 800c0b0:	469e      	mov	lr, r3
 800c0b2:	4770      	bx	lr

0800c0b4 <_fini>:
 800c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b6:	bf00      	nop
 800c0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ba:	bc08      	pop	{r3}
 800c0bc:	469e      	mov	lr, r3
 800c0be:	4770      	bx	lr
